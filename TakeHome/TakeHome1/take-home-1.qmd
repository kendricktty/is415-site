---
title: "TH1: Geospatial Analytics for Social Good"
image: "../../_site/HandsOn/Hands-on_Ex03/hands-on-3_files/figure-html/unnamed-chunk-42-1.png"
subtitle: "Take Home Exercise 1: Application of Spatial and Spatio-temporal Point Patterns Analysis to discover the geographical distribution of Armed Conflict in Myanmar"
author: "Kendrick Teo"
date: "2024-09-07"
date-modified: "last-modified"

execute: 
  eval: true
  echo: true
  freeze: true
---

## TH1.1 Introduction

Millions of people have their lives shattered by armed conflict every year. One of these is the [**Myanmar Civil War**](https://en.wikipedia.org/wiki/Myanmar_civil_war_(2021%E2%80%93present)), a significant escalation of the long-running [Myanmar Conflict](https://en.wikipedia.org/wiki/Myanmar_conflict) in response to the [2021 coup d'etat](https://en.wikipedia.org/wiki/2021_Myanmar_coup_d%27%C3%A9tat).

Geospatial analtyics holds the potential to address complex problems facing society, such as this one. This study serves to discover the sptial and spatio-temporal distribution (spread) of the latest armed conflict in [Myanmar](https://en.wikipedia.org/wiki/Myanmar) by applying spatial point pattern analysis (SPPA) methods.

### TH1.1.1 Loading R packages

The `R` packages we will use today are:

-   `sf`
-   `tmap`
-   `spatstat`
-   `sparr`
-   `raster`
-   `maptools`

```{r}
pacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)
```

## TH1.2 The Data

Armed conflict data in Myanmar between **January 2021 and September 2024** was downloaded from the [Armed Conflict Location & Event Database (ACLED)](https://acleddata.com/), an independent, impartial, international non-profit organization collecting data on violent conflicts and protests in all countries and territories in the world (Raleigh et al., 2023). We will be superimposing these locations with the geogrpahical boundary and subdivisions of the country, from the **Myanmar Information Management Unit** (MIMU).

### TH1.2.1 Loading armed conflict data into `tibble` object

First, we load our *aspatial* armed conflict data into a `tibble` object.

```{r}
acled_mya <- read_csv("data/2021-01-01-2024-09-16-Southeast_Asia-Myanmar.csv")
head(acled_mya)
```

### TH1.2.2 Loading administrative boundaries into `sf` object

Three representations of Myanmar's geography exist on the MIMU repository - `Admin1` subdivides the country into its states and regions only, while `Admin2` subdivides the country by its smaller districts, and `Admin3` its townships. Further, the ACLED labels each incident with all 3 representations. For simplicity and ease of initial understanding, we shall use the `Admin1` representation.

```{r}
mmr_admin1 <- st_read(dsn = "data/mmr_polbnda_adm1_250k_mimu_1", layer = "mmr_polbnda_adm1_250k_mimu_1")
mmr_admin1
qtm(mmr_admin1) # Plots the national boundaries of Myanmar
```

### TH1.2.3 Creating `sf` data frame from aspatial data

The ACLED `tibble` contains coordinates, making it useful for plotting on our map as points. We can therefore use it to create an `sf` data frame using which we can plot our points on a map. The EPSG format of the import coordinates should be [`4326`](https://epsg.io/4326), corresponding to the WGS84 Geographic Coordinate System.

```{r}
acled_mya_sf <- st_as_sf(acled_mya, coords = c("longitude", "latitude"), crs = 4326)
```

## TH1.3 A brief summary of Myanmar and the Myanmar Conflict

We have imported our R packages and loaded our datasets, but before we move on, it is useful to present a brief introduction to the country of Myanmar and the evolution of its longstanding conflict to the state it is today.

The second largest country in Southeast Asia at 676,578 square kilometres and an [ASEAN](https://en.wikipedia.org/wiki/ASEAN) member state, **Myanmar** features fertile tropical deltas in the south and the rugged Himalayan foothills to its north. It shares borders with China to the north and northeast, Laos and Thailand to the east and Southeast, and Bangladesh and India to the west and northwest. Despite having a 2800km coastline providing access to deep-sea ports and an abundance in natural resources including arable land, forests, minerals and natural gas, conflict-ridden Myanmar is considered a **least developed country**, with a GNP per capita of US\$1144 (2011) (Myanmar Information Management Unit, n.d.) and a HDI of 0.6 (UNDP, 2024). Consequently, agriculture accounts for 36% of GDP and 60-70% of employment.

Myanmar is organised into seven **states**, seven **regions** including its largest city **Yangon**, and one **union territory** - its capital, **Naypyitaw**, located at around the country's geographic centre. The states - Chin, Kachin, Kayah, Kyain, Mon, Rakhine and Shan - are largely populated by the national ethnic communities, while most of the inhabitants of its *regions* - Ayeyarwady, Bago, Mandalay, Sagaing, Tanintharyi and largest city [Yangon](https://en.wikipedia.org/wiki/Yangon) - are of the majority Bamar (Burmese) ethnicity. The following code chunk plots the states and regions of Myanmar into an interactive map.

```{r}
tmap_mode('view')
tm_shape(mmr_admin1) + tm_polygons()
tmap_mode('plot')
```

Crucially, Myanmar is one of the world's most ethnically diverse countries, with as many as 135 different ethnic groups boasting a rich tapestry of culture and religious history (Maizland, 2022). While this may paint a rosy picture of cultural beauty on the surface, this is far from reality in the country. While the majority Bamar enjoy a privileged position in society and have held of government and military positions, many of the country's minority groups grapple with systemic discrimination, lack of economic opportunity and development, minimum representation in government, and abuses at the hands of the military.

The code chunk below visualises Myanmar's ethnic breakdown in a pie chart, based on data from the US CIA World Factbook and presented by Maizland (2022).

```{r}
# Plot the composition of ethnic groups in Myanmar
x <- c(2, 2, 3, 4, 5, 7, 9, 68)
y <- c("Indian", "Mon", "Chinese", "Rakhine", "Other", "Karen", "Shan", "Bamar")

y <- paste(y, x)
y <- paste(y, "%", sep="")

pie(x, labels = y, main = "Composition of Ethnic Groups in Myanmar (Maizland, 2022)", col = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"))
# legend("topright", y, cex = 0.8, fill = c("#999999", "#E69F00", "#56B4E9", "#009E73", "#F0E442", "#0072B2", "#D55E00", "#CC79A7"))

```

Because of this disparity - and partially as a result of the British using a divide-and-conquer strategy during the colonial era - lengthy armed conflicts have ensued since Myanmar's independence between the ethnic groups (comprising ethnic armed organisations and smaller militias) and the Tatmadaw, the military, creating what is perhaps the world's longest continuing civil war (Rieffel, 2019). The different ethnic groups of Myanmar fight over many issues, from greater autonomy to control over natural resources. This did not stop even after the country underwent a democratic reform in the early 2010s - since 2017, the Tatmadaw had been mounting a brutal campaign against the ethnic Rohingya (Albert & Maizland, 2020). While the administration of since-deposed state chancellor Aung San Suu Kyi defended their actions, restricting press freedoms in the process, rights groups and UN officials fervently claim the Tatmadaw's actions have amounted to genocide. The Tatmadaw has since unseated Aung San Suu Kyi in 2021 and re-established the military junta, significantly escalating tensions within the country.

## TH1.4 Data wrangling

### TH1.4.1 Coordinate system conversion

The EPSG area code for Myanmar is [`4239`](https://epsg.io/4239), while the WGS 84-compatible code is [`32647`](https://epsg.io/32647). Since we're creating an `owin` object later, we need to first convert our coordinate system.

```{r}
acled_mya_sf <- acled_mya_sf %>% st_transform(crs = 32647)
mmr_admin1 <- mmr_admin1 %>% st_transform(crs = 32647)
tm_shape(mmr_admin1) + tm_polygons() + tm_shape(acled_mya_sf) + tm_dots(size = 0.05)
```

### TH1.4.2 Feature creation

Since the data is timestamped, we are able to plot and compare the frequency of conflict events *over time*. Before we do, though, we need to standardise the date stamps, then compartmentalise them into their year, month and day components, so that we can perform spatial-temporal point patterns analysis (STPPA) later.

Additionally, the ACLED dataset splits the conflict incidents in **Shan state** into *North*, *South* and *East*, and incidents in the **Bago region** into *East* and *West*. We need to combine these into their representations in the polygon set.

```{r}
acled_mya_sf <- acled_mya_sf %>%
    mutate(event_date = dmy(event_date)) %>%
    mutate(DayOfYear = yday(event_date)) %>%
    mutate(Month_num = format(event_date, "%Y-%m")) %>%  # Year-Month format
    mutate(Month_fac = factor(format(event_date, "%B %Y"))) %>% # Full month
    mutate(Quarter_num = ((year(event_date) - 2021) * 4) + quarter(event_date)) %>% # Numbers quarters for STKDE
    mutate(Quarter = paste(year(event_date), "-", quarter(event_date), "Q"))  %>% # Quarter format
    mutate(admin1 = case_when(
      admin1 %in% c("Shan-North", "Shan-South", "Shan-East") ~ "Shan",
      admin1 %in% c("Bago-East", "Bago-West") ~ "Bago",
      TRUE ~ admin1
    ))
```

```{r}
#| echo: false
admin1_unique <- unique(acled_mya_sf$admin1)
admin1_unique
```

```{r}
#| echo: false
quarter_numbers <- unique(acled_mya_sf$Quarter_num)
quarter_numbers
```

```{r}
#| echo: false
quarters <- unique(acled_mya_sf$Quarter) %>% unlist()
print(length(quarters))
quarters
```

```{r}
# Plot points by quarter
tm_shape(mmr_admin1) + tm_polygons() + tm_shape(acled_mya_sf) + tm_dots(size = 0.05) + tm_facets(by="Quarter_num", free.coords=FALSE, drop.units = TRUE)
```

```{r}
#| echo: false
tail(acled_mya_sf)
```

### TH1.4.3 Using `owin` to confine study area within Myanmar borders

Finally, we need to create an `owin` object that will be combined with any `ppp` objects we create later for SPPA.

```{r}
mmr_admin1_owin <- as.owin(mmr_admin1)
plot(mmr_admin1_owin)
# summary(mmr_admin1_owin)
```

## TH1.5 Preliminary analysis

### TH1.5.1 Exploratory Data Analysis (EDA)

We can quickly gain some meaningful insights from our dataset using basic EDA techniques. For instance, with the following code chunk, we can retrieve the total number of fatalities from the armed violence during the study period on a quarterly basis, and print its corresponding summary statistics.

#### TH1.5.1.1 Getting yearly and quarterly distribution of fatalities and summary statistics

```{r}
acled_mya_fatalities_by_quarter <- acled_mya_sf %>%
  group_by(Quarter_num) %>%
  summarise(`All fatalities` = sum(fatalities)) %>%
  ungroup()
# acled_mya_fatalities_by_quarter
summary(acled_mya_fatalities_by_quarter)
```

On average, we can establish that 3935 people die from the armed violence each quarter.

```{r}
acled_mya_fatalities_by_year <- acled_mya_sf %>%
  group_by(year) %>%
  summarise(`All fatalities` = sum(fatalities)) %>%
  ungroup()

ggplot(acled_mya_fatalities_by_year, aes(x=year, y=`All fatalities`)) +
  geom_bar(stat = "identity", fill = "darkgreen") +
      labs(title = "Fatalities by year in Myanmar",
         x = "Year",
         y = "All Fatalities") +
    theme_minimal()
```

#### TH1.5.1.2 Plotting yearly and quarterly distribution of fatalities as a line chart

```{r}
ggplot(acled_mya_fatalities_by_quarter, aes(x=Quarter_num, y=`All fatalities`)) +     
  # geom_bar(stat = "identity", fill = "red4") +
  geom_line(color = "red4") + geom_point() +
    labs(title = "Total Fatalities from the Armed Conflict in Myanmar by Quarter", subtitle = "1 = Q1 2021, 6 = Q2 2022, 11 = Q3 2023, 15 = Q3 2024",
         x = "Quarter",
         y = "All Fatalities") +
    theme_minimal()
```

There were fewer deaths from armed conflict in the first three quarters of 2021 - at the very start of the conflict - than Q4 2021 onwards.

#### TH1.5.1.3 Getting quarterly distribution of incidents involving civilian targeting

Using the same code structure, we can also plot the distribution of armed conflict events involving *civilian targeting*.

```{r}
acled_mya_civilianTargeting_by_quarter <- acled_mya_sf %>%
  group_by(Quarter_num) %>%
  summarise(
    Count = n(),
    Civilians_targeted = sum(civilian_targeting == "Civilian targeting", na.rm = TRUE)
  ) %>%
  mutate(Percentage_incidents_civilians_targeting = (Civilians_targeted / Count) * 100) %>%
  ungroup()
# acled_mya_civilianTargeting_by_quarter
summary(acled_mya_civilianTargeting_by_quarter)

ggplot(acled_mya_civilianTargeting_by_quarter, aes(x=Quarter_num, y=Percentage_incidents_civilians_targeting)) +     
  # geom_bar(stat = "identity", fill = "red4") +
  geom_line(color = "skyblue1") + geom_point() +
    labs(title = "Percentage of Incidents involving civilian targeting in Myanmar by Quarter", subtitle = "1 = Q1 2021, 6 = Q2 2022, 11 = Q3 2023, 15 = Q3 2024",
         x = "Quarter",
         y = "% Incidents with civilian targeting") +
    theme_minimal()
```
The percentage of violent conflict incidents targeting civilians trended upwards throughout the study duration. On average, 19.6% of all armed conflict incidents throughout the study period targeted civilians.

#### TH1.5.1.4 Plotting proportion of fatalities by type of conflict

We can also plot the proportion of fatalities by the type of conflict. The ACLED classifies armed conflict events by mode and intensity of attack and by whether civilians are targeted. From the graph and pie chart below, the largest proportion of fatalities comes from battles, closely followed by explosions and remote violence. However, violence against civilians makes up a sizable 11.4% of fatalities over the study period.

```{r}
unique(acled_mya_sf$event_type)
```

```{r}
acled_mya_fatalities_by_event_type <- acled_mya_sf %>%
  group_by(event_type) %>%
  summarise(`All fatalities` = sum(fatalities)) %>%
  ungroup()
summary(acled_mya_fatalities_by_event_type)
```

```{r}
ggplot(acled_mya_fatalities_by_event_type, aes(x=event_type, y=`All fatalities`)) +
  geom_bar(stat = "identity", fill = "red4") +
      labs(title = "Fatalities by event type in Myanmar",
         x = "Event type",
         y = "All Fatalities") +
    theme_minimal()
```

```{r}
total_fatalities <- sum(acled_mya_fatalities_by_event_type$`All fatalities`)
percentages <- 100 * acled_mya_fatalities_by_event_type$`All fatalities` / total_fatalities

# Set plotting area size
par(mar = c(1, 1, 2, 1))  # Adjust margins if needed

pie(acled_mya_fatalities_by_event_type$`All fatalities`, labels = paste0(round(percentages, 1), "%"), 
    col = rainbow(length(acled_mya_fatalities_by_event_type$event_type)), 
    main = "Fatalities by event type in Myanmar",
    cex = 1  
)
    
legend("topright", paste(acled_mya_fatalities_by_event_type$event_type, ":", round(percentages, 1), "%"), fill = rainbow(length(acled_mya_fatalities_by_event_type$event_type)), cex = 0.7)
```

We can further narrow down the scope of this analysis by limiting our data to a certain year, and to events where the `civilian_targeting` column is filled. The year 2022 saw the highest fatality numbers across the entire study period, so we shall take a closer look.

```{r}
acled_mya_fatalities_by_event_type_2022 <- acled_mya_sf %>%
  filter(year == "2022") %>%
  filter(civilian_targeting == "Civilian targeting") %>%
  group_by(event_type) %>%
  summarise(`All fatalities` = sum(fatalities)) %>%
  ungroup()

ggplot(acled_mya_fatalities_by_event_type_2022, aes(x=event_type, y=`All fatalities`)) +
  geom_bar(stat = "identity", fill = "red4") +
      labs(title = "Fatalities by event type in 2022 with civilian_targeting filled",
         x = "Quarter",
         y = "All Fatalities") +
    theme_minimal()
```

#### TH1.5.1.5 Mapping fatalities and violence against civilians

Finally, we can plot choropleth maps displaying 2 crucial pieces of information: the locations with the greatest number of fatalities, and the locations where civilians are targeted in the violence the most in 2022. In the code chunks we will write to create the plots, we have to refer to the original `tibble` objects instead of the `sf` objects.

```{r}
acled_mya_fatalities_by_admin1_2022 <- acled_mya %>%
  filter(year == 2022) %>%
  mutate(admin1 = case_when(
      admin1 %in% c("Shan-North", "Shan-South", "Shan-East") ~ "Shan",
      admin1 %in% c("Bago-East", "Bago-West") ~ "Bago",
      TRUE ~ admin1
    )) %>%
  group_by(admin1) %>%
  summarise(`All_Fatalities` = sum(fatalities)) %>%
  ungroup()
combined <- left_join(mmr_admin1, acled_mya_fatalities_by_admin1_2022, by = c("ST" = "admin1"))
tm_shape(combined) + 
  tm_fill("All_Fatalities", n = 8, style = "kmeans") + 
  tm_borders(alpha = 0.5) + 
  tm_layout(title = "admin1 by number of fatalities, 2022", legend.outside = TRUE)
```

The above map shows **Sagaing** *region* as the location with the highest number of fatalities in 2022, followed by **Magaway** *region*.

```{r}
#|echo: false
combined
```

```{r}
acled_mya_civiliansTargeted_by_admin1_2022 <- acled_mya %>%
  filter(year == 2022) %>%
  mutate(admin1 = case_when(
      admin1 %in% c("Shan-North", "Shan-South", "Shan-East") ~ "Shan",
      admin1 %in% c("Bago-East", "Bago-West") ~ "Bago",
      TRUE ~ admin1
    )) %>%
  group_by(admin1) %>%
  summarise(
    count = n(),
    Civilians_targeted = sum(civilian_targeting == "Civilian targeting", na.rm = TRUE)
  )%>%
  ungroup() %>%
  mutate(`%_with_Civilian_Targeting` = (`Civilians_targeted` / `count`) * 100)
# acled_mya_civiliansTargeted_by_admin1_2022
combined <- left_join(mmr_admin1, acled_mya_civiliansTargeted_by_admin1_2022, by = c("ST" = "admin1"))
# combined
tm_shape(combined) + 
  tm_fill("%_with_Civilian_Targeting", n = 8, style = "kmeans") + 
  tm_borders(alpha = 0.5) + 
  tm_layout(title = "admin1 by % of incidents targeting civilians, 2022", legend.outside = TRUE)
```
The above map shows that the highest proportion of armed conflicts in the westernmost **Rakhine** *state* and easternmost **Shan** *state* involves violence against civilians. This state is the epicentre of the 2017 Rohingya crisis facing the eponymous Muslim ethnic group, discrimination against whom, in fact, goes as far back as the 1970s (Albert & Maizland, 2020). In joint second are the *regions* of **Bago** and **Yangon**.

### TH1.5.2 Overarching Spatial-Temporal KDE

Next, we can try spatial-temporal kernel density estimation (STKDE) on the entire study area and period. As always, we start by creating `ppp` objects out of our `sf` objects, and checking for duplicates.

```{r}
acled_mya_sf_quarters <- acled_mya_sf %>% select(Quarter_num)
acled_mya_quarters_ppp <- as.ppp(acled_mya_sf_quarters)
acled_mya_quarters_ppp
any(duplicated(acled_mya_quarters_ppp))
```

Since there are duplicates, we need to handle them using jittering.

```{r}
acled_mya_quarters_ppp <- rjitter(acled_mya_quarters_ppp, retry=TRUE, nsim=1, drop=TRUE)
any(duplicated(acled_mya_quarters_ppp))
```

Finally, we join the `owin` object mapping the borders of Myanmar to the `ppp` object.

```{r}
acled_mya_quarters_ppp <- acled_mya_quarters_ppp[mmr_admin1_owin]
plot(acled_mya_quarters_ppp)
```

We can now perform spatial-temporal KDE (STKDE).

```{r}
st_kde <- spattemp.density(acled_mya_quarters_ppp)
summary(st_kde)
```

After performing STKDE, we are able to plot the quarterly STKDE objects between January 2021 and September 2024. The full set of plots can be found in **Annex A**, but the plot for **Q1 2021** (`id` `15`) is of particular interest because of the larger than usual densities around the **Sagaing** and **Chin** areas, as well as near **Yangon**.

```{r}
i = 15
plot(st_kde, quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste("Spatial-temporal KDE for", quarters[i]))
```

### TH1.5.3 STKDE on Data Subset

Knowing that a significant part of the armed violence in Myanmar is due to systemic discrimination on the part of the government or military, it would make sense to repeat the process and plot STKDEs on the subset of the data concerning violence against civilians. The full plots can also be found in **Annex A**.

```{r}
#| echo: false
unique_type <- unique(acled_mya_sf$event_type)
unique_type
```

```{r}
acled_sf_againstCivilians <- acled_mya_sf %>% filter(event_type == "Violence against civilians")
# acled_sf_againstCivilians
acled_sf_againstCivilians <- acled_sf_againstCivilians %>% select(Quarter_num)
```

```{r}
acled_mya_againstCivilians_ppp <- as.ppp(acled_sf_againstCivilians)
any(duplicated(acled_mya_againstCivilians_ppp))
acled_mya_againstCivilians_ppp <- rjitter(acled_mya_againstCivilians_ppp, retry=TRUE, nsim=1, drop=TRUE)
any(duplicated(acled_mya_againstCivilians_ppp))
acled_mya_againstCivilians_ppp <- acled_mya_againstCivilians_ppp[mmr_admin1_owin]
plot(acled_mya_againstCivilians_ppp)
```

```{r}
st_kde_againstCivilians <- spattemp.density(acled_mya_quarters_ppp)
summary(st_kde_againstCivilians)
plot(st_kde_againstCivilians, quarter_numbers[15], override.par=FALSE, fix.range=TRUE, main=paste("Spatial-temporal KDE for violence against civilians events in quarter", quarters[i]))
```

## TH1.6 Zooming in

STKDE on the entire country has not been able to yield satisfactory results thus far. Despite this, though, the preliminary KDE plot identified large clusters of armed conflict in the **Yangon** area in the south off the Andaman sea, as well as the **Sagaing** region and **Chin** state to the central-west. At the same time, from the chropleth maps, Yangon was shown as the area with the second highest degree of civilian targeting, while Sagaing had the most fatalities from the conflict.

It might be more effective to select a subset of regions and perform SPPA and STPPA by region. From our EDA and overarching STKDE, focusing on **Sagaing**, **Shan**, **Rakhine**, **Chin** and **Yangon** makes the most sense. Additionally, an analysis on the **Tanintharyi** *region* will cover the *Kra Isthmus*, the narrow isthmus linking central Thailand to Peninsula Malaysia, to study the scale of the part of the conflict that is geographically closest to the more stable and prosperous Malaysia and Singapore.

## TH1.7 First-order Spatial Point Patterns Analysis

### TH1.7.1 Extracting and plotting study areas

The first step is to extract the study areas and create `owin` objects.

```{r}
study_names <- c("Sagaing", "Shan", "Rakhine", "Chin", "Yangon", "Tanintharyi")
study_areas <- list("Sagaing" = (mmr_admin1 %>% filter(ST == "Sagaing")),
                    "Shan" = (mmr_admin1 %>% filter(ST == "Shan")),
                    "Rakhine" = (mmr_admin1 %>% filter(ST == "Rakhine")),
                    "Chin" = (mmr_admin1 %>% filter(ST == "Chin")),
                    "Yangon" = (mmr_admin1 %>% filter(ST == "Yangon")),
                    "Tanintharyi" = (mmr_admin1 %>% filter(ST == "Tanintharyi"))
)
par(mfrow = c(1, 4))
for (study_name in study_names) {
  print(paste("Study area:", study_name))
  plot(study_areas[[study_name]], main = study_name) 
}

study_ppps <- list()
study_ppps_original <- list()
study_owins <- list()
par(mfrow = c(1, 3))
for (study_name in study_names) {
  print(paste("Creating ppp for", study_name))
  study_owin <- as.owin(study_areas[[study_name]])
  study_owins[[study_name]] <- study_owin
  study_ppps_original[[study_name]] <- acled_mya_quarters_ppp[study_owin]
  study_ppps[[study_name]] <- rescale.ppp(acled_mya_quarters_ppp[study_owin], 1000, "km")
  plot(study_ppps[[study_name]], main=paste("ppp for", study_name))
}
```

### TH1.7.2 Fixed-bandwidth KDE

```{r}
fixed_bandwidth_kde_acled <- list()
par(mfrow = c(1, 3))
for (study_name in study_names) {
  fixed_bandwidth_kde_acled[[study_name]] <- density(study_ppps[[study_name]],
               sigma=bw.scott,
               edge=TRUE,
               kernel="gaussian"
               )
  plot(fixed_bandwidth_kde_acled[[study_name]], 
       main = paste("Fixed-bandwidth KDE for", study_name))
}
```
The fixed-bandwidth KDE returned dense clusters at the following areas for each state or region:

- Sagaing region: toward the south and southwest
- Shan state: towards the northwest, with a secondary cluster towards the southwest
- Rakhine state: one large cluster towards the northwest
- Chin state: one cluster in the central-north and southeast
- Yangon region: one dense cluster towards the south coast
- Tanintharyi region: one dense cluster skirting the northwest coast

### TH1.7.3 Adaptive-bandwidth KDE

```{r}
adaptive_bandwidth_kde_acled <- list()
par(mfrow = c(1, 3))
for (study_name in study_names) {
  adaptive_bandwidth_kde_acled[[study_name]] <- adaptive.density(study_ppps[[study_name]],
               method = "kernel"
               )
  plot(adaptive_bandwidth_kde_acled[[study_name]], 
       main = paste("Adaptive-bandwidth KDE for", study_name))
}
```

Fixed bandwidth KDE using `bw.scott` and the `gaussian` kernel returned a more meaningful result than adaptive bandwidth KDE.

The `bw.scott` method applies **Scott's Rule for Bandwidth Selection for Kernel Density** (Scott, 1992), which calculates a bandwidth $\sigma$ that is proportional to $n^{\frac{-1}{d-4}}$, for number of points $n$ and number of spatial dimension $d$. This rule is fast to compute and, as we've seen, was able to produce a larger bandwidth than the mean-square error criterion defined with the `bw.diggle()` method (Diggle, 1985)

Just for completeness, we will now attempt to map the results of fixed-bandwidth KDE for Rakhine state by creating a `RasterLayer`.

```{r}
rakhine_kde <- fixed_bandwidth_kde_acled[["Rakhine"]]
gridded <- as(rakhine_kde, "SpatialGridDataFrame")
spplot(gridded)
```

```{r}
raster <- raster(rakhine_kde)
raster
projection(raster) <- CRS("+init=EPSG:32647")
raster
```

```{r}
tm_shape(raster) + tm_raster("layer", palette = "viridis") + tm_layout(legend.position = c("left", "bottom"), frame = FALSE)
```

### TH1.7.4 Spatial-temporal KDE

We can also plot spatial-temporal KDEs for each of our selected regions. The full plots can be found in **Annex B**, but the results can be summarised as follows:

- In **Sagaing region**, the bulk of the fighting took place in 2022 towards the south, before dying down thereafter.
- In **Shan state**, fierce fighting took place towards the northwest at the start of the conflict in 2021 and gradually died down, surging again in 4Q 2023 and again in 3Q 2024.
- **Rakhine state** saw little fighting from 2021 until 4Q 2023, when fighting intensified primarily towards the northwest, bordering Bangladesh.
- **Chin state** witnessed the most fighting throughout the state in 1Q 2021.
- **Yangon** saw brief periods of conflict in the first half of 2021, and
- **Tanintharyi region** is largely spared, with small pockets towards its northwest.

```{r}
stkde_six_regions <- list()
for (study_name in study_names) {
  print(study_name)
  stkde_six_regions[[study_name]] <- spattemp.density(study_ppps[[study_name]])
}
```

### TH1.7.5 Nearest neighbour analysis

For each of the 6 regions we are analysing, we can use nearest neighbour analysis to find out whether the spatial point patterns of our armed conflict events exhibit clustering, dispersion or random distribution. The nearest neighbour analysis is done by performing the Clark-Evans test on the hypothesis that the *distribution of armed conflict events is random*.

```{r}
for (study_name in study_names) {
  print(study_name)
  ppp <- study_ppps[[study_name]]
  # plot(ppp)
  print(clarkevans.test(ppp, correction = "none", clipregion = NULL, alternative = c("clustered"), nsim = 99))
}
```

The nearest neighbour analyses for all our regions returned identical *p*-values of `2.2e-16`. Thus, we can conclude that the spatial point patterns for all our target regions are **clustered**. We can corroborate this test result with the fixed-bandwidth KDE visualisations, which indicate the presence of densely-packed conflict areas.

## TH1.8 Second order spatial point patterns analysis

Second order SPPA investigates variations in observations due to the way they interact with one another. In this section, we will use the **F-** and **G-functions** to analyse the spatial point patterns in our 6 selected regions.

The **F-function** (nearest neighbor distribution) and **G-function** (empty space function) are limited to analyzing specific distances or single-scale proximity between points. Ripley's K-function overcomes this issue among others- it valuates the distribution of points over a range of distances, giving insight into spatial clustering or dispersion at different scales. This makes it a more comprehensive analysis of spatial point patterns at multiple spatial scales, at the exepense of it being more computationally complex. An attempt to run Ripley's K-function on armed conflict data in Sagaing - both for the entire study period and just in 2022 - led to a half-hour long freeze, so it will be omitted.

### TH1.8.1 Extracting study period

The functions run slower when fed with more data. Hence, we need to extract a smaller study period. Since the year 2022 saw more fatalities, it makes sense to extract only the events that occurred in 2022.

```{r}
acled_mya_2022_sf <- acled_mya_sf %>% filter(Quarter_num >= 5 & Quarter_num < 7) %>% select(Quarter_num)
acled_mya_2022_ppp <- as.ppp(acled_mya_2022_sf)
acled_mya_2022_ppp <- rjitter(acled_mya_2022_ppp, retry=TRUE, nsim=1, drop=TRUE)
study_ppps_2022 <- list()
for (study_name in study_names) {
  print(paste("Creating ppp for", study_name))
  study_owin <- study_owins[[study_name]]
  study_ppps_2022[[study_name]] <- acled_mya_2022_ppp[study_owin]
}
```

### TH1.8.1 Sagaing Region

#### TH1.8.1.1 G-function

```{r}
study_name = "Sagaing"
G_function <- Gest(study_ppps_2022[[study_name]], correction = "border")
plot(G_function, xlim=c(0,500), main = paste("G-function estimation for", study_name))

G_csr <- envelope(ppp, Gest, nsim = 99)
plot(G_csr, main = paste("G function test for spatial randomness for", study_name))
```

#### TH1.8.1.2 F-function

```{r}
F_function <- Fest(study_ppps_2022[[study_name]])
plot(F_function, xlim=c(0,500), main = paste("F-function estimation for", study_name))

F_csr <- envelope(ppp, Fest, nsim = 99)
plot(F_csr, main = paste("F function test for spatial randomness for", study_name))
```

### TH1.8.2 Shan State

#### TH1.8.2.1 G-function

```{r}
study_name = "Shan"
G_function <- Gest(study_ppps_2022[[study_name]], correction = "border")
plot(G_function, xlim=c(0,500), main = paste("G-function estimation for", study_name))

G_csr <- envelope(ppp, Gest, nsim = 99)
plot(G_csr, main = paste("G function test for spatial randomness for", study_name))
```

#### TH1.8.2.2 F-function

```{r}
F_function <- Fest(study_ppps_2022[[study_name]])
plot(F_function, xlim=c(0,500), main = paste("F-function estimation for", study_name))

F_csr <- envelope(ppp, Fest, nsim = 99)
plot(F_csr, main = paste("F function test for spatial randomness for", study_name))
```

### TH1.8.3 Rakhine State

#### TH1.8.3.1 G-function

```{r}
study_name = "Rakhine"
G_function <- Gest(study_ppps_2022[[study_name]], correction = "border")
plot(G_function, xlim=c(0,500), main = paste("G-function estimation for", study_name))

G_csr <- envelope(ppp, Gest, nsim = 99, rank = 1, glocal=TRUE)
plot(G_csr, main = paste("G function test for spatial randomness for", study_name))
```

#### TH1.8.3.2 F-function

```{r}
F_function <- Fest(study_ppps_2022[[study_name]])
plot(F_function, xlim=c(0,500), main = paste("F-function estimation for", study_name))

F_csr <- envelope(ppp, Fest, nsim = 99)
plot(F_csr, main = paste("F function test for spatial randomness for", study_name))
```

### TH1.8.4 Chin State

#### TH1.8.4.1 G-function

```{r}
study_name = "Chin"
G_function <- Gest(study_ppps_2022[[study_name]], correction = "border")
plot(G_function, xlim=c(0,500), main = paste("G-function estimation for", study_name))

G_csr <- envelope(ppp, Gest, nsim = 99)
plot(G_csr, main = paste("G function test for spatial randomness for", study_name))
```

#### TH1.8.4.2 F-function

```{r}
F_function <- Fest(study_ppps_2022[[study_name]])
plot(F_function, xlim=c(0,500), main = paste("F-function estimation for", study_name))

F_csr <- envelope(ppp, Fest, nsim = 99)
plot(F_csr, main = paste("F function test for spatial randomness for", study_name))
```

### TH1.8.5 Yangon Region

#### TH1.8.5.1 G-function

```{r}
study_name = "Yangon"
G_function <- Gest(study_ppps_2022[[study_name]], correction = "border")
plot(G_function, xlim=c(0,500), main = paste("G-function estimation for", study_name))

G_csr <- envelope(ppp, Gest, nsim = 99)
plot(G_csr, main = paste("G function test for spatial randomness for", study_name))
```

#### TH1.8.5.2 F-function

```{r}
F_function <- Fest(study_ppps_2022[[study_name]])
plot(F_function, xlim=c(0,500), main = paste("F-function estimation for", study_name))

F_csr <- envelope(ppp, Fest, nsim = 99)
plot(F_csr, main = paste("F function test for spatial randomness for", study_name))
```

### TH1.8.6 Tanintharyi Region

#### TH1.8.6.1 G-function

```{r}
study_name = "Tanintharyi"
G_function <- Gest(study_ppps_2022[[study_name]], correction = "border")
plot(G_function, xlim=c(0,500), main = paste("G-function estimation for", study_name))

G_csr <- envelope(ppp, Gest, nsim = 99)
plot(G_csr, main = paste("G function test for spatial randomness for", study_name))
```

#### TH1.8.6.2 F-function

```{r}
F_function <- Fest(study_ppps_2022[[study_name]])
plot(F_function, xlim=c(0,500), main = paste("F-function estimation for", study_name))

F_csr <- envelope(ppp, Fest, nsim = 99)
plot(F_csr, main = paste("F function test for spatial randomness for", study_name))
```

Since all F-functions lie entirely below the envelope, and all G-functions lie entirely above the envelope, we can conclude that the armed conflict areas exhibit **clustering**. This is backed up by the KDE plots, which show the presence of dense clusters.

## TH1.9 Concluding thoughts

In conclusion, we have explored different spatial point pattern analysis methods using armed conflict data in Myanmar. We attempted spatial-temporal KDE on the entire study period and identified dense areas around the **Sagaing** and **Chin** areas. Following that, we identified a subset of states and regions for deeper analysis based on exploratory data analysis and the STKDE plots and attempted fixed- and adaptive-bandwidth KDE on these areas, as well as second-order SPPA using the F- and G-functions. We have found `bw.scott()` to be more effective in performing KDE on this dataset than the usual `bw.diggle()`, and the conflict points in all regions to exhibit **clustering**.

Now that we know how the points behave and where they are clustered, one possible extension of this study could be to do deeper research on Myanmar's municipalities, townships and diverse ethnic groups, and repeat the SPPA process with the `admin2` or `admin3` plots. This is so that we better identify the needs and desires of each ethnic group, helping diplomats and policymakers formulate more targeted solutions for the ethnic divide and conflict in the country. In addition, Ripley's K- function, as well as Besag's L-function, could be attempted again given more time and computing power, along with the incorporation of other data sources, such as economic data, which could enhance our understanding of the relationship between the conflict and the country's overall economic development.  It is worth noting, however, that no amount of geospatial analytics or field studies will be effective without a strong, morally upright and benevolent government in Myanmar, with the political will and know-how to formulate and implement sound policies in response to analyses such as this one, for the betterment of their people and country.

As a long-time Python programmer and learner of data analytics, this exercise has been a rigourous introduction not only to R programming, but to wrangling and analysing points in geographical space. Though frustrating at times, I strongly believe that the best learning comes from experiencing and recovering from adversity, and I look forward to the subsequent exercises and concepts to come.

## References

1.  Albert, E., & Maizland, L. (2020, January 23). What forces are fueling Myanmar’s Rohingya crisis? Council on Foreign Relations. <https://www.cfr.org/backgrounder/rohingya-crisis>
2.  Diggle, P.J. (1985). A kernel method for smoothing point process data. Applied Statistics (Journal of the Royal Statistical Society, Series C), 34, 138–147.
3.  Maizland, L. (2022, January 31). Myanmar’s troubled history: Coups, military rule, and ethnic conflict. Council on Foreign Relations. <https://www.cfr.org/backgrounder/myanmar-history-coup-military-rule-ethnic-conflict-rohingya>
4.  Myanmar Information Management Unit. (n.d.). Country Overview. Retrieved 16 September 2024, from <https://www.themimu.info/country-overview>
5.  Raleigh, C., Kishi, R. & Linke, A. Political instability patterns are obscured by conflict dataset scope conditions, sources, and coding choices. Humanit Soc Sci Commun 10, 74 (2023). <https://doi.org/10.1057/s41599-023-01559-4>
6.  Rieffel, L. (2019, December 6). Peace and war in Myanmar. Brookings. <https://www.brookings.edu/articles/peace-and-war-in-myanmar/>
7.  Scott, D.W. (1992). Multivariate Density Estimation. Theory, Practice and Visualization. New York: Wiley.
8.  Smith, M. (1999). Burma: Insurgency and the politics of ethnicity (2. (updated) ed). Univ. Press \[u.a.\].
9.  Sullivan, D. P. (2021, October 21). Dire consequences: Addressing the humanitarian fallout from myanmar’s coup. Refugees International; Refugees International. <https://www.refugeesinternational.org/reports-briefs/dire-consequences-addressing-the-humanitarian-fallout-from-myanmars-coup/>
10.  UNDP (Ed.). (2024). Breaking the gridlock: Reimagining cooperation in a polarized world. United Nations Development Programme (UNDP).

## Annex A: Full Quarterly STKDE Plots for Jan 2021- Sep 2024

### A1: Full STKDE Plots

```{r}
for (i in 1: length(quarter_numbers)) {
  plot(st_kde, quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste("Spatial-temporal KDE for", quarters[i]))
}
```

### A2: For events with civilian targeting only

```{r}
for (i in 1: length(quarter_numbers)) {
  plot(st_kde_againstCivilians, quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste("Spatial-temporal KDE for violence against civilians events in quarter", quarters[i]))
}
```

## Annex B: Region-specific STKDE plots

```{r}
for (study_name in study_names) {
  for (i in 1: length(quarter_numbers)) {
    print(study_name)
    print(quarter_numbers[i])
    plot(stkde_six_regions[[study_name]], quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste("STKDE for", study_name , "in quarter", quarters[i]))
  }
}
```