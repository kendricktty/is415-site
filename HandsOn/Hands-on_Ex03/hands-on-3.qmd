---
title: "H3: Spatial Point Patterns Analysis"
subtitle: "Hands-On Exercise 3"
author: "Kendrick Teo"
date: "2024-08-29"
date-modified: "last-modified"

execute: 
  eval: true
  echo: true
  freeze: true
---

> Notes for grading: For **week 3**, the requirement is to complete both **chapters 4** and **5** in the **R for Geospatial Data Science and Analytics** course website. Both have been combined into a single webpage for brevity.

## H3.1 Overview

**Spatial Point Pattern Analysis** serves to evaluate the pattern or distribution of a set of points on a map surface. These points serve many purposes, ranging from mapping events like crimes and disease onset (like John Snow's map of the 1854 Broad Street cholera outbreak), or the locations of business services or facilities.

Using appropriate functions, this hands-on exercise aims to discover the spatial point patterns of a quintessential facility in 2020s Singapore - childcare centres. Specifically, we want to find out:

1.  if these are randomly distributed throughout the country, and;
2.  the planning areas with the highest concentration of childcare centres.

## H3.2 The data

The datasets to be used are:

-   `MP14_SUBZONE_WEB_PL`, containing polygon features.

-   `CoastalOutline`, a new dataset containing polygon features showing the boundaries of Singapore. It is provided by SLA in ESRI shapefile format.

In addition, our childcare centre data will, as always, be sourced from the Singapore government's data lake at [data.gov.sg](data.gov.sg). These will take the form of point feature data.

## H3.3 Installing and Loading R packages

Along with the usual `sf` and `tmap`, three new packages will be used. They are:

-   `spatstat`, which includes a wide range of useful functions for first and second order spatial point patterns analysis, and to derive the kernel density estimation (KDE) layer.

-   `raster` reads, writes, manipulates, analyses and models (i.e. rasters) gridded spatial data.

-   `maptools`, which is for manipulating geographic data.

```{r}
pacman::p_load(sf, raster, spatstat, tmap, tidyverse)
```

## H3.4 Spatial Data Wrangling

### H3.4.1 Importing spatial data

Here, we import the data we need and plot basic maps to get a basic sense of the spatial patterns we are dealing with.

```{r}
mpsz_sf <- st_read(dsn="../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", layer="MP14_SUBZONE_WEB_PL")
sg_sf <- st_read(dsn="../data/geospatial/CoastalOutline", layer="CostalOutline")
childcare_sf <- st_read("../data/geospatial/child-care-services-geojson.geojson") %>% st_transform(crs=3414)

tm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots() + tm_layout(title = 'Childcare Centres')
```

Alternatively, we can prepare a pin map as below.

```{r}
# tmap_mode('view')
# tm_shape(childcare_sf) + tm_dots() + tm_layout(title = 'Childcare Centres')
# tmap_mode('plot')
```

## H3.5 Geospatial Data Wrangling

Some geospatial analysis packages require that any input geospatial data be represented with `sp`'s `Spatial*` classes. This section introduces a way to convert simple feature data into the `Spatial*` class.

### H3.5.1 Converting `sf` data frames to `Spatial*` class

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)

childcare
mpsz
sg
```

### H3.5.2 Converting `Spatial*` into generic `sp` format

**`spatstat`** requires the analytical data to be in **`ppp`** object form. There is no direct way to convert a `Spatial*` class into a `ppp` object. We need to convert it into a `Spatial` object first.

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
childcare_sp
sg_sp <- as(sg, "SpatialPolygons")
sg_sp
```

One major difference that can observed between a `Spatial` class object and generic `sp` object is the `variables`, `names`, `min values` and `max values` attributes, which are absent in the latter.

### H3.5.3 Converting generic `sp` format into `ppp` format

```{r}
childcare_ppp <- as.ppp(childcare_sf)
childcare_ppp
plot(childcare_ppp)
summary(childcare_ppp)
```

## H3.5.4 Handling duplicates

In spatial point patterns analysis, as is data analytics in general, an issue of significance is the presence of **duplicates**. These need to be handled, since it is assumed that the points cannot be *coincident*.

In this section, we will:

1.  Check for duplicated points in our `childcare_ppp` object;
2.  Count the number of coincidence points with the `multiplicity()` function;
3.  Find the number of locations with more than one point event;
4.  View the locations of duplicated point events on a map plot;
5.  Perform *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.

```{r}
# Check for duplication
any(duplicated(childcare_ppp))
# Find multiplicity
multiplicity <- multiplicity(childcare_ppp)
multiplicity
# Print the number of locations with more than 1 point event
sum(multiplicity > 1)
```

We can conclude from the above that there are no duplicates in the data.

```{r}
# Find the locations of duplicate point events
# tmap_mode('view')
# tm_shape(childcare) +
#   tm_dots(alpha=0.4, 
#           size=0.05)
# tmap_mode('plot')

# Perform jittering
childcare_ppp_jit <- rjitter(childcare_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
any(duplicated(childcare_ppp_jit))
```

Jittering is one of three ways to deal with missing geospatial data, the others being to make each point "unique" and then attach the duplicate attributes as marks (which would be more complex), or simply remove the data (which might lead to the loss of other important attributes).

### H3.5.5 Creating an `owin` object

When analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area, such as the national boundary of Singapore. In `spatstat`, `owin` is specifically designed to represent this polygonal region and can be defined and output as such:

```{r}
sg_owin <- as.owin(sg_sf)
plot(sg_owin)
summary(sg_owin)
```

### H3.5.6 Combining point events and `owin` objects

Finally, we can extract our childcare centre "events" and combine them with the `owin` object as such:

```{r}
childcare_SG_ppp = childcare_ppp[sg_owin]
plot(childcare_SG_ppp)
summary(childcare_SG_ppp)
```

## H3.6 First Order Spatial Point Patterns Analysis

Spatial point patterns analysis (SPPA) is the study of the spatial arrangements of points in (typically) 2D space. In this section, we will perform first order SPPA using `spatstat`. In particular, we will:

-   derive the **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes, and;
-   performing **confirmatory spatial point patterns analysis** using **nearest neighbour** statistics.

### H3.6.1 Kernel Density Estimation

Kernel density estimation (KDE) serves to compute the *intensity* of a point distribution. It has two general steps: first to compute the point intensity, followed by spatial interpolation using a kernel function (to create distributions like a uniform, triangular, quartic or gaussian distribution). In this exercise, we will mostly use the `gaussian` kernel.

#### H3.6.1.1 Computing KDE using automatic bandwidth selection

```{r}
kde_childcareSG_bw <- density(childcare_SG_ppp,
                              sigma=bw.diggle,
                              edge=TRUE,
                            kernel="gaussian")
plot(kde_childcareSG_bw)
```

As we can see, the range of our density values is between 0 and 35\*10^-4^, which is way too small for us. This is because `svy21` uses **metres** by default, which means the density values to be computed will be the **number of points per square metre**.

We will therefore need to rescale our KDE values. Before we move on though, it is good to know that the following code chunk will retrieve us the bandwidth used to compute the KDE layer.

```{r}
bw <- bw.diggle(childcare_SG_ppp)
bw
```

#### H3.6.1.2 Rescaling KDE values

To rescale our KDE values, we can convert the unit of measurement into **kilometres**, and then re-run `density()` and plot the output map to see the result.

```{r}
childcareSG_ppp.km <- rescale.ppp(childcare_SG_ppp, 1000, "km")
kde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG.bw)
```

We now have a much more readable density map.

### H3.6.2 Working with different automatic bandwidth methods

Other than `bw.diggle()`, `bw.CvL()`, `bw.scott()` and `bw.ppl` may be used to determine the bandwidth.

```{r}
bw.diggle(childcareSG_ppp.km)
bw.scott(childcareSG_ppp.km)
bw.CvL(childcareSG_ppp.km)
bw.ppl(childcareSG_ppp.km)
```

We can also plot different maps to compare the output of different bandwidth methods.

```{r}
kde_childcareSG.ppl <- density(childcareSG_ppp.km, 
                               sigma=bw.ppl, 
                               edge=TRUE,
                               kernel="gaussian")
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "bw.diggle")
plot(kde_childcareSG.ppl, main = "bw.ppl")
```

### H3.6.3 Working with different kernel methods

As mentioned, there are different kernel methods to give us different distributions. The code chunk below compares the results of three other kernel methods than `gaussian`, and computes additional kernel density estimations.

```{r}
par(mfrow=c(2,2))
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="Gaussian")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="epanechnikov"), 
     main="Epanechnikov")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="quartic"), 
     main="Quartic")
plot(density(childcareSG_ppp.km, 
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="disc"), 
     main="Disc")
```

## H3.7 Fixed and adaptive KDE

### H3.7.1 Computing KDE using fixed bandwidth

Another way to compute a KDE layer is by defining a fixed bandwidth. The code chunk below defines a bandwidth (sigma) of 600m (0.6km).

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel="gaussian")
plot(kde_childcareSG_600)
```

### H3.7.2 Computing KDE using adaptive bandwidth

The fixed bandwidth method is sensitive to skewed distributions of spatial point patterns (for instance, if a large number of points is clustered in one area, say an urban area, instead of another, like a rural area.) Adaptive bandwidth, using `density.adaptive()`, is one way to overcome this problem.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method="kernel")
plot(kde_childcareSG_adaptive)
```

Two KDE outputs may be compared as follows.

```{r}
par(mfrow=c(1,2))
plot(kde_childcareSG.bw, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

### H3.7.3 Converting KDE outputs into grid objects

For mapping purposes.

```{r}
gridded_kde_childcareSG_bw <- as(kde_childcareSG.bw, "SpatialGridDataFrame")
spplot(gridded_kde_childcareSG_bw)
```

### H3.7.3.1 Converting gridded output into `RasterLayer`

```{r}
kde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)
kde_childcareSG_bw_raster
```

### H3.7.3.2 Assigning projection system

Notice that the `crs` attribute is `NA`, indicating that no coordinate system has been assigned to the raster. We will fix this by adding the WSY21 (Singapore) CRS to our `RasterLayer`.

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

### H3.7.4 Visualising output in tmap

Finally, we can display the raster in cartographic quality using `tmap`.

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("layer", palette = "viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

With all the work we have done so far, a quick glance at the maps indicates a higher than usual density of childcare centres in the areas of [Woodlands South](https://en.wikipedia.org/wiki/Woodlands,_Singapore) and [Punggol](https://en.wikipedia.org/wiki/Punggol) (the yellow patches in the above `tmap` display).

### H3.7.5 Comparing Spatial Point Patterns using KDE

And now for the fun part - comparing KDEs between regions. In this section, we will compare the density estimations of childcare centres located in the planning areas of [Choa Chu Kang](https://en.wikipedia.org/wiki/Choa_Chu_Kang), [Jurong West](https://en.wikipedia.org/wiki/Jurong_West), Punggol and [Tampines](https://en.wikipedia.org/wiki/Tampines).

#### H3.7.5.1 Extracting and plotting study areas

```{r}
# First, extract the target planning areas

punggol <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tampines <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
choa_chu_kang <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jurong_west <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")

# Then, visualise the areas with a plot
par(mfrow=c(2,2))
plot(punggol, main = "Punggol")
plot(tampines, main = "Tampines")
plot(choa_chu_kang, main = "Choa Chu Kang")
plot(jurong_west, main = "Jurong West")
```

#### H3.7.5.2 Creating `owin` object

```{r}
pg_owin <- as.owin(punggol)
tm_owin <- as.owin(tampines)
ck_owin <- as.owin(choa_chu_kang)
jw_owin <- as.owin(jurong_west)
```

#### H3.7.5.3 Combining childcare points and the study area

The code chunk below completes the following 3 tasks. First, we extract the childcare region for each of our four study areas. Next, we transform the unit of measurement from **metres** to **kilometres**. Finally, we can plot the locations of childcare centres within the four study areas.

```{r}
childcare_pg_ppp <- childcare_ppp_jit[pg_owin]
childcare_tm_ppp <- childcare_ppp_jit[tm_owin]
childcare_ck_ppp <- childcare_ppp_jit[ck_owin]
childcare_jw_ppp <- childcare_ppp_jit[jw_owin]

childcare_pg_ppp.km <- rescale.ppp(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km <- rescale.ppp(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km <- rescale.ppp(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km <- rescale.ppp(childcare_jw_ppp, 1000, "km")

par(mfrow=c(2,2))
plot(childcare_pg_ppp.km, main="Childcare centres in Punggol")
plot(childcare_tm_ppp.km, main="Childcare centres in Tampines")
plot(childcare_ck_ppp.km, main="Childcare centres in Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Childcare centres in Jurong West")
```

#### H3.7.5.4 Computing KDE

Finally, we can compute the KDE for each of the four planning areas with the `bw.diggle` method.

```{r}
par(mfrow=c(2,2))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tempines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

The KDE displays indicate **Jurong West** as the planning area with the lowest concentration of childcare centres and **Punggol** as the planning area with the highest. **Choa Chu Kang** comes in second, followed by **Tampines**.

## H3.8 Nearest Neighbour Analysis

**Nearest neighbours** are the direct distance from points to their nearest neighbours. The **nearest neighbour index** is expressed as the ratio of the **observed mean distance** to the **expected mean distance**. An index of less than 1 indicates the spatial point pattern exhibits **clustering**, while an index of greater than 1 indicates **dispersion or competition**. Finally, an index of exactly 1 indicates complete random distribution.

In this section, we will perform the Clark-Evans test on the hypothesis that *the distribution of childcare services is* ***random***.

### H3.8.1 Testing spatial point patterns using the Clark-Evans Test

```{r}
clarkevans.test(childcare_SG_ppp,
                correction="none",
                clipregion="sg_owin",
                alternative=c("clustered"),
                nsim=99)
```

With a *p*-value of 2.2 \* 10^-16^, we can conclude that the spatial point patterns are *not* randomly distributed for the entire country, and are instead *clustered*. We can corroborate this test result with the map visualisations, that indicates that childcare centres are typically located in either the city centre or suburban towns.

We can run the test again on each of the sets pertaining to our four planning areas. For now, we will focus on Punggol and Jurong West - the former is a non-mature estate inhabited by more young families, while the latter is a mature estate where residents might have lived in for longer.

### H3.8.2 Clark-Evans Test: Punggol

```{r}
clarkevans.test(childcare_pg_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

### H3.8.3 Clark-Evans Test: Jurong West

```{r}
clarkevans.test(childcare_jw_ppp,
                correction="none",
                clipregion=NULL,
                alternative=c("two.sided"),
                nsim=999)
```

## H3.9 Second Order Spatial Points Patterns Analysis

While first order SPPA measures how observations vary due to *changes in the underlying property*, **second order SPPA** deals with variations in observations *due to the way they interact with one another*. The methods used for second order SPPA include the F-, G-, K- and L-functions.

In this section, we will explore the F-, G- K- and L-functions by applying them on the childcare centre data for the planning areas of **Choa Chu Kang** in Western Singapore, and **Tampines** in the East.

## H3.10 F-Function

The F-function estimates the empty space function $F(r)$ from a point pattern in a window of arbitrary shape. It can be computed using `Fest()` of the spatstat package.

Following that, a Monte Carlo simulation test can be performed using `envelope()`. We will perform both operations on the segments of the data representing

### H3.10.1 Computing F-function estimations

#### H3.10.1.1 Choa Chu Kang

```{r}
F_function_Choa_Chu_Kang <- Fest(childcare_ck_ppp)
plot(F_function_Choa_Chu_Kang)
```

#### H3.10.1.2 Tampines

```{r}
F_function_Tampines <- Fest(childcare_tm_ppp, correction="best")
plot(F_function_Tampines)
```

### H3.10.2 Performing Complete Spatial Randomness Test

To confirm the observed spatial patterns above, we can conduct a Monte Carlo (hypothesis) test with `envelope()`. The hypothesis and test are as follows:

H~0~ = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.

H~1~= The distribution of childcare services at Choa Chu Kang/Tampines are *not* randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

#### H3.10.2.1 Choa Chu Kang

```{r}
F_CCK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)
plot(F_CCK.csr)
```

#### H3.10.2.2 Tampines

```{r}
F_TM.csr <- envelope(childcare_tm_ppp, Fest, correction="all", nsim = 999)
plot(F_TM.csr)
```

The F-function for the Choa Chu Kang set is within the envelope, and that for the Tampines set is below the envelope. This indicates that indicating that the childcare centres in Choa Chu Kang exhibit **complete spatial randomness (CSR)**, while the centres in Tampines are **clustered**.

## H3.11 G-Function

The **G-function** measures the distribution of distances from an arbitrary event to its nearest event.

Once again, a function from the `spatstat` package will be used, this time the `Gest()` function. Following that, we will perform another Monte Carlo simulation test with `envelope()`.

### H3.11.1 Computing G-function estimations

#### H3.11.1.1 Choa Chu Kang

```{r}
G_CK <- Gest(childcare_ck_ppp, correction = "border")
plot(G_CK, xlim=c(0,500))
```

#### H3.11.1.2 Tampines

```{r}
G_tm <- Gest(childcare_tm_ppp, correction = "best")
plot(G_tm)
```

### H3.11.2 Performing Complete Spatial Randomness Test

As a reminder:

H~0~ = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.

H~1~= The distribution of childcare services at Choa Chu Kang/Tampines are *not* randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

#### H3.11.2.1 Choa Chu Kang

```{r}
G_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)
plot(G_CK.csr)
```

#### H3.11.2.2 Tampines

```{r}
G_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = "all", nsim = 999)
plot(G_tm.csr)
```

Unlike the function for Choa Chu Kang, which lies entirely within the envelopes, a small portion of the Tampines function falls above the envelopes. Once again, this indicates that the childcare centres of Choa Chu Kang exhibit **CSR**, while those in Tampines are clustered.

## H3.12 K-Function

The **K-function** measures the number of events found up to a given distance of any particular event. For this exercise, the `spatstat` function to be used is the the `Kest()` function, and another Monte Carlo simulation test will be performed with `envelope()`.

### H3.12.1 Computing K-function estimations

#### H3.12.1.1 Choa Chu Kang

```{r}
K_ck = Kest(childcare_ck_ppp, correction = "Ripley")
plot(K_ck, . -r ~ r, ylab= "K(d)-r", xlab = "d(m)")
```

#### H3.12.1.2 Tampines

```{r}
K_tm = Kest(childcare_tm_ppp, correction = "Ripley")
plot(K_tm, . -r ~ r, 
     ylab= "K(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

### H3.12.2 Performing Complete Spatial Randomness Test

As a reminder:

H~0~ = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.

H~1~= The distribution of childcare services at Choa Chu Kang/Tampines are *not* randomly distributed.

The null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.

#### H3.12.2.1 Choa Chu Kang

```{r}
K_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_ck.csr, . - r ~ r, xlab="d", ylab="K(d)-r")
```

#### H3.12.2.2 Tampines

```{r}
K_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)
plot(K_tm.csr, . - r ~ r, 
     xlab="d", ylab="K(d)-r", xlim=c(0,500))
```

The Choa Chu Kang K-function lies entirely inside the envelope, while much of that for Tampines lies above it. Once again, this shows that the Choa Chu Kang childcare centres are randomly distributed **(CSR)**. The K-function indicates that the childcare centres in Tampines exhibit a significant regular pattern.

## H3.13 L-Function

The **L-function** is a normalisation of the K-function so as to obtain a benchmark of zero.

For this exercise, the `spatstat` function to be used is the the `Lest()` function, and another Monte Carlo simulation test will be performed with `envelope()`.

### H3.13.1 Computing L-function estimations

#### H3.13.1.1 Choa Chu Kang

```{r}
L_ck = Lest(childcare_ck_ppp, correction = "Ripley")
plot(L_ck, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)")
```

#### H3.13.1.2 Tampines

```{r}
L_tm = Lest(childcare_tm_ppp, correction = "Ripley")
plot(L_tm, . -r ~ r, 
     ylab= "L(d)-r", xlab = "d(m)", 
     xlim=c(0,1000))
```

### H3.13.2 Performing Complete Spatial Randomness Test

#### H3.13.2.1 Choa Chu Kang

```{r}
L_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_ck.csr, . - r ~ r, xlab="d", ylab="L(d)-r")
```

#### H3.13.2.2 Tampines

```{r}
L_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)
plot(L_tm.csr, . - r ~ r, 
     xlab="d", ylab="L(d)-r", xlim=c(0,500))
```