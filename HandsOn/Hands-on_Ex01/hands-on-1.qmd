---
title: "H1: Geospatial Data Wrangling with R"
subtitle: "Hands-On Exercise 1"
author: "Kendrick Teo"
date: "2024-08-15"
date-modified: "last-modified"

execute: 
  eval: true
  echo: true
  freeze: true
---
Changelog: Since the same dataset may be required across multiple hands-on exercises, the data folder for this hands-on exercise has been moded to the root of the `HandsOn` directory. Correspondingly, all code chunks have been modified to reference the newly located data folder.

# H1.1 Overview

As adapted from the [course website](https://r4gdsa.netlify.app/chap01learning-outcome):

Geospatial Data Science is a process of importing, wrangling, integrating, and processing geographically referenced data sets. In this hands-on exercise, you will learn how to perform geospatial data science tasks in R by using **sf** package.

By the end of this hands-on exercise, you should acquire the following competencies:

-   installing and loading [sf](https://r-spatial.github.io/sf/) and [tidyverse](https://www.tidyverse.org/) packages into R environment,

-   importing geospatial data by using appropriate functions of **sf** package,

-   importing aspatial data by using appropriate function of **readr** package,

-   exploring the content of simple feature data frame by using appropriate **Base R** and **sf** functions,

-   assigning or transforming coordinate systems by using using appropriate *sf* functions,

-   converting an aspatial data into a sf data frame by using appropriate function of **sf** package,

-   performing geoprocessing tasks by using appropriate functions of **sf** package,

-   performing data wrangling tasks by using appropriate functions of **dplyr** package and

-   performing Exploratory Data Analysis (EDA) by using appropriate functions from **ggplot2** package.

> Note: Students are encouraged to read the reference guide of each function, especially the input data requirements, syntaxt and argument option before using them.

# H1.2 Data acquisition

To complete this exercise, the following datasets were downloaded and extracted into `Hands-on_Ex01/data/`:

-   Master Plan 2014 Subzone Boundary (Web) from [data.gov.sg](https://data.gov.sg/)
-   Pre-Schools Location from [data.gov.sg](https://data.gov.sg/)
-   Cycling Path from [LTADataMall](https://www.mytransport.sg/content/mytransport/home/dataMall.html)
-   Latest version of Singapore Airbnb listing data from [Inside Airbnb](http://insideairbnb.com/get-the-data.html)

# H1.3 Getting Started

In this hands-on exercise, two R packages were used. They are:

-   **sf** for importing, managing, and processing geospatial data, and

-   **tidyverse** for performing data science tasks such as importing, wrangling and visualising data.

Tidyverse consists of a family of R packages. In this hands-on exercise, the following packages have been used:

-   **readr** for importing csv data,

-   **readxl** for importing Excel worksheet,

-   **tidyr** for manipulating data,

-   **dplyr** for transforming data, and

-   **ggplot2** for visualising data

```{r}
pacman::p_load(sf, tidyverse)
```

# H1.4 Importing Geospatial Data

Geospatial data was imported into R using [*st_read()*](https://r-spatial.github.io/sf/reference/st_read.html) of **sf** package:

-   `MP14_SUBZONE_WEB_PL`, a polygon feature layer in ESRI shapefile format,

-   `CyclingPath`, a line feature layer in ESRI shapefile format, and

-   `PreSchool`, a point feature layer in kml file format.

## H1.4.1 Importing polygon feature data in shapefile format

The code chunk below uses *st_read()* function of **sf** package to import the `MP14_SUBZONE_WEB_PL` shapefile into R as a polygon feature data frame.

```{r}
mp_subzone = st_read(dsn="../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP", layer="MP14_SUBZONE_WEB_PL")
```

There are a total of 323 multipolygon features and 15 fields in `mpsz` simple feature data frame. `mpsz` is in **svy21** projected coordinates systems. The bounding box provides the x extend and y extend of the data.

## H1.4.2 Importing polyline feature data in shapefile form

Using the same method as above, we now import the `CyclingPath` shapefile into R as a line feature data frame.

```{r}
cycling_paths = st_read(dsn="../data/geospatial/CyclingPath_Jul2024", layer="CyclingPathGazette")
```

## H1.4.3 Importing GIS data in kml format

```{r}
preschool_data = st_read("../data/geospatial/PreSchoolsLocation.kml")
```

# H1.5 Checking the Content of a Simple Feature DataFrame

## H1.5.1 Working with *st_geometry()*

```{r}
st_geometry(mp_subzone)
```

## H1.5.2 Working with *glimpse()*

```{r}
glimpse(mp_subzone)
```

## H1.5.3 Working with *head()*

```{r}
head(mp_subzone, n=10)
```

# H1.6 Plotting the Geospatial Data

Visualising geospatial features in the Master Plan Subzone Boundary dataset:

```{r}
max.plot = 15
plot(mp_subzone)
```

Plotting only the geometry:

```{r}
plot(st_geometry(mp_subzone))
```

Plotting only one attribute:

```{r}
plot(mp_subzone["CA_IND"])
```

# H1.7 Working with Projection

## H1.7.1 Assigning EPSG code to a simple feature data frame

A common issue that can happen when impmorting geospatial data into R is a missing or wrongly assigned coordinate system. For example:

```{r}
st_crs(mp_subzone)
```

At the end of the output, the EPSG code is displayed, and it reads 9001 (world). The correct EPSG code for the Singapore Plane Coordinate System (SVY21) should be 3414 (Singapore). As such, we need to assign the correct EPSG code using the following code chunk:

```{r}
mpsz_3414 <- st_set_crs(mp_subzone, 3414)

st_crs(mpsz_3414)
```

## H1.7.2 Transforming the projection of preschool from wgs84 to svy21

As noted in the above warning message upon applying `st_set_crs()`, simply replacing the EPSG code does not reproject the data.

As adapted from the course website:

> In geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.

```{r}
st_geometry(preschool_data)
```

Running the above code reveals the `preschool` featureset uses the wrong `wgs84` coordinate system. To fix this, instead of running `st_set_crs()`, we have to run `st_transform()` to reproject `preschool` from one coordinate system to another.

```{r}
preschool_3414 <- st_transform(preschool_data, crs=3414)
st_geometry(preschool_3414)
```

# H1.8 Importing and Converting Aspatial Data

## H1.8.1 Importing aspatial Airbnb data

Just like importing and reading data in Python's `pandas`, importing aspatial data into the R/quarto environment is as easy as calling `read_csv()`.

```{r}
listings <- read_csv("../data/aspatial/listings.csv")
list(listings)
```

## H1.8.2 Creating a simple feature data frame from an aspatial data frame

```{r}
listings_sf <- st_as_sf(listings, coords = c("longitude", "latitude"), crs=4326) %>%
    st_transform(crs=3414)
```

Things to learn from the arguments above:

-   `coords` argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.

-   `crs` argument requires you to provide the coordinates system in epsg format. [EPSG: 4326](https://epsg.io/4326) is wgs84 Geographic Coordinate System and [EPSG: 3414](https://epsg.io/3414) is Singapore's SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to [epsg.io](https://epsg.io/).

-   `%>%` is used to nest *st_transform()* to transform the newly created simple feature data frame into the svy21 projected coordinates system.

```{r}
glimpse(listings_sf)
```

# H1.9 Geoprocessing with sf package

Besides providing functions to handling (i.e. importing, exporting, assigning projection, transforming projection etc) geospatial data, **sf** package also offers a wide range of geoprocessing (also known as GIS analysis) functions.

## H1.9.1 Buffering

The scenario:

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

The solution:

Firstly, st_buffer() of *sf* package is used to compute the 5-meter buffers around cycling paths.

```{r}
buffer_cycling <- st_buffer(cycling_paths, dist=5, nQuadSegs=30)
```

Then, we calculate the area of the buffers:

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

...and take the sum of Base R to derive the total land needed.

```{r}
sum(buffer_cycling$AREA)
```

## H1.9.2 Point-in-polygon count

The scenario:

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.

The solution:

The code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.

```{r}
mpsz_3414$`PreSch Count` <- lengths(st_intersects(mpsz_3414, preschool_3414))

summary(mpsz_3414$`PreSch Count`)
```

> **Warning**: Not to be confused by `st_intersection()`.

`top_n()` from the **dplyr** package, for `n = 1`, is used to find the planning subzone with the greatest number of preschools:

```{r}
top_n(mpsz_3414, 1, `PreSch Count`)
```

> **DIY: Calculate the density of pre-school by planning subzone.**

The solution:

First, use [*st_area()*](https://r-spatial.github.io/sf/reference/geos_measures.html) of the **sf** package to derive the area of each planning subzone:

```{r}
mpsz_3414$Area <- mpsz_3414 %>%
  st_area()
```

Next, [*mutate()*](https://dplyr.tidyverse.org/reference/mutate.html) of the [**dplyr**](https://dplyr.tidyverse.org/) package is used to compute the density by using the code chunk below.

```{r}
mpsz_3414 <- mpsz_3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

# H1.10 Exploratory Data Analysis

As is the case in machine learning tasks, before performing geospatial analytics we need to perform some rounds of exploratory data analysis (EDA).

Since we're using R and Quarto, we need to plot graphs using the `ggplot2` library.

## H1.10.1 Plotting the distribution of `PreSch Density`

```{r}
hist(mpsz_3414$`PreSch Density`)
```

```{r}
ggplot(data=mpsz_3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="orange") +
  labs(title = "Are preschools evenly distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single preschool. On the other hand, \nthere are two planning sub-zones with at least 20 preschools!",
      x = "Pre-school density (per km^2)",
      y = "Frequency")
```

# H1.10.2 Plotting the relationship between preschool density and preschool count

```{r}
ggplot(data=mpsz_3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```