---
title: "H5: Spatial Weights and Appliations"
subtitle: "Hands-On Exercise 5"
author: "Kendrick Teo"
date: "2024-08-31"
date-modified: "last-modified"

execute: 
  eval: false
  echo: true
  freeze: true
---

## H5.1 Overview, Study Area and Data

This exercise is on computing spatial weights with R. For this exercise, the following datasets, set in [Hunan Province, China](https://en.wikipedia.org/wiki/Hunan), will be used:

-   The **Hunan country boundary layer**, in ESRI shapefile format, and;
-   `Hunan_2012.csv`, an aspatial dataset containing selected local development indicators for the area in 2012.

In addition to the usual `sf`, `readr` and `dplyr` packages, spatial weights and spatially lagged variables will be computed using appropriate `spdep` functions.

### H5.1.1 Getting Started

After loading our packages, our data will be imported into the R environment.

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
hunan <- st_read(dsn = "../data/geospatial",
                 layer = "Hunan")
dev_2012 <- read_csv("../data/aspatial/Hunan_2012.csv")
```

### H5.1.2 Relational Join

We can now perform a **left join** of the Hunan 2012 development dataset on the map of Hunan province:

```{r}
hunan <- left_join(hunan,dev_2012)%>%
  select(1:4, 7, 15)
```

## H5.2 Visualising our Data

Using `qtm()` and other `tmap` packages, we can now prepare a basemap and choropleth map showing the distribution of **GDP per capita** by region.

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## H5.3 Computing Contiguity Spatial Weights

The `poly2nb()` function of the `spdep` package may be used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with continuous boundaries.

### H5.3.1 Creating QUEEN contiguity-based neighbours

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

For each polygon in our polygon object, `wm_q` lists all neighbouring polygons. The following code chunk reveals the neighbours for the first polygon in the object. **It is good to be reminded here that R is not a zero-index index, so all list indices start from `1`**.

```{r}
wm_q[[1]]
```

We can also retrieve the county name with Polygon ID=1 as follows:

```{r}
hunan$County[1]
```

Or the county names of the five counties bordering county ID 1:

```{r}
hunan$NAME_3[c(2,3,4,57,85)]
```

Finally, we can retrieve the GDP per capita of each of the five counties bordering county ID 1:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

The complete weight matrix may be displayed using `str()`. It's a long one.

```{r}
str(wm_q)
```

### H5.3.2 Creating ROOK contiguity-based neighbours

Aside from the QUEEN contiguity weight matrix, we can also create ROOK contiguity based neighbours by setting the `queen` parameter to `FALSE`. The summary report below shows there are 88 area units in Hunan Province, with the most connected area unit having 10 neighbours.

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

### H5.3.3 Visualising contiguity weights

A connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids, which we can calculate these in the sf package. 

#### H5.3.3.1 Getting Latitude and Longitude of Polygon Centroids

We will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation

To get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \[\[\]\] and 1. This allows us to get only the longitude, which is the first value in each centroid.

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

We do the same for latitude with one key difference. We access the second value per each centroid with \[\[2\]\].

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

Now that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.

```{r}
coords <- cbind(longitude, latitude)
```

We can check the first few observations to see if things are formatted correctly.

```{r}
head(coords)
```

#### H5.3.3.2 Plotting Queen contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

#### H5.3.3.3 Plotting Rook contiguity based neighbours map

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

#### H5.3.3.4 Plotting both together

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### H5.4 Computing distance-based neighbours

Distance-based weight matrices may be derived using `dnearneigh()`. This function identifies neighbours of region points by **Euclidean distance** with a lower bound of `d1` and upper bound of `d2`, controlled by the `bounds` parameter. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix, and `longlat=TRUE`, great circle distances in **km** will be calculated assuming the **WGS84** reference ellipsoid.

### H5.4.1 Determining the cutoff distance

To determine the upper limit for the distance band, we can follow the steps below:

* Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other using `knearneigh()`;
* Convert the `knn` object returned by `knearneigh()` into a neighbours list of class `nb` with a list of integer vectors containing neighbour region number IDs using `knn2nb()`
* Return the length of neighbour relationship edges using `nbdists()`, which returns in the units of the coordinates if one is projected, and in *kilometres* otherwise.
* Remove the list structure of the returned object using `unlist()`.

```{r}
# coords <- coordinates(hunan)
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

### H5.4.2 Computing fixed distance weight matrix using `dnearneigh()`

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat=TRUE)
wm_d62
```

Next, we use `str()` to display the content of our matrix.

```{r}
str(wm_d62)
```

We can also display the weight matrix in a table form by combining `table()` and `card()`, from `spdep`.

```{r}
table(hunan$County, card(wm_d62))
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
table(n_comp$comp.id)
```

#### H5.4.2.1 Plotting fixed distance weight matrix

A weight matrix can now be plotted as below:

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show links of first nearest neighbours, while the black lines show the links of neighbours within the cutoff distance of 62km.

Alternatively, we can plot both of these next to each other as below:

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### H5.4.3 Computing distance matrix

A key characteristic involving fixed distance weight matrices is that more densly-populated areas (usually urban areas) tend to have more neighbours than their less densly-populated counterparts. Yet, having many neighbours smoothes the neighbour relationship across more neighbours. It is possible to control the number of neighbours directly using K-nearest neighbours, by either accepting asymmetric neighbours or imposing symmetry as shown below.

```{r}
knn6 <- knn2nb(knearneigh(coords, k=6))
knn6
str(knn6)
```

### H5.4.3.1 Plotting distance-based neighbours

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

### H5.5 Weights based on IDW

This section serves to derive a spatial weight matrix based on the inversed distance method.

First, we compute the distance between areas using `nbdists()`.
```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

### H5.6 Row-standardised Weights Matrix

Next, we need to assign weights to each neighbouring polygon. In our case, each neighbouring polygon will be assigned equal weight (`style="W"`).

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
rswm_q$weights[10]
summary(unlist(rswm_ids$weights))
```

## H5.7 Applications of Spatial Weight Matrices

Spatial weight matrices are used to create spatial lagged variables. In this section, four of them will be created: first with row-standardised weights, second as a sum of neighbouring values, third a spatial window average, and fourth a spatial window sum.

### H5.7.1 Row-standardised weights

First, the average neighbour GDP per capita value for each polygon is calculated.

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

In the previous section, we retrieved the GDP per capita of the five neighbours with this code chunk:

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can then append the spatially lagged GDP per capita values onto the `hunan` dataset by using the code chunk below, and print out the average neighbouring income values for each county. Following that, we can plot both GDP per capita and spatial lag GDP per capita for comparison.

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
head(hunan)
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### H5.7.2 Spatial lag as a sum of neighbouring values

We can also calculate spatial lag as a sum of neighbouring values by assigning binary weights. This requires us to go back to the neighbours list, apply a function to assign binary weights, then explicitly assign the weights with the `glist=` parameter in the `nb2listw()` function.

We start by applying a function that will assign a value of `1` per neighbour. This is done with `lapply()`, which was used before to manipulate neighbour structure. The `lapply()` a function across each value in the neighbours structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q,
                       glist = b_weights,
                       style = "B")
b_weights2
```

With the proper weights assigned, we can use `lag.listw()` to compute a lag variable from our weight and GDP per capita. We can then examine the result with the code chunk below.

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
lag_sum
```

Next, let's **left join** the `GDPPC` field of `lag_sum` into the `hunan` dataframe. After that, we can plot both the original dataset and the spatial lag sum dataset for comparison.

```{r}
hunan <- left_join(hunan, lag.res)
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### H5.7.3 Spatial window average

The **spatial window average** uses row-standardised weights and includes the diagonal element. To do this in R, we need to go back to the neighbours structure and add the diagonal element before assigning weights with `include.self(wm_q)` before assigning weights.

```{r}
wm_qs <- include.self(wm_q)
wm_qs[[1]]
```

Notice that `[1]` now has 6 neighbours instead of 5. We can now proceed to obtain and assign weight values.

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

The final steps are to:

1. Convert the lag variable `listw` object into a dataframe; 
2. **Left joining** our lag window back to the `hunan` dataframe;
3. Compare the spatial lag weights and spatial window average by plotting the `lag_gdppc` and `w_ave_dgppc` maps side by side.

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
hunan <- left_join(hunan, lag_wm_qs.res)
# w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
# tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

To compare the values of lag GDPPC and Spatial window average, we can use `kable()` from the `Knitr` package to prepare a table.

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

### H5.7.4 Spatial Window Sum

Unlike the spatial window average, the **spatial window sum** does not use row-standardised weights. The first two steps to creating our spatial window sum are the same as before - add the diagonal element from the neighbour list and assign binary weights. The lag variable is then computed with `lag.listw()`, then converted into a data frame and **left joined** back to the `hunan` data frame.

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
hunan <- left_join(hunan, w_sum_gdppc.res)
```

Finally, we can compare the spatial lag weights and spatial window average by plotting the `lag_sum_gdppc` and `w_sum_gdppc` maps side by side. We can also construct a `kable()` table to compare the results in tabular form.

```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```