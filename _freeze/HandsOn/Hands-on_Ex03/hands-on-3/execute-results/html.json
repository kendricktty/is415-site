{
  "hash": "e070eadfaf8a221961c0742afb5fdf6c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"H3: Spatial Point Patterns Analysis\"\nsubtitle: \"Hands-On Exercise 3\"\nauthor: \"Kendrick Teo\"\ndate: \"2024-08-29\"\ndate-modified: \"last-modified\"\n\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n> Notes for grading: For **week 3**, the requirement is to complete both **chapters 4** and **5** in the **R for Geospatial Data Science and Analytics** course website. Both have been combined into a single webpage for brevity.\n\n## H3.1 Overview\n\n**Spatial Point Pattern Analysis** serves to evaluate the pattern or distribution of a set of points on a map surface. These points serve many purposes, ranging from mapping events like crimes and disease onset (like John Snow's map of the 1854 Broad Street cholera outbreak), or the locations of business services or facilities.\n\nUsing appropriate functions, this hands-on exercise aims to discover the spatial point patterns of a quintessential facility in 2020s Singapore - childcare centres. Specifically, we want to find out:\n\n1.  if these are randomly distributed throughout the country, and;\n2.  the planning areas with the highest concentration of childcare centres.\n\n## H3.2 The data\n\nThe datasets to be used are:\n\n-   `MP14_SUBZONE_WEB_PL`, containing polygon features.\n\n-   `CoastalOutline`, a new dataset containing polygon features showing the boundaries of Singapore. It is provided by SLA in ESRI shapefile format.\n\nIn addition, our childcare centre data will, as always, be sourced from the Singapore government's data lake at [data.gov.sg](data.gov.sg). These will take the form of point feature data.\n\n## H3.3 Installing and Loading R packages\n\nAlong with the usual `sf` and `tmap`, three new packages will be used. They are:\n\n-   `spatstat`, which includes a wide range of useful functions for first and second order spatial point patterns analysis, and to derive the kernel density estimation (KDE) layer.\n\n-   `raster` reads, writes, manipulates, analyses and models (i.e. rasters) gridded spatial data.\n\n-   `maptools`, which is for manipulating geographic data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\n```\n:::\n\n\n\n\n## H3.4 Spatial Data Wrangling\n\n### H3.4.1 Importing spatial data\n\nHere, we import the data we need and plot basic maps to get a basic sense of the spatial patterns we are dealing with.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz_sf <- st_read(dsn=\"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nsg_sf <- st_read(dsn=\"../data/geospatial/CoastalOutline\", layer=\"CostalOutline\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CostalOutline' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/CoastalOutline' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nchildcare_sf <- st_read(\"../data/geospatial/child-care-services-geojson.geojson\") %>% st_transform(crs=3414)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `child-care-services-geojson' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\ntm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots() + tm_layout(title = 'Childcare Centres')\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n:::\n\n\n\n\nAlternatively, we can prepare a pin map as below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tmap_mode('view')\n# tm_shape(childcare_sf) + tm_dots() + tm_layout(title = 'Childcare Centres')\n# tmap_mode('plot')\n```\n:::\n\n\n\n\n## H3.5 Geospatial Data Wrangling\n\nSome geospatial analysis packages require that any input geospatial data be represented with `sp`'s `Spatial*` classes. This section introduces a way to convert simple feature data into the `Spatial*` class.\n\n### H3.5.1 Converting `sf` data frames to `Spatial*` class\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare <- as_Spatial(childcare_sf)\nmpsz <- as_Spatial(mpsz_sf)\nsg <- as_Spatial(sg_sf)\n\nchildcare\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>018989</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>08F73931F4A691F4</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \nmax values  : kml_999,                  <center><table><tr><th colspan='2' align='center'><em>Attributes</em></th></tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSBLOCKHOUSENUMBER</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSBUILDINGNAME</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSPOSTALCODE</th> <td>829646</td> </tr><tr bgcolor=\"\"> <th>ADDRESSSTREETNAME</th> <td>200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSTYPE</th> <td></td> </tr><tr bgcolor=\"\"> <th>DESCRIPTION</th> <td>Child Care Services</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>HYPERLINK</th> <td></td> </tr><tr bgcolor=\"\"> <th>LANDXADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>LANDYADDRESSPOINT</th> <td>0</td> </tr><tr bgcolor=\"\"> <th>NAME</th> <td>RAFFLES KIDZ @ PUNGGOL PTE LTD</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>PHOTOURL</th> <td></td> </tr><tr bgcolor=\"\"> <th>ADDRESSFLOORNUMBER</th> <td></td> </tr><tr bgcolor=\"#E3E3F3\"> <th>INC_CRC</th> <td>379D017BF244B0FA</td> </tr><tr bgcolor=\"\"> <th>FMEL_UPD_D</th> <td>20200826094036</td> </tr><tr bgcolor=\"#E3E3F3\"> <th>ADDRESSUNITNUMBER</th> <td></td> </tr></table></center> \n```\n\n\n:::\n\n```{.r .cell-code}\nmpsz\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n```\n\n\n:::\n\n```{.r .cell-code}\nsg\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n```\n\n\n:::\n:::\n\n\n\n\n### H3.5.2 Converting `Spatial*` into generic `sp` format\n\n**`spatstat`** requires the analytical data to be in **`ppp`** object form. There is no direct way to convert a `Spatial*` class into a `ppp` object. We need to convert it into a `Spatial` object first.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_sp <- as(childcare, \"SpatialPoints\")\nchildcare_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n```\n\n\n:::\n\n```{.r .cell-code}\nsg_sp <- as(sg, \"SpatialPolygons\")\nsg_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n```\n\n\n:::\n:::\n\n\n\n\nOne major difference that can observed between a `Spatial` class object and generic `sp` object is the `variables`, `names`, `min values` and `max values` attributes, which are absent in the latter.\n\n### H3.5.3 Converting generic `sp` format into `ppp` format\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_ppp <- as.ppp(childcare_sf)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n```\n\n\n:::\n\n```{.r .cell-code}\nchildcare_ppp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(childcare_ppp)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(childcare_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units\n```\n\n\n:::\n:::\n\n\n\n\n## H3.5.4 Handling duplicates\n\nIn spatial point patterns analysis, as is data analytics in general, an issue of significance is the presence of **duplicates**. These need to be handled, since it is assumed that the points cannot be *coincident*.\n\nIn this section, we will:\n\n1.  Check for duplicated points in our `childcare_ppp` object;\n2.  Count the number of coincidence points with the `multiplicity()` function;\n3.  Find the number of locations with more than one point event;\n4.  View the locations of duplicated point events on a map plot;\n5.  Perform *jittering*, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check for duplication\nany(duplicated(childcare_ppp))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find multiplicity\nmultiplicity <- multiplicity(childcare_ppp)\nmultiplicity\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n```\n\n\n:::\n\n```{.r .cell-code}\n# Print the number of locations with more than 1 point event\nsum(multiplicity > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0\n```\n\n\n:::\n:::\n\n\n\n\nWe can conclude from the above that there are no duplicates in the data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find the locations of duplicate point events\n# tmap_mode('view')\n# tm_shape(childcare) +\n#   tm_dots(alpha=0.4, \n#           size=0.05)\n# tmap_mode('plot')\n\n# Perform jittering\nchildcare_ppp_jit <- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nany(duplicated(childcare_ppp_jit))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] FALSE\n```\n\n\n:::\n:::\n\n\n\n\nJittering is one of three ways to deal with missing geospatial data, the others being to make each point \"unique\" and then attach the duplicate attributes as marks (which would be more complex), or simply remove the data (which might lead to the loss of other important attributes).\n\n### H3.5.5 Creating an `owin` object\n\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area, such as the national boundary of Singapore. In `spatstat`, `owin` is specifically designed to represent this polygonal region and can be defined and output as such:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsg_owin <- as.owin(sg_sf)\nplot(sg_owin)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(sg_owin)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n```\n\n\n:::\n:::\n\n\n\n\n### H3.5.6 Combining point events and `owin` objects\n\nFinally, we can extract our childcare centre \"events\" and combine them with the `owin` object as such:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_SG_ppp = childcare_ppp[sg_owin]\nplot(childcare_SG_ppp)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n```{.r .cell-code}\nsummary(childcare_SG_ppp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n```\n\n\n:::\n:::\n\n\n\n\n## H3.6 First Order Spatial Point Patterns Analysis\n\nSpatial point patterns analysis (SPPA) is the study of the spatial arrangements of points in (typically) 2D space. In this section, we will perform first order SPPA using `spatstat`. In particular, we will:\n\n-   derive the **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes, and;\n-   performing **confirmatory spatial point patterns analysis** using **nearest neighbour** statistics.\n\n### H3.6.1 Kernel Density Estimation\n\nKernel density estimation (KDE) serves to compute the *intensity* of a point distribution. It has two general steps: first to compute the point intensity, followed by spatial interpolation using a kernel function (to create distributions like a uniform, triangular, quartic or gaussian distribution). In this exercise, we will mostly use the `gaussian` kernel.\n\n#### H3.6.1.1 Computing KDE using automatic bandwidth selection\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw <- density(childcare_SG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\nplot(kde_childcareSG_bw)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nAs we can see, the range of our density values is between 0 and 35\\*10^-4^, which is way too small for us. This is because `svy21` uses **metres** by default, which means the density values to be computed will be the **number of points per square metre**.\n\nWe will therefore need to rescale our KDE values. Before we move on though, it is good to know that the following code chunk will retrieve us the bandwidth used to compute the KDE layer.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw <- bw.diggle(childcare_SG_ppp)\nbw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n298.4095 \n```\n\n\n:::\n:::\n\n\n\n\n#### H3.6.1.2 Rescaling KDE values\n\nTo rescale our KDE values, we can convert the unit of measurement into **kilometres**, and then re-run `density()` and plot the output map to see the result.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcareSG_ppp.km <- rescale.ppp(childcare_SG_ppp, 1000, \"km\")\nkde_childcareSG.bw <- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\nWe now have a much more readable density map.\n\n### H3.6.2 Working with different automatic bandwidth methods\n\nOther than `bw.diggle()`, `bw.CvL()`, `bw.scott()` and `bw.ppl` may be used to determine the bandwidth.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw.diggle(childcareSG_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    sigma \n0.2984095 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.scott(childcareSG_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n sigma.x  sigma.y \n2.224898 1.450966 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.CvL(childcareSG_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   sigma \n4.543278 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw.ppl(childcareSG_ppp.km)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n    sigma \n0.3897114 \n```\n\n\n:::\n:::\n\n\n\n\nWe can also plot different maps to compare the output of different bandwidth methods.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG.ppl <- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n\n\n### H3.6.3 Working with different kernel methods\n\nAs mentioned, there are different kernel methods to give us different distributions. The code chunk below compares the results of three other kernel methods than `gaussian`, and computes additional kernel density estimations.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\n## H3.7 Fixed and adaptive KDE\n\n### H3.7.1 Computing KDE using fixed bandwidth\n\nAnother way to compute a KDE layer is by defining a fixed bandwidth. The code chunk below defines a bandwidth (sigma) of 600m (0.6km).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_600 <- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\n### H3.7.2 Computing KDE using adaptive bandwidth\n\nThe fixed bandwidth method is sensitive to skewed distributions of spatial point patterns (for instance, if a large number of points is clustered in one area, say an urban area, instead of another, like a rural area.) Adaptive bandwidth, using `density.adaptive()`, is one way to overcome this problem.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\nTwo KDE outputs may be compared as follows.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n:::\n\n\n\n\n### H3.7.3 Converting KDE outputs into grid objects\n\nFor mapping purposes.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngridded_kde_childcareSG_bw <- as(kde_childcareSG.bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-20-1.png){width=672}\n:::\n:::\n\n\n\n\n### H3.7.3.1 Converting gridded output into `RasterLayer`\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nkde_childcareSG_bw_raster <- raster(kde_childcareSG.bw)\nkde_childcareSG_bw_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n```\n\n\n:::\n:::\n\n\n\n\n### H3.7.3.2 Assigning projection system\n\nNotice that the `crs` attribute is `NA`, indicating that no coordinate system has been assigned to the raster. We will fix this by adding the WSY21 (Singapore) CRS to our `RasterLayer`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nprojection(kde_childcareSG_bw_raster) <- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n```\n\n\n:::\n:::\n\n\n\n\n### H3.7.4 Visualising output in tmap\n\nFinally, we can display the raster in cartographic quality using `tmap`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\nWith all the work we have done so far, a quick glance at the maps indicates a higher than usual density of childcare centres in the areas of [Woodlands South](https://en.wikipedia.org/wiki/Woodlands,_Singapore) and [Punggol](https://en.wikipedia.org/wiki/Punggol) (the yellow patches in the above `tmap` display).\n\n### H3.7.5 Comparing Spatial Point Patterns using KDE\n\nAnd now for the fun part - comparing KDEs between regions. In this section, we will compare the density estimations of childcare centres located in the planning areas of [Choa Chu Kang](https://en.wikipedia.org/wiki/Choa_Chu_Kang), [Jurong West](https://en.wikipedia.org/wiki/Jurong_West), Punggol and [Tampines](https://en.wikipedia.org/wiki/Tampines).\n\n#### H3.7.5.1 Extracting and plotting study areas\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First, extract the target planning areas\n\npunggol <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntampines <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"TAMPINES\")\nchoa_chu_kang <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njurong_west <- mpsz_sf %>%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\n# Then, visualise the areas with a plot\npar(mfrow=c(2,2))\nplot(punggol, main = \"Punggol\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(tampines, main = \"Tampines\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-24-2.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(choa_chu_kang, main = \"Choa Chu Kang\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-24-3.png){width=672}\n:::\n\n```{.r .cell-code}\nplot(jurong_west, main = \"Jurong West\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-24-4.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.7.5.2 Creating `owin` object\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npg_owin <- as.owin(punggol)\ntm_owin <- as.owin(tampines)\nck_owin <- as.owin(choa_chu_kang)\njw_owin <- as.owin(jurong_west)\n```\n:::\n\n\n\n\n#### H3.7.5.3 Combining childcare points and the study area\n\nThe code chunk below completes the following 3 tasks. First, we extract the childcare region for each of our four study areas. Next, we transform the unit of measurement from **metres** to **kilometres**. Finally, we can plot the locations of childcare centres within the four study areas.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchildcare_pg_ppp <- childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp <- childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp <- childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp <- childcare_ppp_jit[jw_owin]\n\nchildcare_pg_ppp.km <- rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km <- rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km <- rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km <- rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Childcare centres in Punggol\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(childcare_tm_ppp.km, main=\"Childcare centres in Tampines\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Only 10 out of 89 symbols are shown in the symbol map\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(childcare_ck_ppp.km, main=\"Childcare centres in Choa Chu Kang\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(childcare_jw_ppp.km, main=\"Childcare centres in Jurong West\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Only 10 out of 88 symbols are shown in the symbol map\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.7.5.4 Computing KDE\n\nFinally, we can compute the KDE for each of the four planning areas with the `bw.diggle` method.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: Berman-Diggle Cross-Validation criterion was minimised at right-hand\nend of interval [0, 0.245]; use argument 'hmax' to specify a wider interval for\nbandwidth 'sigma'\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\nThe KDE displays indicate **Jurong West** as the planning area with the lowest concentration of childcare centres and **Punggol** as the planning area with the highest. **Choa Chu Kang** comes in second, followed by **Tampines**.\n\n## H3.8 Nearest Neighbour Analysis\n\n**Nearest neighbours** are the direct distance from points to their nearest neighbours. The **nearest neighbour index** is expressed as the ratio of the **observed mean distance** to the **expected mean distance**. An index of less than 1 indicates the spatial point pattern exhibits **clustering**, while an index of greater than 1 indicates **dispersion or competition**. Finally, an index of exactly 1 indicates complete random distribution.\n\nIn this section, we will perform the Clark-Evans test on the hypothesis that *the distribution of childcare services is* ***random***.\n\n### H3.8.1 Testing spatial point patterns using the Clark-Evans Test\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_SG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=95)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_SG_ppp\nR = 0.55631, p-value < 2.2e-16\nalternative hypothesis: clustered (R < 1)\n```\n\n\n:::\n:::\n\n\n\n\nWith a *p*-value of 2.2 \\* 10^-16^, we can conclude that the spatial point patterns are *not* randomly distributed for the entire country, and are instead *clustered*. We can corroborate this test result with the map visualisations, that indicates that childcare centres are typically located in either the city centre or suburban towns.\n\nWe can run the test again on each of the sets pertaining to our four planning areas. For now, we will focus on Punggol and Jurong West - the former is a non-mature estate inhabited by more young families, while the latter is a mature estate where residents might have lived in for longer.\n\n### H3.8.2 Clark-Evans Test: Punggol\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_pg_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=95)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_pg_ppp\nR = 0.88414, p-value = 0.08343\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n\nOnce again, we use a 95% confidence interval. Since the *p*-value is lower than 0.05, we can reject the null hypothesis that the point patterns are randomly distributed - i.e., conclude that the point patterns are not randomly distributed.\n\n### H3.8.3 Clark-Evans Test: Jurong West\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclarkevans.test(childcare_jw_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=95)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n\n\tClark-Evans test\n\tNo edge correction\n\tZ-test\n\ndata:  childcare_jw_ppp\nR = 0.87015, p-value = 0.01979\nalternative hypothesis: two-sided\n```\n\n\n:::\n:::\n\n\n\n\nOnce again, our *p*-value is lower than 0.05, leading us to conclude that the point patterns are not randomly distributed.\n\n## H3.9 Second Order Spatial Points Patterns Analysis\n\nWhile first order SPPA measures how observations vary due to *changes in the underlying property*, **second order SPPA** deals with variations in observations *due to the way they interact with one another*. The methods used for second order SPPA include the F-, G-, K- and L-functions.\n\nIn this section, we will explore the F-, G- K- and L-functions by applying them on the childcare centre data for the planning areas of **Choa Chu Kang** in Western Singapore, and **Tampines** in the East.\n\n## H3.10 F-Function\n\nThe F-function estimates the empty space function $F(r)$ from a point pattern in a window of arbitrary shape. It can be computed using `Fest()` of the spatstat package.\n\nFollowing that, a Monte Carlo simulation test can be performed using `envelope()`. We will perform both operations on the segments of the data representing\n\n### H3.10.1 Computing F-function estimations\n\n#### H3.10.1.1 Choa Chu Kang\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_function_Choa_Chu_Kang <- Fest(childcare_ck_ppp)\nplot(F_function_Choa_Chu_Kang)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.10.1.2 Tampines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_function_Tampines <- Fest(childcare_tm_ppp, correction=\"best\")\nplot(F_function_Tampines)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n### H3.10.2 Performing Complete Spatial Randomness Test\n\nTo confirm the observed spatial patterns above, we can conduct a Monte Carlo (hypothesis) test with `envelope()`. The hypothesis and test are as follows:\n\nH~0~ = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.\n\nH~1~= The distribution of childcare services at Choa Chu Kang/Tampines are *not* randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\n#### H3.10.2.1 Choa Chu Kang\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_CCK.csr <- envelope(childcare_ck_ppp, Fest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(F_CCK.csr)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.10.2.2 Tampines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nF_TM.csr <- envelope(childcare_tm_ppp, Fest, correction=\"all\", nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(F_TM.csr)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n\n\nThe F-functions for both Choa Chu Kang and Tampines are below the envelopes, indicating that the childcare centres in both locations are **clustered**.\n\n## H3.11 G-Function\n\nThe **G-function** measures the distribution of distances from an arbitrary event to its nearest event.\n\nOnce again, a function from the `spatstat` package will be used, this time the `Gest()` function. Following that, we will perform another Monte Carlo simulation test with `envelope()`.\n\n### H3.11.1 Computing G-function estimations\n\n#### H3.11.1.1 Choa Chu Kang\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_CK <- Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-35-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.11.1.2 Tampines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_tm <- Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n\n\n### H3.11.2 Performing Complete Spatial Randomness Test\n\nAs a reminder:\n\nH~0~ = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.\n\nH~1~= The distribution of childcare services at Choa Chu Kang/Tampines are *not* randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\n#### H3.11.2.1 Choa Chu Kang\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_CK.csr <- envelope(childcare_ck_ppp, Gest, nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_CK.csr)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-37-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.11.2.2 Tampines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nG_tm.csr <- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(G_tm.csr)\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-38-1.png){width=672}\n:::\n:::\n\n\n\n\n## H3.12 K-Function\n\nThe **K-function** measures the number of events found up to a given distance of any particular event. For this exercise, the `spatstat` function to be used is the the `Kest()` function, and another Monte Carlo simulation test will be performed with `envelope()`.\n\n### H3.12.1 Computing K-function estimations\n\n#### H3.12.1.1 Choa Chu Kang\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-39-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.12.1.2 Tampines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-40-1.png){width=672}\n:::\n:::\n\n\n\n\n### H3.12.2 Performing Complete Spatial Randomness Test\n\nAs a reminder:\n\nH~0~ = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.\n\nH~1~= The distribution of childcare services at Choa Chu Kang/Tampines are *not* randomly distributed.\n\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\n#### H3.12.2.1 Choa Chu Kang\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_ck.csr <- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-41-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.12.2.2 Tampines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nK_tm.csr <- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-42-1.png){width=672}\n:::\n:::\n\n\n\n\n## H3.13 L-Function\n\nThe **L-function** measures the distribution of distances from an arbitrary event to its nearest event. For this exercise, the `spatstat` function to be used is the the `Lest()` function, and another Monte Carlo simulation test will be performed with `envelope()`.\n\n### H3.13.1 Computing L-function estimations\n\n#### H3.13.1.1 Choa Chu Kang\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-43-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.13.1.2 Tampines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-44-1.png){width=672}\n:::\n:::\n\n\n\n\n### H3.13.2 Performing Complete Spatial Randomness Test\n\n#### H3.13.2.1 Choa Chu Kang\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_ck.csr <- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-45-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H3.13.2.2 Tampines\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nL_tm.csr <- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n```\n\n\n:::\n\n```{.r .cell-code}\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))\n```\n\n::: {.cell-output-display}\n![](hands-on-3_files/figure-html/unnamed-chunk-46-1.png){width=672}\n:::\n:::",
    "supporting": [
      "hands-on-3_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}