{
  "hash": "50300a3ee163879b8cb52f5be3fbf68b",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"H4: Network Constrained Spatial Point Patterns Analysis (Incomplete)\"\nsubtitle: \"Hands-On Exercise 4\"\nauthor: \"Kendrick Teo\"\ndate: \"2024-08-30\"\ndate-modified: \"last-modified\"\n\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n## H4.1 Overview and Data\n\n**Network Constrained Spatial Point Patterns Analysis (NetSPPA)** is a collection of *spatial point patterns analysis* (SPPA) methods special developed for analysing spatial point event occurs on or alongside a network. Examples of networks are road, train and river networks, while examples of spatial point events include locations of events like crime, or facilities like schools and parks.\n\nThis exercise will be on the `spNetwork` package, which serves to derive network kernel density estimation (NKDE), as well as to perform network G- and K-function analysis. Continuing on our theme of childcare centres, we will analyise the spatial distribution of childcare centres in the relatively young, northeastern planning area of [Punggol](https://en.wikipedia.org/wiki/Punggol). Two geospatial datasets in ESRI shapefile format will be used, namely:\n\n-   `Punggol_St`, a line featureset storing information on Punggol's road network, and;\n-   `Punggol_CC`, a point featureset storing the locations of Punggol's childcare centres.\n\n## H4.2 Installing and launching R packages\n\nThe R packages to be used today are:\n\n-   `spNetwork`, for performing SPPA procedures like KDE and K-functions on the network. It can also be used to build spatial matrices to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\n-   `sf`\n-   `tmap`, particularly the `leaflet` API, which helps us plot cartographic-quality static point pattern maps or interactive maps.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pacman::p_load(sf, spNetwork, tmap, tidyverse)\n```\n:::\n\n\n\n## H4.3 Data Import, Preparation and Visualisation\n\nAs always, the first step is to import our geospatial datasets into RStudio as `sf` dataframes.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# network <- st_read(dsn=\".../data/geospatial\", \n#                    layer=\"Punggol_St\")\n# network\n# childcare <- st_read(dsn=\".../data/geospatial\",\n#                      layer=\"Punggol_CC\")\n# childcare\n# plot(st_geometry(network))\n# plot(childcare, add=T, col='blue', pch=19)\n```\n:::\n\n\n\n## H4.4 Network KDE Analysis\n\n**Network KDE (NKDE) analysis** can be performed by using appropriate functions from the `spNetwork` package.\n\n### H4.4.1 Preparing lixel objects\n\nBefore finding the NKDE, we need to first cut our `SpatialLines` objects into *lixels* with a specified minimal distance. We can do this by calling `lixelize_lines()` as shown. In the code chunk below:\n\n-   The length of a lixel, taken in with the `lx_length` parameter, is set to `700` metres, and;\n-   The minimum length of a lixel, as defined in the `mindist` parameter, is `375` metres.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lixels <- lixelize_lines(network, \n#                          700, \n#                          mindist = 375)\n```\n:::\n\n\n\nAfter cutting, the length of the final lixel, if shorter than the minimum distance, is added to the previous lixel. If `mindist` is not defined (`NULL`), then it is `maxdist / 10`. Segments that are already shorter than the minimum distance are also not modified.\n\n### H4.4.2 Generating line centre points\n\nNext, the code chunk below will generate a `SpatialPointsDataFrame` (i.e. samples) with line centre points. These points are located at the centre of the line based on its length.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# samples <- lines_center(lixels)\n```\n:::\n\n\n\n### H4.4.3 Performing NKDE\n\nWe are now ready to compute the NKDE by using the following code chunk.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# densities <- nkde(network, \n#                   events = childcare,\n#                   w = rep(1, nrow(childcare)),\n#                   samples = samples,\n#                   kernel_name = \"quartic\",\n#                   bw = 300, \n#                   div= \"bw\", \n#                   method = \"simple\", \n#                   digits = 1, \n#                   tol = 1,\n#                   grid_shape = c(1,1), \n#                   max_depth = 8,\n#                   agg = 5, \n#                   sparse = TRUE,\n#                   verbose = FALSE)\n```\n:::\n\n\n\nSome interesting elements to note from the above code chunk include:\n\n-   The **`quartic`** kernel is to be used for this NKDE exercise, and is passed into the `kernel_name` argument.\n-   The `simple` keyword is passed into the `method` argument, which indicates it is to be used to find the NKDE.\n\nThree popular methods are currently supported by `spNetwork` - `simple`, `discontinuous` and `continuous`. `simple` uses network distances between events and sampling points, and the density is calculated over a linear unit (like metres) instead of an areal unit (like square metres). `discontinuous` \"divides\" the mass density of an event at intersections of lixels, while `continuous` divides the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.\n\n#### H4.4.3.1 Visualising NKDE\n\nWe are now ready to visualise our computed NKDE values, but not before doing some preparatory work beforehand.\n\nFirst, we need to insert the computed density values (densities) into the `density` fields of our `samples` and `lixels` objects.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# samples$density <- densities\n# lixels$density <- densities\n```\n:::\n\n\n\nNext, we have to rescale our density values by kilometres, up from the current metres. As we've seen in a previous hands-on exercise, leaving the projection system in metres (the SVY21 default) leads to extremely small computed density values.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# samples$density <- samples$density * 1000\n# lixels$density <- lixels$density * 1000\n```\n:::\n\n\n\nFinally, we can draw our interactive and high-quality map visualisation.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tmap_mode('view')\n# tm_shape(lixels)+\n#   tm_lines(col=\"density\")+\n# tm_shape(childcare)+\n#   tm_dots()\n# tmap_mode('plot')\n```\n:::\n\n\n\nThe interactive map above effectively distinguishes road segments with a relatively higher density of childcare centres (darker color) than those with a relatively lower density of childcare centres (lighter color).\n\n## H4.5 Network-Constrained G- and K-Function Analysis\n\nThe last step is to perform a complete spatial randomness (CSR) test by running our data through a K-function. The function to be used is `kfunctions()`, once again from the `spNetwork` package.\n\nToday's null hypothesis is defined as:\n\n**H~0~: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol.**\n\nIn other words, our childcare centres are randomly and independently distributed over the street network. If this null hypothesis is rejected, we may infer that the childcare centres in Punggol are spatially dependent on each other; as a result, they may form non-random patterns.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# kfun_childcare <- kfunctions(network, \n#                              childcare,\n#                              start = 0, \n#                              end = 1000, \n#                              step = 50, \n#                              width = 50, \n#                              nsim = 50, \n#                              resolution = 50,\n#                              verbose = FALSE, \n#                              conf_int = 0.05)\n```\n:::\n\n\n\nThe ten arguments required by `kfunctions()` are:\n\n-   `lines`: A `SpatialLinesDataFrame` with the sampling points.\n\n-   `points`: A SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\n\n-   `start`: A `double`, the start value for evaluating the K- and G- functions.\n\n-   `end`: A `double`, the last value for evaluating the K- and G- functions.\n\n-   `step`: A `double`, the jump between two evaluations of the K- and G- function.\n\n-   `width`: The width of each donut for the g-function.\n\n-   `nsim`: An integer indicating the number of Monte Carlo simulations required. In the above example, 50 simulations were performed, but it is usually preferred to have more simulations.\n\n-   `resolution`: When simulating random points on the network, selecting a resolution will reduce greatly the calculation time. When the `resolution` is `NULL`, the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points are selected vertices on the new network.\n\n-   `conf_int`: A double indicating the width confidence interval (default = `0.05`).\n\n`kfunctions()` outputs:\n\n-  `plotkA`, a `ggplot2` object representing the values of the K-function;\n-  `plotgA`, a `ggplot2` object representing the values of the G-function;\n-  `valuesA`, a DataFrame with the values used to build the plots.\n\nFinally, we can visualise the `ggplot2` object of our K-function as follows.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# kfun_childcare$plotk\n```\n:::\n\n\n\nSince the observed values for the distance interval of 250-400m are *below* the envelop, we can infer that the childcare centres in Punggol resemble a regular pattern for that distance.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}