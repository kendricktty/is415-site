{
  "hash": "87cd8444d493742135961764a7c322aa",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"H5: Spatial Weights and Appliations (Incomplete)\"\nsubtitle: \"Hands-On Exercise 5\"\nauthor: \"Kendrick Teo\"\ndate: \"2024-08-31\"\ndate-modified: \"last-modified\"\n\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n## H5.1 Overview, Study Area and Data\n\nThis exercise is on computing spatial weights with R. For this exercise, the following datasets, set in [Hunan Province, China](https://en.wikipedia.org/wiki/Hunan), will be used:\n\n-   The **Hunan country boundary layer**, in ESRI shapefile format, and;\n-   `Hunan_2012.csv`, an aspatial dataset containing selected local development indicators for the area in 2012.\n\nIn addition to the usual `sf`, `readr` and `dplyr` packages, spatial weights and spatially lagged variables will be computed using appropriate `spdep` functions.\n\n### H5.1.1 Getting Started\n\nAfter loading our packages, our data will be imported into the R environment.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# pacman::p_load(sf, spdep, tmap, tidyverse, knitr)\n# hunan <- st_read(dsn = \"../data/geospatial\", \n#                  layer = \"Hunan\")\n# dev_2012 <- read_csv(\"../data/aspatial/Hunan_2012.csv\")\n```\n:::\n\n\n\n\n### H5.1.2 Relational Join\n\nWe can now perform a **left join** of the Hunan 2012 development dataset on the map of Hunan province:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hunan <- left_join(hunan,dev_2012)%>%\n#   select(1:4, 7, 15)\n```\n:::\n\n\n\n\n## H5.2 Visualising our Data\n\nUsing `qtm()` and other `tmap` packages, we can now prepare a basemap and choropleth map showing the distribution of **GDP per capita** by region.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# basemap <- tm_shape(hunan) +\n#   tm_polygons() +\n#   tm_text(\"NAME_3\", size=0.5)\n\n# gdppc <- qtm(hunan, \"GDPPC\")\n# tmap_arrange(basemap, gdppc, asp=1, ncol=2)\n```\n:::\n\n\n\n\n## H5.3 Computing Contiguity Spatial Weights\n\nThe `poly2nb()` function of the `spdep` package may be used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with continuous boundaries.\n\n### H5.3.1 Creating QUEEN contiguity-based neighbours\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wm_q <- poly2nb(hunan, queen=TRUE)\n# summary(wm_q)\n```\n:::\n\n\n\n\nFor each polygon in our polygon object, `wm_q` lists all neighbouring polygons. The following code chunk reveals the neighbours for the first polygon in the object. **It is good to be reminded here that R is not a zero-index index, so all list indices start from `1`**.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wm_q[[1]]\n```\n:::\n\n\n\n\nWe can also retrieve the county name with Polygon ID=1 as follows:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hunan$County[1]\n```\n:::\n\n\n\n\nOr the county names of the five counties bordering county ID 1:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# hunan$NAME_3[c(2,3,4,57,85)]\n```\n:::\n\n\n\n\nFinally, we can retrieve the GDP per capita of each of the five counties bordering county ID 1:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# nb1 <- wm_q[[1]]\n# nb1 <- hunan$GDPPC[nb1]\n# nb1\n```\n:::\n\n\n\n\nThe complete weight matrix may be displayed using `str()`. It's a long one.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# str(wm_q)\n```\n:::\n\n\n\n\n### H5.3.2 Creating ROOK contiguity-based neighbours\n\nAside from the QUEEN contiguity weight matrix, we can also create ROOK contiguity based neighbours by setting the `queen` parameter to `FALSE`. The summary report below shows there are 88 area units in Hunan Province, with the most connected area unit having 10 neighbours.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# wm_r <- poly2nb(hunan, queen=FALSE)\n# summary(wm_r)\n```\n:::\n\n\n\n\n### H5.3.3 Visualising contiguity weights\n\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids, which we can calculate these in the sf package. \n\n#### H5.3.3.1 Getting Latitude and Longitude of Polygon Centroids\n\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\n\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation \\[\\[\\]\\] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n```\n:::\n\n\n\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with \\[\\[2\\]\\].\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n```\n:::\n\n\n\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# coords <- cbind(longitude, latitude)\n```\n:::\n\n\n\n\nWe can check the first few observations to see if things are formatted correctly.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# head(coords)\n```\n:::\n\n\n\n\n#### H5.3.3.2 Plotting Queen contiguity based neighbours map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot(hunan$geometry, border=\"lightgrey\")\n# plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n```\n:::\n\n\n\n\n#### H5.3.3.3 Plotting Rookc contiguity based neighbours map\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot(hunan$geometry, border=\"lightgrey\")\n# plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n```\n:::\n\n\n\n\n### H5.4 Computing distance-based neighbours\n\nDistance-based weight matrices may be derived using `dnearneigh()`. This function identifies neighbours of region points by **Euclidean distance** with a lower bound of `d1` and upper bound of `d2`, controlled by the `bounds` parameter. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix, and `longlat=TRUE`, great circle distances in **km** will be calculated assuming the **WGS84** reference ellipsoid.\n\n### H5.4.1 Determining the cutoff distance\n\nTo determine the upper limit for the distance band, we can follow the steps below:\n\n* Return a matrix with the indices of points belonging to the set of the k nearest neighbours of each other using `knearneigh()`;\n* Convert the `knn` object returned by `knearneigh()` into a neighbours list of class `nb` with a list of integer vectors containing neighbour region number IDs using `knn2nb()`\n* Return the length of neighbour relationship edges using `nbdists()`, which returns in the units of the coordinates if one is projected, and in *kilometres* otherwise.\n* Remove the list structure of the returned object using `unlist()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#coords <- coordinates(hunan)\n# k1 <- knn2nb(knearneigh(coords))\n# k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))\n# summary(k1dists)\n```\n:::\n\n\n\n\n### H5.4.2 Computing fixed distance weight matrix",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}