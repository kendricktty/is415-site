{
  "hash": "6ffd687f48845d89cc6dd9fbcaf0eb78",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"H2: Thematic Mapping and GeoVisualisation with R\"\nsubtitle: \"Hands-On Exercise 2\"\nauthor: \"Kendrick Teo\"\ndate: \"2024-08-19\"\ndate-modified: \"last-modified\"\n\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n## H2.1 Overview\n\nWhile thematic mapping uses map symbols to visualise geographic properties such as population and temperature, geovisualisation is a subset of thematic mapping, where a pseudocolour is used to correspond with these geographic properties.\n\n## H2.2 Getting Started\n\n`tmap` contains the packages needed to perform geovisualisation, so we need to import that along with the usual packages we use.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n\n\n## H2.3 Importing Data into R\n\nThe datasets to be used are:\n\n1. Master Plan 2014 Subzone Boundary (Web)(`MP14_SUBZONE_WEB_PL`) in ESRI shapefile format\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmp_subzone = st_read(dsn=\"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nmp_subzone\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n\n\n\n2. Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 (aspatial)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_data = read_csv(\"../data/aspatial/respopagesextod2011to2020/respopagesextod2011to2020.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(population_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    50  2011\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2011\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Landed Properties       0  2011\n```\n\n\n:::\n:::\n\n\n\n\n## H2.3.4 Data Preparation\n\nTo prepare our thematic map visualising the distribution of Singapore residents of various attributes, we need to filter the population dataset to only include values from the year 2020.\n\n### H2.3.4.0 `%>%` Operator\n\nThe `%>%` operator is used extensively here, so as an R beginner, it might be worth summarising what it does. Basically, `%>%` is a pipe that directs the output of the function called to its left to the one called on its right.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadratic_function <- function(x) {\n  return (x * x)\n}\n\nadd_3 <- function(x) {\n  return (x + 3)\n}\n\nmultiply_2 <- function(x) {\n  return (x * 2)\n}\n\nthree_plus_three_times_2 <- 3 %>% multiply_2 %>% add_3 %>% multiply_2\nprint(\"Expected: 18\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Expected: 18\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Actual:\", three_plus_three_times_2, sep=\" \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Actual: 18\"\n```\n\n\n:::\n:::\n\n\n\n\nThe alternative would be to create a large composite list of functions within functions, which would make our code difficult to read:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthree_plus_three_times_2 <- multiply_2(add_3(multiply_2(3)))\nprint(\"Expected: 18\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Expected: 18\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Actual:\", three_plus_three_times_2, sep=\" \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Actual: 18\"\n```\n\n\n:::\n:::\n\n\n\n\nIn the context of data preprocessing, the `%>%` would be akin, in Python, to chaining multiple `pandas` methods together in the same line, such that the operations are also performed from left to right. For example:\n\n```\n{python}\ndf = pd.read_csv()\ndf.fillna().head()\n```\n\n### 2.3.4.1 Data wrangling\n\nGreat! Now that we've explained `%>%`, let's now move on to the more complicated job of feature-engineering the population data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_2020 <- population_data %>%\n  filter(Time == 2020) %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP` = sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from=AG, values_from=POP) %>%\n  mutate(`YOUNG`=rowSums(.[3:6]) + rowSums(.[12])) %>%\n  mutate(`ECONOMY ACTIVE`=rowSums(.[7:11]) + rowSums(.[13:15])) %>%\n  mutate(`AGED`=rowSums(.[16:21])) %>%\n  mutate(`TOTAL`=rowSums(.[3:21])) %>%  \n  mutate(`DEPENDENCY`=(`YOUNG` + `AGED`)\n    /`ECONOMY ACTIVE`) %>%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n:::\n\n\n\n\n### 2.3.4.2 Joining attribute and geospatial data\n\nA georelational join will now need to be performed to combine them into the same table.\n\nBefore we can do so, though, we need to convert the PA and SZ fields to uppercase, to unify its presentation with teh SUBZONE_N and PLN_AREA_N fields.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_2020 <- population_2020 %>% \n  mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %>% \n  filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n\n\nWe can now perform a **left join** (from the `dplyr` function) between the subzone geospatial data and the population data on the `SUBZONE_N` and `SZ` identifiers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined <- left_join(mp_subzone, population_2020, by=c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n\n\n## 2.4 Choropleth mapping using `tmap`\n\nWe can now create our choropleth map.\n\nAs adapted from the [course website](https://r4gdsa.netlify.app/chap02.html):\n\n> Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}