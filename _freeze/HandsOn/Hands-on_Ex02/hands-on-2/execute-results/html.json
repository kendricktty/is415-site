{
  "hash": "3c6c996cef3a2661a73afd79d7915140",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"H2: Thematic Mapping and GeoVisualisation with R\"\nsubtitle: \"Hands-On Exercise 2\"\nauthor: \"Kendrick Teo\"\ndate: \"2024-08-19\"\ndate-modified: \"last-modified\"\n\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n## H2.1 Overview\n\nWhile thematic mapping uses map symbols to visualise geographic properties such as population and temperature, geovisualisation is a subset of thematic mapping, where a pseudocolour is used to correspond with these geographic properties.\n\n## H2.2 Getting Started\n\n`tmap` contains the packages needed to perform geovisualisation, so we need to import that along with the usual packages we use.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse)\n```\n:::\n\n\n\n\n## H2.3 Importing Data into R\n\nThe datasets to be used are:\n\n1.  Master Plan 2014 Subzone Boundary (Web)(`MP14_SUBZONE_WEB_PL`) in ESRI shapefile format\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmp_subzone <- st_read(dsn = \"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nmp_subzone\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nunique(mp_subzone$REGION_N)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"CENTRAL REGION\"    \"WEST REGION\"       \"EAST REGION\"      \n[4] \"NORTH-EAST REGION\" \"NORTH REGION\"     \n```\n\n\n:::\n:::\n\n\n\n\n2.  Singapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 (aspatial)\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_data <- read_csv(\"../data/aspatial/respopagesextod2011to2020/respopagesextod2011to2020.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(population_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    50  2011\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2011\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Landed Properties       0  2011\n```\n\n\n:::\n:::\n\n\n\n\nThe data appears to be arranged in order of planning area, so by calling `head()`, the first few rows feature entries located in the good town of [Ang Mo Kio](https://en.wikipedia.org/wiki/Ang_Mo_Kio).\n\n## H2.3.4 Data Preparation\n\nTo prepare our thematic map visualising the distribution of Singapore residents of various attributes, we need to filter the population dataset to only include values from the year 2020.\n\n### H2.3.4.0 `%>%` Operator\n\nThe `%>%` operator is used extensively here, so as an R beginner, it might be worth summarising what it does. Basically, `%>%` is a pipe that directs the output of the function called to its left to the one called on its right.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nquadratic_function <- function(x) {\n    return(x * x)\n}\n\nadd_3 <- function(x) {\n    return(x + 3)\n}\n\nmultiply_2 <- function(x) {\n    return(x * 2)\n}\n\nthree_plus_three_times_2 <- 3 %>%\n    multiply_2() %>%\n    add_3() %>%\n    multiply_2()\nprint(\"Expected: 18\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Expected: 18\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Actual:\", three_plus_three_times_2, sep = \" \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Actual: 18\"\n```\n\n\n:::\n:::\n\n\n\n\nThe alternative would be to create a large composite list of functions within functions, which would make our code difficult to read:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nthree_plus_three_times_2 <- multiply_2(add_3(multiply_2(3)))\nprint(\"Expected: 18\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Expected: 18\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(paste(\"Actual:\", three_plus_three_times_2, sep = \" \"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Actual: 18\"\n```\n\n\n:::\n:::\n\n\n\n\nIn the context of data preprocessing, the `%>%` would be akin, in Python, to chaining multiple `pandas` methods together in the same line, such that the operations are also performed from left to right. For example:\n\n```         \ndf = pd.read_csv()\ndf.fillna().head()\n```\n\n#### H2.3.4.1 Data wrangling\n\nGreat! Now that we've explained `%>%`, let's now move on to the more complicated job of feature-engineering the population data.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_2020 <- population_data %>%\n    filter(Time == 2020) %>%\n    group_by(PA, SZ, AG) %>%\n    summarise(`POP` = sum(`Pop`)) %>%\n    ungroup() %>%\n    pivot_wider(names_from = AG, values_from = POP)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(population_2020)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_over\"\n```\n\n\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_2020 <- population_2020 %>%\n    # As young boys in Singapore serve 2 years of national service, the earliest age to be considered economically active should be 25.\n    mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %>%\n    # By 2026, the retirement age in Singapore will be raised to 64.\n    mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %>%\n    mutate(`AGED` = rowSums(.[16:21])) %>%\n    mutate(`TOTAL` = rowSums(.[3:21])) %>%\n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n    / `ECONOMY ACTIVE`) %>%\n    select(\n        `PA`, `SZ`, `YOUNG`,\n        `ECONOMY ACTIVE`, `AGED`,\n        `TOTAL`, `DEPENDENCY`\n    )\n```\n:::\n\n\n\n\n#### H2.3.4.2 Joining attribute and geospatial data\n\nA georelational join will now need to be performed to combine them into the same table.\n\nBefore we can do so, though, we need to convert the PA and SZ fields to uppercase, to unify its presentation with teh SUBZONE_N and PLN_AREA_N fields.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_2020 <- population_2020 %>%\n    mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %>%\n    filter(`ECONOMY ACTIVE` > 0)\n```\n:::\n\n\n\n\nWe can now perform a **left join** (from the `dplyr` function) between the subzone geospatial data and the population data on the `SUBZONE_N` and `SZ` identifiers:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncombined <- left_join(mp_subzone, population_2020, by = c(\"SUBZONE_N\" = \"SZ\"))\n```\n:::\n\n\n\n\n## H2.4 Choropleth mapping using `tmap`\n\nWe can now create our choropleth map.\n\nAs adapted from the [course website](https://r4gdsa.netlify.app/chap02.html):\n\n> Choropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n> Two approaches can be used to prepare thematic map using tmap, they are:\n\n> -   Plotting a thematic map quickly by using qtm().\n> -   Plotting highly customisable thematic map by using tmap elements.\n\n### H2.4.1 Plotting a choropleth map quickly using `qtm()`\n\nThe easiest and quickest way to draw a chloropleth map is using `qtm()`:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_mode(\"plot\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap mode set to plotting\n```\n\n\n:::\n\n```{.r .cell-code}\nqtm(combined,\n    fill = \"DEPENDENCY\"\n)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n\n\nThis map indicates that the dependency ratio in most of the island is a supposedly healthy 5 and below. Missing datapoints correspond with major commercial nodes and key installations in the country (such as Changi Airport in the east, the central catchment nature reserve, the downtown core and industrial estates in Jurong and Tuas), while [Changi Village](https://en.wikipedia.org/wiki/Changi_Village) (the patch of red) seems to have the highest percentage of dependents.\n\n> Learning points:\n\n> -   `tmap_mode()` with `“plot”` option is used to produce a static map. For interactive mode, `“view”` option should be used.\n\n> -   `fill` argument is used to map the attribute (in this case, `\"DEPENDENCY\"`)\n\n### H2.4.2 Creating a choropleth map using `tmap` elements\n\nA major disadvantage of `qtm()` is that it makes aesthetics of individual layers harder to control. Using the `tmap` elements allows us to draw better quality cartographic choropleth maps like the one below.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) +\n    tm_fill(\"DEPENDENCY\",\n        style = \"quantile\",\n        palette = \"Blues\",\n        title = \"Dependency ratio\"\n    ) +\n    tm_layout(\n        main.title = \"Distribution of Dependency Ratio by planning subzone\",\n        main.title.position = \"center\",\n        main.title.size = 1.2,\n        legend.height = 0.45,\n        legend.width = 0.35,\n        frame = TRUE\n    ) +\n    tm_borders(alpha = 0.5) +\n    tm_compass(type = \"8star\", size = 2) +\n    tm_scale_bar() +\n    tm_grid(alpha = 0.2) +\n    tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",\n        position = c(\"left\", \"bottom\")\n    )\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-12-1.png){width=672}\n:::\n:::\n\n\n\n\nOnce again the missing datapoints correspond to areas of the country not dedicated to residential use, but this time we have a much more varied visualisation of the dependency ratio within the country. The areas with the highest dependency ratio appear to correlate with the oldest [HDB](https://en.wikipedia.org/wiki/Housing_and_Development_Board) estates, from [Toa Payoh](https://en.wikipedia.org/wiki/Toa_Payoh) to [Queenstown](https://en.wikipedia.org/wiki/Queenstown,_Singapore), while the newer estates such as [Sengkang](https://en.wikipedia.org/wiki/Sengkang), [Punggol](https://en.wikipedia.org/wiki/Punggol) and even [Yishun](https://en.wikipedia.org/wiki/Yishun) have a smaller proportion of dependents.\n\n#### H2.4.2.1 Drawing a base map\n\nIn the code chunk below, `tm_shape()` is used to define the input data (i.e `comined`) and `tm_polygons()` is used to draw the planning subzone polygons.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) + tm_polygons()\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n\n\n#### 2.4.2.2 Drawing a choropleth map using `tm_polygons()`\n\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign that target variable to `tm_polgyons()`. The maps below show higher than usual populations of young dependents in [Woodlands](https://en.wikipedia.org/wiki/Woodlands,_Singapore), Sengkang, Punggol, [Tampines](https://en.wikipedia.org/wiki/Tampines) and [Pasir Ris](https://en.wikipedia.org/wiki/Pasir_Ris), and higher than usual populations of elderly dependents in Ang Mo Kio, [Hougang](https://en.wikipedia.org/wiki/Hougang) and [Bedok](https://en.wikipedia.org/wiki/Bedok).\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) + tm_polygons(\"YOUNG\")\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(combined) + tm_polygons(\"AGED\")\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n:::\n\n\n\n\n> Things to learn from `tm_polygons()`:\n\n-   The default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by **tmap** will be provided in sub-section 4.3.\n\n-   The default colour scheme used is `YlOrRd` of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\n\n-   By default, missing values are shaded in grey.\n\n#### H2.4.2.3 Drawing a choropleth map with `tm_fill()` and `tm_border()`\n\n`tm_polygons()` is a wrapper of `tm_fill()` and `tm_border()`, which shades the polygons and adds borders from the shapefile onto the map respectively. Let's see what happens when we try to use each of these two functions individually:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) + tm_fill(\"DEPENDENCY\")\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(combined) + tm_borders(lwd = 0.1, alpha = 1)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-15-2.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(combined) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1, alpha = 1)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-15-3.png){width=672}\n:::\n:::\n\n\n\n\nThe `alpha` argument is used to define a transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\n\nThe three other arguments for `tm_borders()` are:\n\n-   `col`: border colour\n-   `lwd`: border line width (default `1`)\n-   `lty`: border line type (default `solid`)\n\n### H2.4.3 Data classification methods of `tmap`\n\nData classification serves to take a large number of observations and group them into data ranges or classes. `tmap` provides a total ten data classification methods, namely `fixed`, `sd`, `equal`, `pretty` (default), `quantile`, `kmeans`, `hclust`, `bclust`, `fisher`, and `jenks`. A data classification method is defined using the `style` argument of the `tm_fill()` or `tm_polygons()` method.\n\n#### H2.4.3.1 Plotting choropleth maps with built-in classification methods\n\nA quantile data classification with 4 classes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 4,\n        style = \"quantile\"\n    ) +\n    tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n\n\nAn equal data classification:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 5,\n        style = \"equal\"\n    ) +\n    tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n\n\nUsing standard deviation:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 4,\n        style = \"sd\"\n    ) +\n    tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-18-1.png){width=672}\n:::\n:::\n\n\n\n\nUsing K-means classification with 5, 10 and 15 class sizes:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for (i in 1:3) {\n#     tm_shape(combined) +\n#         tm_fill(\"AGED\", n = (5 * i), style = \"kmeans\") +\n#         tm_borders(alpha = 0.5)\n# }\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 5,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-19-1.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 10,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-19-2.png){width=672}\n:::\n\n```{.r .cell-code}\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 15,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-19-3.png){width=672}\n:::\n:::\n\n\n\n\nThe `quantile` and `kmeans` with higher `n` classifications are able to highlight the distribution of elderly dependents in Singapore the most clearly. The largest distributions of elderly dependents are clustered in the central, northeast and east of Singapore, with small pockets in the north and west.\n\n#### H2.4.3.2 Plotting choropleth maps with custom breaks\n\nCategory breaks in the built-in styles are calculated automatically. We can override the default breaks by using the `breaks` argument in `tm_fill()` to set our own breakpoints.\n\n> It is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\n\nBefore we move on though, it is a good practice to retrieve our variable's **descriptive statistics** - mean, median, quartiles, min and max. I'm supposed to work on the `DEPENDENCY` feature, but because I'm interested to map the concentration of our elderly population, I will work instead on the `AGED` feature.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsummary(combined$AGED)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      0     515    2080    2667    3745   20240      92 \n```\n\n\n:::\n:::\n\n\n\n\nWe are most interested in which regions of the country contain the range between the **first and third quartiles** - within which also lies the **mean and median**. This is a universally-understood indicator of central tendency.\n\nAs such, our breakpoints will be the following *vector*:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\naged_breaks <- c(0, 514, 2079, 2666, 3744, 20240)\n```\n:::\n\n\n\n\nwhere `aged_breaks[1]` and `aged_breaks[6]` are the `min` and `max` respectively. **In R, indexes start at 1, and not 0 as is the case of 0-indexed languages like Python, C or Java.**\n\n### H2.4.4 Colour Scheme\n\nWith our statistically-derived breakpoints now set, we can now move on to plotting our more statistically informed choropleth map.\n\n[SimCity 4](https://en.wikipedia.org/wiki/SimCity_4), which I play a lot of, plots age-related data for in-game cities using a colour ramp of green (lowest) and blue (highest). Therefore, to showcase the use of `tm_fill()`'s `palette` argument for colouring, we can define a colour vector to use to colour our map in that manner.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=c(\"green\", \"blue\")) +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\n\n\nOr we could use one of the built-in single-colour palettes as such:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=\"Purples\") +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-23-1.png){width=672}\n:::\n:::\n\n\n\n\nTo reverse the colour shading, we can add a \"`-`\" prefix:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=\"-Oranges\") +\n  tm_borders(alpha=0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-24-1.png){width=672}\n:::\n:::\n\n\n\n\n### H2.4.5 Map Layouts\n\n#### H2.4.5.1 Map Legend\n\nFrom this section onward, we will revert to working on the `DEPENDENCY` feature.\n\nIn `tmap`, several legend options are provided to change the placement, format and appearance of the legend.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Oranges\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-25-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H2.4.5.2 Map style\n\nWe can also change the map style by calling `tmap_style()`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"classic\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H2.4.5.3 Cartographic furniture\n\nBesides map style, `tmap` also allows us to draw other map furniture like compasses, scale bars and grid lines. In the code chunk below, `tm_compass()`, `tm_scale_bar()` and `tm_grid()` are used to add a compass, scale bar and grid lines respectively to the map.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-27-1.png){width=672}\n:::\n:::\n\n\n\n\nFinally, the following code chunk resets the default style.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n:::\n\n\n\n\n### H2.4.6 Drawing small multiple choropleth maps\n\nFrom the course outline:\n\n> **Small multiple maps**, also referred to as **facet maps**, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\n>\n> In **`tmap`**, small multiple maps can be plotted in three ways:\n\n> -   by assigning multiple values to at least one of the asthetic arguments,\n\n> -   by defining a group-by variable in *tm_facets()*, and\n\n> -   by creating multiple stand-alone maps with *tmap_arrange()*.\n\n#### H2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\ntmap style set to \"white\"\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stderr}\n\n```\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined)+ \n  tm_polygons(c(\"DEPENDENCY\", \"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\", \"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H2.4.6.2 By defining a group-by variable in `tm_facets()`\n\nHelpful for separating our choropleth map by regions:\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(combined) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n\n\n#### H2.4.6.3 By creating multiple standalone maps with `tmap_arrange()`\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nyoungmap <- tm_shape(combined)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap <- tm_shape(combined)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n```\n\n::: {.cell-output-display}\n![](hands-on-2_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n\n\n### H2.4.7 Mapping Spatial Objects meeting a selection criterion\n\nSometimes we may not have the screen real estate to create multiple small choropleth maps. In such a situation, we can use a selection function to map spatial objects meeting a selection criterion.\n\nIn the following code chunk, our selection function will map out the distribution of dependents in only the northeast region of the country.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# tm_shape(combined[combined$REGION_N==\"NORTHEAST REGION\", ])+\n#   tm_fill(\"DEPENDENCY\",\n#           n = 10,\n#           style = \"kmeans\", \n#           legend.hist = TRUE, \n#           legend.is.portrait = TRUE,\n#           legend.hist.z = 0.1) +\n#   tm_layout(legend.outside = TRUE,\n#             legend.height = 0.45, \n#             legend.width = 5.0,\n#             legend.position = c(\"right\", \"bottom\"),\n#             frame = FALSE) +\n#   tm_borders(alpha = 0.5)\n```\n:::",
    "supporting": [
      "hands-on-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}