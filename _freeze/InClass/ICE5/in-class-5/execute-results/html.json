{
  "hash": "7bbbf7e9add29eb8f07000472f5f3c0e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"CE5: Geographically-weighted statistics with gwModel\"\nsubtitle: \"In-class Exercise 5\"\nauthor: \"Kendrick Teo\"\ndate: \"2024-09-16\"\ndate-modified: \"last-modified\"\n\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n## CE5.1 Loading Packages\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)\n```\n:::\n\n\n\n\n## CE5.2 Preparing data\n\n### CE5.2.1 Importing Hunan data shapefile\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `Hunan' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/InClass/ICE5/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n\n### CE5.2.2 Importing Hunan 2012 Census Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndev_2012 <- read_csv(\"data/aspatial/Hunan_2012.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n:::\n\n\n\n\n### CE5.2.3 Relational Join\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- left_join(hunan, dev_2012) %>%\n  select(1:3, 7, 15, 16, 31, 32)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(County)`\n```\n\n\n:::\n\n```{.r .cell-code}\n  # Only selects fields we are interested in, in this case GDP per capita\n```\n:::\n\n\n\n\n### CE5.2.4 Save/load joined data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# To save the need to regenerate the table later\nwrite_rds(hunan, \"data/rds/hunan_sf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan <- read_rds(\"data/rds/hunan_sf.rds\")\n```\n:::\n\n\n\n\n## CE5.3 Converting to SpatialPolygonDataFrame\n\n`GWmodel`, being a relatively older package, requires spatial data to be represented as `sp` objects.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_sp <- hunan %>% as_Spatial()\n```\n:::\n\n\n\n\n## CE5.4 Geographically weighted summary statistics with **adaptive** bandwidth\n\n### CE5.4.1 AIC\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach=\"AIC\", adaptive=TRUE, kernel=\"bisquare\", longlat=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 22\n```\n\n\n:::\n\n```{.r .cell-code}\n# GDPPC ~ 1: Defines the independent variable\n```\n:::\n\n\n\n\n### CE5.4.2 Cross-validation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach=\"CV\", adaptive=FALSE, kernel=\"bisquare\", longlat=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.29126\n```\n\n\n:::\n:::\n\n\n\n\n## CE5.5 Geographically weighted summary statistics with **fixed** bandwidth\n\n### CE5.5.1 AIC\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_AIC <- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach=\"AIC\", adaptive=FALSE, kernel=\"bisquare\", longlat=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_AIC\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 160.5517\n```\n\n\n:::\n\n```{.r .cell-code}\n# GDPPC ~ 1: Defines the independent variable\n```\n:::\n\n\n\n\n### CE5.5.2 Cross-validation\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_CV <- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach=\"CV\", adaptive=FALSE, kernel=\"bisquare\", longlat=T)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n```\n\n\n:::\n\n```{.r .cell-code}\nbw_CV\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 76.29126\n```\n\n\n:::\n:::\n\n\n\n\n### CE5.5.3 Computing geographically weighted summary statistics\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat <- gwss(data=hunan_sp, vars=\"GDPPC\", bw=bw_AIC, kernel=\"bisquare\", adaptive=TRUE, longlat=T)\n```\n:::\n\n\n\n\n#### CE5.5.3.1 Preparing the output data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwstat_df <- as.data.frame(gwstat$SDF)\n```\n:::\n\n\n\n`cbind()` is then used to append the newly derived dataframe to `hunan_sf`.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nhunan_gstat <- cbind(hunan, gwstat_df)\n```\n:::\n\n\n\n\n## CE5.6 Visualising geographically-weighted summary statistics\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\", n=5, style=\"quantile\") + tm_borders(alpha=0.5) + tm_layout(main.title=\"Distribution of geographically weighted mean\", main.title.position = \"center\", main.title.size = 1, legend.text.size = 0.5, legend.height = 1.5, legend.width = 1.5, frame = TRUE)\n```\n\n::: {.cell-output-display}\n![](in-class-5_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::",
    "supporting": [
      "in-class-5_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}