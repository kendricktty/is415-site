{
  "hash": "c02637a22937a64d789ff036ae223611",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"CE2: Working with Master Plan Planning Subzone Data\"\nsubtitle: \"In-class Exercise 2\"\nauthor: \"Kendrick Teo\"\ndate: \"2024-08-26\"\ndate-modified: \"last-modified\"\n\nexecute: \n  eval: true\n  echo: true\n  freeze: true\n---\n\n\n\n\n## CE2.1 Working with Masterplan 2014 Subzone Data\n\n1. Create a subfolder called *data* in In-class_Ex02 folder\n\n2. Download and load both the ESRI shapefile and `kml` file from *Master Plan 2014 Subzone Boundary (Web)* from the portal.\n\n3. Write a code chunk to import *Master Plan 2014 Subzone Boundary (Web)* as SF simple features DataFrame.\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, tmap, tidyverse, ggstatsplot)\n\nmp_subzone_14_shp <- st_read(dsn=\"data/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n\n```{.r .cell-code}\nclass(mp_subzone_14_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"sf\"         \"data.frame\"\n```\n\n\n:::\n\n```{.r .cell-code}\n#! eval:false\n# Doesn't work!\ntryCatch({mp_subzone_kml <- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")}, error=function(e) {\n  print(e)\n  print(\"Cannot load!\")\n  })\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n<Rcpp::exception: Cannot open \"/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebKML.kml\"; The source could be corrupt or not supported. See `st_drivers()` for a list of supported formats.>\n[1] \"Cannot load!\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# So we need to write our own KML file.\nst_write(mp_subzone_14_shp, \"data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml\", delete_dsn=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nDeleting source `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting layer `WORKINGMasterPlan2014SubzoneBoundaryWebKML' to data source \n  `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n```\n\n\n:::\n\n```{.r .cell-code}\n# delete_dsn replaces the file with our new one if its already exists\n```\n:::\n\n\n\n\n## CE2.2 Working with Masterplan 2019 Subzone Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmp_subzone_19_shp <- st_read(dsn=\"data/MPSZ-2019\", layer=\"MPSZ-2019\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MPSZ-2019' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n\n```{.r .cell-code}\nmp_subzone_19_kml <- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\n\n\n## CE2.3 Transforming coordinate data from WGS84 to SVY21\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmp_subzone_19_shp <- mp_subzone_19_shp %>% st_transform(crs = 3414)\nst_crs(mp_subzone_19_shp)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n\n\n\n\n## CE2.4 Working with Population Data\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_2023 <- read_csv(\"data/respopagesextod2023/respopagesextod2023.csv\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"Columns of population_2023\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Columns of population_2023\"\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(population_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PA\"   \"SZ\"   \"AG\"   \"Sex\"  \"TOD\"  \"Pop\"  \"Time\"\n```\n\n\n:::\n\n```{.r .cell-code}\nprint(\"Head of population_2023\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Head of population_2023\"\n```\n\n\n:::\n\n```{.r .cell-code}\nhead(population_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  <chr>      <chr>                  <chr>  <chr> <chr>               <dbl> <dbl>\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2023\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats        0  2023\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       10  2023\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    30  2023\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2023\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Condominiums and O…    40  2023\n```\n\n\n:::\n:::\n\n\n\n\n## CE2.5 Group data by planning area and subzone\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_2023_pivot <- population_2023 %>%\n  group_by(PA, SZ, AG) %>%\n  summarise(`POP`=sum(`Pop`)) %>%\n  ungroup() %>%\n  pivot_wider(names_from=AG, values_from=POP)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n```\n\n\n:::\n\n```{.r .cell-code}\ncolnames(population_2023)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"PA\"   \"SZ\"   \"AG\"   \"Sex\"  \"TOD\"  \"Pop\"  \"Time\"\n```\n\n\n:::\n\n```{.r .cell-code}\n# Read the data structure carefully before proceeding!\n```\n:::\n\n\n\n\n## CE2.6 Data Wrangling\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npopulation_2023_pivot <- population_2023_pivot %>%\n    # As young boys in Singapore serve 2 years of national service, the earliest age to be considered economically active should be 25.\n    mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %>%\n    # By 2026, the retirement age in Singapore will be raised to 64.\n    mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %>%\n    mutate(`AGED` = rowSums(.[16:21])) %>%\n    mutate(`TOTAL` = rowSums(.[3:21])) %>%\n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n    / `ECONOMY ACTIVE`) %>%\n    # mutate(): Perform calculation or conversion\n    select(\n        `PA`, `SZ`, `YOUNG`,\n        `ECONOMY ACTIVE`, `AGED`,\n        `TOTAL`, `DEPENDENCY`\n    ) %>% \n    mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %>%\n    filter(`ECONOMY ACTIVE` > 0)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}