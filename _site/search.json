[
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "While thematic mapping uses map symbols to visualise geographic properties such as population and temperature, geovisualisation is a subset of thematic mapping, where a pseudocolour is used to correspond with these geographic properties."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.1-overview",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.1-overview",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "While thematic mapping uses map symbols to visualise geographic properties such as population and temperature, geovisualisation is a subset of thematic mapping, where a pseudocolour is used to correspond with these geographic properties."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.2-getting-started",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.2-getting-started",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "H2.2 Getting Started",
    "text": "H2.2 Getting Started\ntmap contains the packages needed to perform geovisualisation, so we need to import that along with the usual packages we use.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.3-importing-data-into-r",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.3-importing-data-into-r",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "H2.3 Importing Data into R",
    "text": "H2.3 Importing Data into R\nThe datasets to be used are:\n\nMaster Plan 2014 Subzone Boundary (Web)(MP14_SUBZONE_WEB_PL) in ESRI shapefile format\n\n\nmp_subzone &lt;- st_read(dsn = \"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmp_subzone\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\nunique(mp_subzone$REGION_N)\n\n[1] \"CENTRAL REGION\"    \"WEST REGION\"       \"EAST REGION\"      \n[4] \"NORTH-EAST REGION\" \"NORTH REGION\"     \n\n\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 (aspatial)\n\n\npopulation_data &lt;- read_csv(\"../data/aspatial/respopagesextod2011to2020/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(population_data)\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    50  2011\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2011\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Landed Properties       0  2011\n\n\nThe data appears to be arranged in order of planning area, so by calling head(), the first few rows feature entries located in the good town of Ang Mo Kio."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.3.4-data-preparation",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.3.4-data-preparation",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "H2.3.4 Data Preparation",
    "text": "H2.3.4 Data Preparation\nTo prepare our thematic map visualising the distribution of Singapore residents of various attributes, we need to filter the population dataset to only include values from the year 2020.\n\nH2.3.4.0 %&gt;% Operator\nThe %&gt;% operator is used extensively here, so as an R beginner, it might be worth summarising what it does. Basically, %&gt;% is a pipe that directs the output of the function called to its left to the one called on its right.\n\nquadratic_function &lt;- function(x) {\n    return(x * x)\n}\n\nadd_3 &lt;- function(x) {\n    return(x + 3)\n}\n\nmultiply_2 &lt;- function(x) {\n    return(x * 2)\n}\n\nthree_plus_three_times_2 &lt;- 3 %&gt;%\n    multiply_2() %&gt;%\n    add_3() %&gt;%\n    multiply_2()\nprint(\"Expected: 18\")\n\n[1] \"Expected: 18\"\n\nprint(paste(\"Actual:\", three_plus_three_times_2, sep = \" \"))\n\n[1] \"Actual: 18\"\n\n\nThe alternative would be to create a large composite list of functions within functions, which would make our code difficult to read:\n\nthree_plus_three_times_2 &lt;- multiply_2(add_3(multiply_2(3)))\nprint(\"Expected: 18\")\n\n[1] \"Expected: 18\"\n\nprint(paste(\"Actual:\", three_plus_three_times_2, sep = \" \"))\n\n[1] \"Actual: 18\"\n\n\nIn the context of data preprocessing, the %&gt;% would be akin, in Python, to chaining multiple pandas methods together in the same line, such that the operations are also performed from left to right. For example:\ndf = pd.read_csv()\ndf.fillna().head()\n\nH2.3.4.1 Data wrangling\nGreat! Now that we’ve explained %&gt;%, let’s now move on to the more complicated job of feature-engineering the population data.\n\npopulation_2020 &lt;- population_data %&gt;%\n    filter(Time == 2020) %&gt;%\n    group_by(PA, SZ, AG) %&gt;%\n    summarise(`POP` = sum(`Pop`)) %&gt;%\n    ungroup() %&gt;%\n    pivot_wider(names_from = AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(population_2020)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_over\"\n\n\n\npopulation_2020 &lt;- population_2020 %&gt;%\n    # As young boys in Singapore serve 2 years of national service, the earliest age to be considered economically active should be 25.\n    mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%\n    # By 2026, the retirement age in Singapore will be raised to 64.\n    mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %&gt;%\n    mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n    mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n    / `ECONOMY ACTIVE`) %&gt;%\n    select(\n        `PA`, `SZ`, `YOUNG`,\n        `ECONOMY ACTIVE`, `AGED`,\n        `TOTAL`, `DEPENDENCY`\n    )\n\n\n\nH2.3.4.2 Joining attribute and geospatial data\nA georelational join will now need to be performed to combine them into the same table.\nBefore we can do so, though, we need to convert the PA and SZ fields to uppercase, to unify its presentation with teh SUBZONE_N and PLN_AREA_N fields.\n\npopulation_2020 &lt;- population_2020 %&gt;%\n    mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %&gt;%\n    filter(`ECONOMY ACTIVE` &gt; 0)\n\nWe can now perform a left join (from the dplyr function) between the subzone geospatial data and the population data on the SUBZONE_N and SZ identifiers:\n\ncombined &lt;- left_join(mp_subzone, population_2020, by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.4-choropleth-mapping-using-tmap",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.4-choropleth-mapping-using-tmap",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "H2.4 Choropleth mapping using tmap",
    "text": "H2.4 Choropleth mapping using tmap\nWe can now create our choropleth map.\nAs adapted from the course website:\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\n\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nH2.4.1 Plotting a choropleth map quickly using qtm()\nThe easiest and quickest way to draw a chloropleth map is using qtm():\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(combined,\n    fill = \"DEPENDENCY\"\n)\n\n\n\n\n\n\n\n\nThis map indicates that the dependency ratio in most of the island is a supposedly healthy 5 and below. Missing datapoints correspond with major commercial nodes and key installations in the country (such as Changi Airport in the east, the central catchment nature reserve, the downtown core and industrial estates in Jurong and Tuas), while Changi Village (the patch of red) seems to have the highest percentage of dependents.\n\nLearning points:\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\n\n\n\n\nfill argument is used to map the attribute (in this case, \"DEPENDENCY\")\n\n\n\n\nH2.4.2 Creating a choropleth map using tmap elements\nA major disadvantage of qtm() is that it makes aesthetics of individual layers harder to control. Using the tmap elements allows us to draw better quality cartographic choropleth maps like the one below.\n\ntm_shape(combined) +\n    tm_fill(\"DEPENDENCY\",\n        style = \"quantile\",\n        palette = \"Blues\",\n        title = \"Dependency ratio\"\n    ) +\n    tm_layout(\n        main.title = \"Distribution of Dependency Ratio by planning subzone\",\n        main.title.position = \"center\",\n        main.title.size = 1.2,\n        legend.height = 0.45,\n        legend.width = 0.35,\n        frame = TRUE\n    ) +\n    tm_borders(alpha = 0.5) +\n    tm_compass(type = \"8star\", size = 2) +\n    tm_scale_bar() +\n    tm_grid(alpha = 0.2) +\n    tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",\n        position = c(\"left\", \"bottom\")\n    )\n\n\n\n\n\n\n\n\nOnce again the missing datapoints correspond to areas of the country not dedicated to residential use, but this time we have a much more varied visualisation of the dependency ratio within the country. The areas with the highest dependency ratio appear to correlate with the oldest HDB estates, from Toa Payoh to Queenstown, while the newer estates such as Sengkang, Punggol and even Yishun have a smaller proportion of dependents.\n\nH2.4.2.1 Drawing a base map\nIn the code chunk below, tm_shape() is used to define the input data (i.e comined) and tm_polygons() is used to draw the planning subzone polygons.\n\ntm_shape(combined) + tm_polygons()\n\n\n\n\n\n\n\n\n\n\n2.4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign that target variable to tm_polgyons(). The maps below show higher than usual populations of young dependents in Woodlands, Sengkang, Punggol, Tampines and Pasir Ris, and higher than usual populations of elderly dependents in Ang Mo Kio, Hougang and Bedok.\n\ntm_shape(combined) + tm_polygons(\"YOUNG\")\n\n\n\n\n\n\n\ntm_shape(combined) + tm_polygons(\"AGED\")\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, missing values are shaded in grey.\n\n\n\nH2.4.2.3 Drawing a choropleth map with tm_fill() and tm_border()\ntm_polygons() is a wrapper of tm_fill() and tm_border(), which shades the polygons and adds borders from the shapefile onto the map respectively. Let’s see what happens when we try to use each of these two functions individually:\n\ntm_shape(combined) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\ntm_shape(combined) + tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\ntm_shape(combined) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\nThe alpha argument is used to define a transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nThe three other arguments for tm_borders() are:\n\ncol: border colour\nlwd: border line width (default 1)\nlty: border line type (default solid)\n\n\n\n\nH2.4.3 Data classification methods of tmap\nData classification serves to take a large number of observations and group them into data ranges or classes. tmap provides a total ten data classification methods, namely fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks. A data classification method is defined using the style argument of the tm_fill() or tm_polygons() method.\n\nH2.4.3.1 Plotting choropleth maps with built-in classification methods\nA quantile data classification with 4 classes:\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 4,\n        style = \"quantile\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nAn equal data classification:\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 5,\n        style = \"equal\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nUsing standard deviation:\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 4,\n        style = \"sd\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nUsing K-means classification with 5, 10 and 15 class sizes:\n\n# for (i in 1:3) {\n#     tm_shape(combined) +\n#         tm_fill(\"AGED\", n = (5 * i), style = \"kmeans\") +\n#         tm_borders(alpha = 0.5)\n# }\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 5,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 10,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 15,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe quantile and kmeans with higher n classifications are able to highlight the distribution of elderly dependents in Singapore the most clearly. The largest distributions of elderly dependents are clustered in the central, northeast and east of Singapore, with small pockets in the north and west.\n\n\nH2.4.3.2 Plotting choropleth maps with custom breaks\nCategory breaks in the built-in styles are calculated automatically. We can override the default breaks by using the breaks argument in tm_fill() to set our own breakpoints.\n\nIt is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\n\nBefore we move on though, it is a good practice to retrieve our variable’s descriptive statistics - mean, median, quartiles, min and max. I’m supposed to work on the DEPENDENCY feature, but because I’m interested to map the concentration of our elderly population, I will work instead on the AGED feature.\n\nsummary(combined$AGED)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      0     515    2080    2667    3745   20240      92 \n\n\nWe are most interested in which regions of the country contain the range between the first and third quartiles - within which also lies the mean and median. This is a universally-understood indicator of central tendency.\nAs such, our breakpoints will be the following vector:\n\naged_breaks &lt;- c(0, 514, 2079, 2666, 3744, 20240)\n\nwhere aged_breaks[1] and aged_breaks[6] are the min and max respectively. In R, indexes start at 1, and not 0 as is the case of 0-indexed languages like Python, C or Java.\n\n\n\nH2.4.4 Colour Scheme\nWith our statistically-derived breakpoints now set, we can now move on to plotting our more statistically informed choropleth map.\nSimCity 4, which I play a lot of, plots age-related data for in-game cities using a colour ramp of green (lowest) and blue (highest). Therefore, to showcase the use of tm_fill()’s palette argument for colouring, we can define a colour vector to use to colour our map in that manner.\n\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=c(\"green\", \"blue\")) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nOr we could use one of the built-in single-colour palettes as such:\n\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=\"Purples\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nTo reverse the colour shading, we can add a “-” prefix:\n\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=\"-Oranges\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\nH2.4.5 Map Layouts\n\nH2.4.5.1 Map Legend\nFrom this section onward, we will revert to working on the DEPENDENCY feature.\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Oranges\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nH2.4.5.2 Map style\nWe can also change the map style by calling tmap_style().\n\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\nH2.4.5.3 Cartographic furniture\nBesides map style, tmap also allows us to draw other map furniture like compasses, scale bars and grid lines. In the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add a compass, scale bar and grid lines respectively to the map.\n\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nFinally, the following code chunk resets the default style.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nH2.4.6 Drawing small multiple choropleth maps\nFrom the course outline:\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\n\n\nby assigning multiple values to at least one of the asthetic arguments,\n\n\n\n\nby defining a group-by variable in tm_facets(), and\n\n\n\n\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nH2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(combined)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(combined)+ \n  tm_polygons(c(\"DEPENDENCY\", \"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\", \"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nH2.4.6.2 By defining a group-by variable in tm_facets()\nHelpful for separating our choropleth map by regions:\n\ntm_shape(combined) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\n\nH2.4.6.3 By creating multiple standalone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(combined)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(combined)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nH2.4.7 Mapping Spatial Objects meeting a selection criterion\nSometimes we may not have the screen real estate to create multiple small choropleth maps. In such a situation, we can use a selection function to map spatial objects meeting a selection criterion.\nIn the following code chunk, our selection function will map out the distribution of dependents in only the northeast region of the country.\n\ntm_shape(combined[combined$REGION_N==\"NORTH-EAST REGION\", ])+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"kmeans\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Hi there! My name is Kendrick Teo, and I’m a final-year student of Singapore Management University (SMU).\nThe purpose of this website is to document my learning journey in the course: IS415: Geospatial Analytics and Applications under professor Kam Tin Seong. Follow along with my coursework below as I explore the vast world of data analytics, geospatial analytics and urban planning.\nIf you’re liking this site so far, I would most appreciate it if you could connect with me on LinkedIn!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415: Geospatial Analytics and Applications",
    "section": "",
    "text": "Welcome, and thanks for stopping by! My name is Kendrick, and you’ve reached my portfolio website for IS415: Geospatial Analytics and Applications.\n\nhello_world &lt;- \"hello world!\"\nprint(hello_world)\n\n[1] \"hello world!\"\n\n\nHands-on Exercises"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "Changelog: Since the same dataset may be required across multiple hands-on exercises, the data folder for this hands-on exercise has been moded to the root of the HandsOn directory. Correspondingly, all code chunks have been modified to reference the newly located data folder."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.1-importing-polygon-feature-data-in-shapefile-format",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.1-importing-polygon-feature-data-in-shapefile-format",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.4.1 Importing polygon feature data in shapefile format",
    "text": "H1.4.1 Importing polygon feature data in shapefile format\nThe code chunk below uses st_read() function of sf package to import the MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame.\n\nmp_subzone = st_read(dsn=\"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThere are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems. The bounding box provides the x extend and y extend of the data."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.2-importing-polyline-feature-data-in-shapefile-form",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.2-importing-polyline-feature-data-in-shapefile-form",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.4.2 Importing polyline feature data in shapefile form",
    "text": "H1.4.2 Importing polyline feature data in shapefile form\nUsing the same method as above, we now import the CyclingPath shapefile into R as a line feature data frame.\n\ncycling_paths = st_read(dsn=\"../data/geospatial/CyclingPath_Jul2024\", layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/CyclingPath_Jul2024' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.3-importing-gis-data-in-kml-format",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.3-importing-gis-data-in-kml-format",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.4.3 Importing GIS data in kml format",
    "text": "H1.4.3 Importing GIS data in kml format\n\npreschool_data = st_read(\"../data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.1-working-with-st_geometry",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.1-working-with-st_geometry",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.5.1 Working with st_geometry()",
    "text": "H1.5.1 Working with st_geometry()\n\nst_geometry(mp_subzone)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303..."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.2-working-with-glimpse",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.2-working-with-glimpse",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.5.2 Working with glimpse()",
    "text": "H1.5.2 Working with glimpse()\n\nglimpse(mp_subzone)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.3-working-with-head",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.3-working-with-head",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.5.3 Working with head()",
    "text": "H1.5.3 Working with head()\n\nhead(mp_subzone, n=10)\n\nSimple feature collection with 10 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 20660.53 ymin: 28369.47 xmax: 32362.39 ymax: 30684.55\nProjected CRS: SVY21\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.7.1-assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.7.1-assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.7.1 Assigning EPSG code to a simple feature data frame",
    "text": "H1.7.1 Assigning EPSG code to a simple feature data frame\nA common issue that can happen when impmorting geospatial data into R is a missing or wrongly assigned coordinate system. For example:\n\nst_crs(mp_subzone)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAt the end of the output, the EPSG code is displayed, and it reads 9001 (world). The correct EPSG code for the Singapore Plane Coordinate System (SVY21) should be 3414 (Singapore). As such, we need to assign the correct EPSG code using the following code chunk:\n\nmpsz_3414 &lt;- st_set_crs(mp_subzone, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz_3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.7.2-transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.7.2-transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.7.2 Transforming the projection of preschool from wgs84 to svy21",
    "text": "H1.7.2 Transforming the projection of preschool from wgs84 to svy21\nAs noted in the above warning message upon applying st_set_crs(), simply replacing the EPSG code does not reproject the data.\nAs adapted from the course website:\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\n\n\nst_geometry(preschool_data)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\nRunning the above code reveals the preschool featureset uses the wrong wgs84 coordinate system. To fix this, instead of running st_set_crs(), we have to run st_transform() to reproject preschool from one coordinate system to another.\n\npreschool_3414 &lt;- st_transform(preschool_data, crs=3414)\nst_geometry(preschool_3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.8.1-importing-aspatial-airbnb-data",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.8.1-importing-aspatial-airbnb-data",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.8.1 Importing aspatial Airbnb data",
    "text": "H1.8.1 Importing aspatial Airbnb data\nJust like importing and reading data in Python’s pandas, importing aspatial data into the R/quarto environment is as easy as calling read_csv().\n\nlistings &lt;- read_csv(\"../data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.8.2-creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.8.2-creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.8.2 Creating a simple feature data frame from an aspatial data frame",
    "text": "H1.8.2 Creating a simple feature data frame from an aspatial data frame\n\nlistings_sf &lt;- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs=4326) %&gt;%\n    st_transform(crs=3414)\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore’s SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%&gt;% is used to nest st_transform() to transform the newly created simple feature data frame into the svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.9.1-buffering",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.9.1-buffering",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.9.1 Buffering",
    "text": "H1.9.1 Buffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\nbuffer_cycling &lt;- st_buffer(cycling_paths, dist=5, nQuadSegs=30)\n\nThen, we calculate the area of the buffers:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n…and take the sum of Base R to derive the total land needed.\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.9.2-point-in-polygon-count",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.9.2-point-in-polygon-count",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.9.2 Point-in-polygon count",
    "text": "H1.9.2 Point-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz_3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz_3414, preschool_3414))\n\nsummary(mpsz_3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\nWarning: Not to be confused by st_intersection().\n\ntop_n() from the dplyr package, for n = 1, is used to find the planning subzone with the greatest number of preschools:\n\ntop_n(mpsz_3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nDIY: Calculate the density of pre-school by planning subzone.\n\nThe solution:\nFirst, use st_area() of the sf package to derive the area of each planning subzone:\n\nmpsz_3414$Area &lt;- mpsz_3414 %&gt;%\n  st_area()\n\nNext, mutate() of the dplyr package is used to compute the density by using the code chunk below.\n\nmpsz_3414 &lt;- mpsz_3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.10.1-plotting-the-distribution-of-presch-density",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.10.1-plotting-the-distribution-of-presch-density",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.10.1 Plotting the distribution of PreSch Density",
    "text": "H1.10.1 Plotting the distribution of PreSch Density\n\nhist(mpsz_3414$`PreSch Density`)\n\n\n\n\n\n\n\n\n\nggplot(data=mpsz_3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"orange\") +\n  labs(title = \"Are preschools evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single preschool. On the other hand, \\nthere are two planning sub-zones with at least 20 preschools!\",\n      x = \"Pre-school density (per km^2)\",\n      y = \"Frequency\")"
  },
  {
    "objectID": "InClass/ICE1/in-class-1.html",
    "href": "InClass/ICE1/in-class-1.html",
    "title": "CE1: Geospatial Data Science",
    "section": "",
    "text": "CE1 Overview\nThe aim of this exercise is to practise loading simple featuresets (point, line, polygon, etc) with R.\n\n\nCE1.1"
  },
  {
    "objectID": "InClass/ICE1/data/MPSZ-2019.html",
    "href": "InClass/ICE1/data/MPSZ-2019.html",
    "title": "IS415 - Kendrick",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html",
    "href": "InClass/ICE2/in-class-2.html",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "",
    "text": "Create a subfolder called data in In-class_Ex02 folder\nDownload and load both the ESRI shapefile and kml file from Master Plan 2014 Subzone Boundary (Web) from the portal.\nWrite a code chunk to import Master Plan 2014 Subzone Boundary (Web) as SF simple features DataFrame.\n\n\npacman::p_load(sf, tmap, tidyverse, ggstatsplot)\n\nmp_subzone_14_shp &lt;- st_read(dsn=\"data/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nclass(mp_subzone_14_shp)\n\n[1] \"sf\"         \"data.frame\"\n\n#! eval:false\n# Doesn't work!\ntryCatch({mp_subzone_kml &lt;- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")}, error=function(e) {\n  print(e)\n  print(\"Cannot load!\")\n  })\n\n&lt;Rcpp::exception: Cannot open \"/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebKML.kml\"; The source could be corrupt or not supported. See `st_drivers()` for a list of supported formats.&gt;\n[1] \"Cannot load!\"\n\n# So we need to write our own KML file.\nst_write(mp_subzone_14_shp, \"data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml\", delete_dsn=TRUE)\n\nDeleting source `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting layer `WORKINGMasterPlan2014SubzoneBoundaryWebKML' to data source \n  `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n# delete_dsn replaces the file with our new one if its already exists"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.1-working-with-masterplan-2014-subzone-data",
    "href": "InClass/ICE2/in-class-2.html#ce2.1-working-with-masterplan-2014-subzone-data",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "",
    "text": "Create a subfolder called data in In-class_Ex02 folder\nDownload and load both the ESRI shapefile and kml file from Master Plan 2014 Subzone Boundary (Web) from the portal.\nWrite a code chunk to import Master Plan 2014 Subzone Boundary (Web) as SF simple features DataFrame.\n\n\npacman::p_load(sf, tmap, tidyverse, ggstatsplot)\n\nmp_subzone_14_shp &lt;- st_read(dsn=\"data/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nclass(mp_subzone_14_shp)\n\n[1] \"sf\"         \"data.frame\"\n\n#! eval:false\n# Doesn't work!\ntryCatch({mp_subzone_kml &lt;- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")}, error=function(e) {\n  print(e)\n  print(\"Cannot load!\")\n  })\n\n&lt;Rcpp::exception: Cannot open \"/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebKML.kml\"; The source could be corrupt or not supported. See `st_drivers()` for a list of supported formats.&gt;\n[1] \"Cannot load!\"\n\n# So we need to write our own KML file.\nst_write(mp_subzone_14_shp, \"data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml\", delete_dsn=TRUE)\n\nDeleting source `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting layer `WORKINGMasterPlan2014SubzoneBoundaryWebKML' to data source \n  `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n# delete_dsn replaces the file with our new one if its already exists"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.2-working-with-masterplan-2019-subzone-data",
    "href": "InClass/ICE2/in-class-2.html#ce2.2-working-with-masterplan-2019-subzone-data",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.2 Working with Masterplan 2019 Subzone Data",
    "text": "CE2.2 Working with Masterplan 2019 Subzone Data\n\nmp_subzone_19_shp &lt;- st_read(dsn=\"data/MPSZ-2019\", layer=\"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmp_subzone_19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.3-transforming-coordinate-data-from-wgs84-to-svy21",
    "href": "InClass/ICE2/in-class-2.html#ce2.3-transforming-coordinate-data-from-wgs84-to-svy21",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.3 Transforming coordinate data from WGS84 to SVY21",
    "text": "CE2.3 Transforming coordinate data from WGS84 to SVY21\n\nmp_subzone_19_shp &lt;- mp_subzone_19_shp %&gt;% st_transform(crs = 3414)\nst_crs(mp_subzone_19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.4-working-with-population-data",
    "href": "InClass/ICE2/in-class-2.html#ce2.4-working-with-population-data",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.4 Working with Population Data",
    "text": "CE2.4 Working with Population Data\n\npopulation_2023 &lt;- read_csv(\"data/respopagesextod2023/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nprint(\"Columns of population_2023\")\n\n[1] \"Columns of population_2023\"\n\ncolnames(population_2023)\n\n[1] \"PA\"   \"SZ\"   \"AG\"   \"Sex\"  \"TOD\"  \"Pop\"  \"Time\"\n\nprint(\"Head of population_2023\")\n\n[1] \"Head of population_2023\"\n\nhead(population_2023)\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2023\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats        0  2023\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       10  2023\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    30  2023\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2023\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Condominiums and O…    40  2023"
  },
  {
    "objectID": "InClass/ICE2/data/MPSZ-2019/MPSZ-2019.html",
    "href": "InClass/ICE2/data/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415 - Kendrick",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.5-group-data-by-planning-area-and-subzone",
    "href": "InClass/ICE2/in-class-2.html#ce2.5-group-data-by-planning-area-and-subzone",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.5 Group data by planning area and subzone",
    "text": "CE2.5 Group data by planning area and subzone\n\npopulation_2023_pivot &lt;- population_2023 %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP`=sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, values_from=POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(population_2023)\n\n[1] \"PA\"   \"SZ\"   \"AG\"   \"Sex\"  \"TOD\"  \"Pop\"  \"Time\"\n\n# Read the data structure carefully before proceeding!"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "",
    "text": "Spatial Point Pattern Analysis serves to evaluate the pattern or distribution of a set of points on a map surface. These points serve many purposes, ranging from mapping events like crimes and disease onset (like John Snow’s map of the 1854 Broad Street cholera outbreak), or the locations of business services or facilities.\nUsing appropriate functions, this hands-on exercise aims to discover the spatial point patterns of a quintessential facility in 2020s Singapore - childcare centres. Specifically, we want to find out:\n\nif these are randomly distributed throughout the country, and;\nthe planning areas with the highest concentration of childcare centres."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.1-overview",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.1-overview",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "",
    "text": "Spatial Point Pattern Analysis serves to evaluate the pattern or distribution of a set of points on a map surface. These points serve many purposes, ranging from mapping events like crimes and disease onset (like John Snow’s map of the 1854 Broad Street cholera outbreak), or the locations of business services or facilities.\nUsing appropriate functions, this hands-on exercise aims to discover the spatial point patterns of a quintessential facility in 2020s Singapore - childcare centres. Specifically, we want to find out:\n\nif these are randomly distributed throughout the country, and;\nthe planning areas with the highest concentration of childcare centres."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.2-the-data",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.2-the-data",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.2 The data",
    "text": "H3.2 The data\nThe datasets to be used are:\n\nMP14_SUBZONE_WEB_PL, containing polygon features.\nCoastalOutline, a new dataset containing polygon features showing the boundaries of Singapore. It is provided by SLA in ESRI shapefile format.\n\nIn addition, our childcare centre data will, as always, be sourced from the Singapore government’s data lake at data.gov.sg. These will take the form of point feature data."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.3-installing-and-loading-r-packages",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.3-installing-and-loading-r-packages",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.3 Installing and Loading R packages",
    "text": "H3.3 Installing and Loading R packages\nAlong with the usual sf and tmap, three new packages will be used. They are:\n\nspatstat, which includes a wide range of useful functions for first and second order spatial point patterns analysis, and to derive the kernel density estimation (KDE) layer.\nraster reads, writes, manipulates, analyses and models (i.e. rasters) gridded spatial data.\nmaptools, which is for manipulating geographic data.\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.4-spatial-data-wrangling",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.4-spatial-data-wrangling",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.4 Spatial Data Wrangling",
    "text": "H3.4 Spatial Data Wrangling\n\nH3.4.1 Importing spatial data\nHere, we import the data we need and plot basic maps to get a basic sense of the spatial patterns we are dealing with.\n\nmpsz_sf &lt;- st_read(dsn=\"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nsg_sf &lt;- st_read(dsn=\"../data/geospatial/CoastalOutline\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/CoastalOutline' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\nchildcare_sf &lt;- st_read(\"../data/geospatial/child-care-services-geojson.geojson\") %&gt;% st_transform(crs=3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\ntm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots() + tm_layout(title = 'Childcare Centres')\n\n\n\n\n\n\n\n\nAlternatively, we can prepare a pin map as below.\n\n# tmap_mode('view')\n# tm_shape(childcare_sf) + tm_dots() + tm_layout(title = 'Childcare Centres')\n# tmap_mode('plot')"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.6-data-wrangling",
    "href": "InClass/ICE2/in-class-2.html#ce2.6-data-wrangling",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.6 Data Wrangling",
    "text": "CE2.6 Data Wrangling\n\npopulation_2023_pivot &lt;- population_2023_pivot %&gt;%\n    # As young boys in Singapore serve 2 years of national service, the earliest age to be considered economically active should be 25.\n    mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%\n    # By 2026, the retirement age in Singapore will be raised to 64.\n    mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %&gt;%\n    mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n    mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n    / `ECONOMY ACTIVE`) %&gt;%\n    # mutate(): Perform calculation or conversion\n    select(\n        `PA`, `SZ`, `YOUNG`,\n        `ECONOMY ACTIVE`, `AGED`,\n        `TOTAL`, `DEPENDENCY`\n    ) %&gt;% \n    mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %&gt;%\n    filter(`ECONOMY ACTIVE` &gt; 0)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.5-geospatial-data-wrangling",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.5-geospatial-data-wrangling",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.5 Geospatial Data Wrangling",
    "text": "H3.5 Geospatial Data Wrangling\nSome geospatial analysis packages require that any input geospatial data be represented with sp’s Spatial* classes. This section introduces a way to convert simple feature data into the Spatial* class.\n\nH3.5.1 Converting sf data frames to Spatial* class\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n\nH3.5.2 Converting Spatial* into generic sp format\nspatstat requires the analytical data to be in ppp object form. There is no direct way to convert a Spatial* class into a ppp object. We need to convert it into a Spatial object first.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n\n\nOne major difference that can observed between a Spatial class object and generic sp object is the variables, names, min values and max values attributes, which are absent in the latter.\n\n\nH3.5.3 Converting generic sp format into ppp format\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\nplot(childcare_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.5.4-handling-duplicates",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.5.4-handling-duplicates",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.5.4 Handling duplicates",
    "text": "H3.5.4 Handling duplicates\nIn spatial point patterns analysis, as is data analytics in general, an issue of significance is the presence of duplicates. These need to be handled, since it is assumed that the points cannot be coincident.\nIn this section, we will:\n\nCheck for duplicated points in our childcare_ppp object;\nCount the number of coincidence points with the multiplicity() function;\nFind the number of locations with more than one point event;\nView the locations of duplicated point events on a map plot;\nPerform jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\n\n# Check for duplication\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n# Find multiplicity\nmultiplicity &lt;- multiplicity(childcare_ppp)\nmultiplicity\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n# Print the number of locations with more than 1 point event\nsum(multiplicity &gt; 1)\n\n[1] 0\n\n\nWe can conclude from the above that there are no duplicates in the data.\n\n# Find the locations of duplicate point events\n# tmap_mode('view')\n# tm_shape(childcare) +\n#   tm_dots(alpha=0.4, \n#           size=0.05)\n# tmap_mode('plot')\n\n# Perform jittering\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\nJittering is one of three ways to deal with missing geospatial data, the others being to make each point “unique” and then attach the duplicate attributes as marks (which would be more complex), or simply remove the data (which might lead to the loss of other important attributes).\n\nH3.5.5 Creating an owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area, such as the national boundary of Singapore. In spatstat, owin is specifically designed to represent this polygonal region and can be defined and output as such:\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\nH3.5.6 Combining point events and owin objects\nFinally, we can extract our childcare centre “events” and combine them with the owin object as such:\n\nchildcare_SG_ppp = childcare_ppp[sg_owin]\nplot(childcare_SG_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\nsummary(childcare_SG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.6-first-order-spatial-point-patterns-analysis",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.6-first-order-spatial-point-patterns-analysis",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.6 First Order Spatial Point Patterns Analysis",
    "text": "H3.6 First Order Spatial Point Patterns Analysis\nSpatial point patterns analysis (SPPA) is the study of the spatial arrangements of points in (typically) 2D space. In this section, we will perform first order SPPA using spatstat. In particular, we will:\n\nderive the kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes, and;\nperforming confirmatory spatial point patterns analysis using nearest neighbour statistics.\n\n\nH3.6.1 Kernel Density Estimation\nKernel density estimation (KDE) serves to compute the intensity of a point distribution. It has two general steps: first to compute the point intensity, followed by spatial interpolation using a kernel function (to create distributions like a uniform, triangular, quartic or gaussian distribution). In this exercise, we will mostly use the gaussian kernel.\n\nH3.6.1.1 Computing KDE using automatic bandwidth selection\n\nkde_childcareSG_bw &lt;- density(childcare_SG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nAs we can see, the range of our density values is between 0 and 35*10-4, which is way too small for us. This is because svy21 uses metres by default, which means the density values to be computed will be the number of points per square metre.\nWe will therefore need to rescale our KDE values. Before we move on though, it is good to know that the following code chunk will retrieve us the bandwidth used to compute the KDE layer.\n\nbw &lt;- bw.diggle(childcare_SG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\nH3.6.1.2 Rescaling KDE values\nTo rescale our KDE values, we can convert the unit of measurement into kilometres, and then re-run density() and plot the output map to see the result.\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcare_SG_ppp, 1000, \"km\")\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\nWe now have a much more readable density map.\n\n\n\nH3.6.2 Working with different automatic bandwidth methods\nOther than bw.diggle(), bw.CvL(), bw.scott() and bw.ppl may be used to determine the bandwidth.\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\nWe can also plot different maps to compare the output of different bandwidth methods.\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\nH3.6.3 Working with different kernel methods\nAs mentioned, there are different kernel methods to give us different distributions. The code chunk below compares the results of three other kernel methods than gaussian, and computes additional kernel density estimations.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.7-fixed-and-adaptive-kde",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.7-fixed-and-adaptive-kde",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.7 Fixed and adaptive KDE",
    "text": "H3.7 Fixed and adaptive KDE\n\nH3.7.1 Computing KDE using fixed bandwidth\nAnother way to compute a KDE layer is by defining a fixed bandwidth. The code chunk below defines a bandwidth (sigma) of 600m (0.6km).\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\nH3.7.2 Computing KDE using adaptive bandwidth\nThe fixed bandwidth method is sensitive to skewed distributions of spatial point patterns (for instance, if a large number of points is clustered in one area, say an urban area, instead of another, like a rural area.) Adaptive bandwidth, using density.adaptive(), is one way to overcome this problem.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nTwo KDE outputs may be compared as follows.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\nH3.7.3 Converting KDE outputs into grid objects\n\n\nH3.7.3.1"
  }
]