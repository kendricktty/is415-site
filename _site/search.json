[
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "While thematic mapping uses map symbols to visualise geographic properties such as population and temperature, geovisualisation is a subset of thematic mapping, where a pseudocolour is used to correspond with these geographic properties."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.1-overview",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.1-overview",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "",
    "text": "While thematic mapping uses map symbols to visualise geographic properties such as population and temperature, geovisualisation is a subset of thematic mapping, where a pseudocolour is used to correspond with these geographic properties."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.2-getting-started",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.2-getting-started",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "H2.2 Getting Started",
    "text": "H2.2 Getting Started\ntmap contains the packages needed to perform geovisualisation, so we need to import that along with the usual packages we use.\n\npacman::p_load(sf, tmap, tidyverse)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.3-importing-data-into-r",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.3-importing-data-into-r",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "H2.3 Importing Data into R",
    "text": "H2.3 Importing Data into R\nThe datasets to be used are:\n\nMaster Plan 2014 Subzone Boundary (Web)(MP14_SUBZONE_WEB_PL) in ESRI shapefile format\n\n\nmp_subzone &lt;- st_read(dsn = \"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer = \"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nmp_subzone\n\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 10 features:\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29...\n\n\n\nunique(mp_subzone$REGION_N)\n\n[1] \"CENTRAL REGION\"    \"WEST REGION\"       \"EAST REGION\"      \n[4] \"NORTH-EAST REGION\" \"NORTH REGION\"     \n\n\n\nSingapore Residents by Planning Area / Subzone, Age Group, Sex and Type of Dwelling, June 2011-2020 (aspatial)\n\n\npopulation_data &lt;- read_csv(\"../data/aspatial/respopagesextod2011to2020/respopagesextod2011to2020.csv\")\n\nRows: 984656 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(population_data)\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2011\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats       10  2011\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       30  2011\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    50  2011\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2011\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Landed Properties       0  2011\n\n\nThe data appears to be arranged in order of planning area, so by calling head(), the first few rows feature entries located in the good town of Ang Mo Kio."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.3.4-data-preparation",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.3.4-data-preparation",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "H2.3.4 Data Preparation",
    "text": "H2.3.4 Data Preparation\nTo prepare our thematic map visualising the distribution of Singapore residents of various attributes, we need to filter the population dataset to only include values from the year 2020.\n\nH2.3.4.0 %&gt;% Operator\nThe %&gt;% operator is used extensively here, so as an R beginner, it might be worth summarising what it does. Basically, %&gt;% is a pipe that directs the output of the function called to its left to the one called on its right.\n\nquadratic_function &lt;- function(x) {\n    return(x * x)\n}\n\nadd_3 &lt;- function(x) {\n    return(x + 3)\n}\n\nmultiply_2 &lt;- function(x) {\n    return(x * 2)\n}\n\nthree_plus_three_times_2 &lt;- 3 %&gt;%\n    multiply_2() %&gt;%\n    add_3() %&gt;%\n    multiply_2()\nprint(\"Expected: 18\")\n\n[1] \"Expected: 18\"\n\nprint(paste(\"Actual:\", three_plus_three_times_2, sep = \" \"))\n\n[1] \"Actual: 18\"\n\n\nThe alternative would be to create a large composite list of functions within functions, which would make our code difficult to read:\n\nthree_plus_three_times_2 &lt;- multiply_2(add_3(multiply_2(3)))\nprint(\"Expected: 18\")\n\n[1] \"Expected: 18\"\n\nprint(paste(\"Actual:\", three_plus_three_times_2, sep = \" \"))\n\n[1] \"Actual: 18\"\n\n\nIn the context of data preprocessing, the %&gt;% would be akin, in Python, to chaining multiple pandas methods together in the same line, such that the operations are also performed from left to right. For example:\ndf = pd.read_csv()\ndf.fillna().head()\n\nH2.3.4.1 Data wrangling\nGreat! Now that we’ve explained %&gt;%, let’s now move on to the more complicated job of feature-engineering the population data.\n\npopulation_2020 &lt;- population_data %&gt;%\n    filter(Time == 2020) %&gt;%\n    group_by(PA, SZ, AG) %&gt;%\n    summarise(`POP` = sum(`Pop`)) %&gt;%\n    ungroup() %&gt;%\n    pivot_wider(names_from = AG, values_from = POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(population_2020)\n\n [1] \"PA\"          \"SZ\"          \"0_to_4\"      \"10_to_14\"    \"15_to_19\"   \n [6] \"20_to_24\"    \"25_to_29\"    \"30_to_34\"    \"35_to_39\"    \"40_to_44\"   \n[11] \"45_to_49\"    \"50_to_54\"    \"55_to_59\"    \"5_to_9\"      \"60_to_64\"   \n[16] \"65_to_69\"    \"70_to_74\"    \"75_to_79\"    \"80_to_84\"    \"85_to_89\"   \n[21] \"90_and_over\"\n\n\n\npopulation_2020 &lt;- population_2020 %&gt;%\n    # As young boys in Singapore serve 2 years of national service, the earliest age to be considered economically active should be 25.\n    mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%\n    # By 2026, the retirement age in Singapore will be raised to 64.\n    mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %&gt;%\n    mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n    mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n    / `ECONOMY ACTIVE`) %&gt;%\n    select(\n        `PA`, `SZ`, `YOUNG`,\n        `ECONOMY ACTIVE`, `AGED`,\n        `TOTAL`, `DEPENDENCY`\n    )\n\n\n\nH2.3.4.2 Joining attribute and geospatial data\nA georelational join will now need to be performed to combine them into the same table.\nBefore we can do so, though, we need to convert the PA and SZ fields to uppercase, to unify its presentation with teh SUBZONE_N and PLN_AREA_N fields.\n\npopulation_2020 &lt;- population_2020 %&gt;%\n    mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %&gt;%\n    filter(`ECONOMY ACTIVE` &gt; 0)\n\nWe can now perform a left join (from the dplyr function) between the subzone geospatial data and the population data on the SUBZONE_N and SZ identifiers:\n\ncombined &lt;- left_join(mp_subzone, population_2020, by = c(\"SUBZONE_N\" = \"SZ\"))"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.4-choropleth-mapping-using-tmap",
    "href": "HandsOn/Hands-on_Ex02/hands-on-2.html#h2.4-choropleth-mapping-using-tmap",
    "title": "H2: Thematic Mapping and GeoVisualisation with R",
    "section": "H2.4 Choropleth mapping using tmap",
    "text": "H2.4 Choropleth mapping using tmap\nWe can now create our choropleth map.\nAs adapted from the course website:\n\nChoropleth mapping involves the symbolisation of enumeration units, such as countries, provinces, states, counties or census units, using area patterns or graduated colors. For example, a social scientist may need to use a choropleth map to portray the spatial distribution of aged population of Singapore by Master Plan 2014 Subzone Boundary.\n\n\nTwo approaches can be used to prepare thematic map using tmap, they are:\n\n\n\nPlotting a thematic map quickly by using qtm().\nPlotting highly customisable thematic map by using tmap elements.\n\n\n\nH2.4.1 Plotting a choropleth map quickly using qtm()\nThe easiest and quickest way to draw a chloropleth map is using qtm():\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nqtm(combined,\n    fill = \"DEPENDENCY\"\n)\n\n\n\n\n\n\n\n\nThis map indicates that the dependency ratio in most of the island is a supposedly healthy 5 and below. Missing datapoints correspond with major commercial nodes and key installations in the country (such as Changi Airport in the east, the central catchment nature reserve, the downtown core and industrial estates in Jurong and Tuas), while Changi Village (the patch of red) seems to have the highest percentage of dependents.\n\nLearning points:\n\n\n\ntmap_mode() with “plot” option is used to produce a static map. For interactive mode, “view” option should be used.\n\n\n\n\nfill argument is used to map the attribute (in this case, \"DEPENDENCY\")\n\n\n\n\nH2.4.2 Creating a choropleth map using tmap elements\nA major disadvantage of qtm() is that it makes aesthetics of individual layers harder to control. Using the tmap elements allows us to draw better quality cartographic choropleth maps like the one below.\n\ntm_shape(combined) +\n    tm_fill(\"DEPENDENCY\",\n        style = \"quantile\",\n        palette = \"Blues\",\n        title = \"Dependency ratio\"\n    ) +\n    tm_layout(\n        main.title = \"Distribution of Dependency Ratio by planning subzone\",\n        main.title.position = \"center\",\n        main.title.size = 1.2,\n        legend.height = 0.45,\n        legend.width = 0.35,\n        frame = TRUE\n    ) +\n    tm_borders(alpha = 0.5) +\n    tm_compass(type = \"8star\", size = 2) +\n    tm_scale_bar() +\n    tm_grid(alpha = 0.2) +\n    tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\",\n        position = c(\"left\", \"bottom\")\n    )\n\n\n\n\n\n\n\n\nOnce again the missing datapoints correspond to areas of the country not dedicated to residential use, but this time we have a much more varied visualisation of the dependency ratio within the country. The areas with the highest dependency ratio appear to correlate with the oldest HDB estates, from Toa Payoh to Queenstown, while the newer estates such as Sengkang, Punggol and even Yishun have a smaller proportion of dependents.\n\nH2.4.2.1 Drawing a base map\nIn the code chunk below, tm_shape() is used to define the input data (i.e comined) and tm_polygons() is used to draw the planning subzone polygons.\n\ntm_shape(combined) + tm_polygons()\n\n\n\n\n\n\n\n\n\n\n2.4.2.2 Drawing a choropleth map using tm_polygons()\nTo draw a choropleth map showing the geographical distribution of a selected variable by planning subzone, we just need to assign that target variable to tm_polgyons(). The maps below show higher than usual populations of young dependents in Woodlands, Sengkang, Punggol, Tampines and Pasir Ris, and higher than usual populations of elderly dependents in Ang Mo Kio, Hougang and Bedok.\n\ntm_shape(combined) + tm_polygons(\"YOUNG\")\n\n\n\n\n\n\n\ntm_shape(combined) + tm_polygons(\"AGED\")\n\n\n\n\n\n\n\n\n\nThings to learn from tm_polygons():\n\n\nThe default interval binning used to draw the choropleth map is called “pretty”. A detailed discussion of the data classification methods supported by tmap will be provided in sub-section 4.3.\nThe default colour scheme used is YlOrRd of ColorBrewer. You will learn more about the color scheme in sub-section 4.4.\nBy default, missing values are shaded in grey.\n\n\n\nH2.4.2.3 Drawing a choropleth map with tm_fill() and tm_border()\ntm_polygons() is a wrapper of tm_fill() and tm_border(), which shades the polygons and adds borders from the shapefile onto the map respectively. Let’s see what happens when we try to use each of these two functions individually:\n\ntm_shape(combined) + tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\ntm_shape(combined) + tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\ntm_shape(combined) + tm_fill(\"DEPENDENCY\") + tm_borders(lwd = 0.1, alpha = 1)\n\n\n\n\n\n\n\n\nThe alpha argument is used to define a transparency number between 0 (totally transparent) and 1 (not transparent). By default, the alpha value of the col is used (normally 1).\nThe three other arguments for tm_borders() are:\n\ncol: border colour\nlwd: border line width (default 1)\nlty: border line type (default solid)\n\n\n\n\nH2.4.3 Data classification methods of tmap\nData classification serves to take a large number of observations and group them into data ranges or classes. tmap provides a total ten data classification methods, namely fixed, sd, equal, pretty (default), quantile, kmeans, hclust, bclust, fisher, and jenks. A data classification method is defined using the style argument of the tm_fill() or tm_polygons() method.\n\nH2.4.3.1 Plotting choropleth maps with built-in classification methods\nA quantile data classification with 4 classes:\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 4,\n        style = \"quantile\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nAn equal data classification:\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 5,\n        style = \"equal\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nUsing standard deviation:\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 4,\n        style = \"sd\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nUsing K-means classification with 5, 10 and 15 class sizes:\n\n# for (i in 1:3) {\n#     tm_shape(combined) +\n#         tm_fill(\"AGED\", n = (5 * i), style = \"kmeans\") +\n#         tm_borders(alpha = 0.5)\n# }\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 5,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 10,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\ntm_shape(combined) +\n    tm_fill(\"AGED\",\n        n = 15,\n        style = \"kmeans\"\n    ) +\n    tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\nThe quantile and kmeans with higher n classifications are able to highlight the distribution of elderly dependents in Singapore the most clearly. The largest distributions of elderly dependents are clustered in the central, northeast and east of Singapore, with small pockets in the north and west.\n\n\nH2.4.3.2 Plotting choropleth maps with custom breaks\nCategory breaks in the built-in styles are calculated automatically. We can override the default breaks by using the breaks argument in tm_fill() to set our own breakpoints.\n\nIt is important to note that, in tmap the breaks include a minimum and maximum. As a result, in order to end up with n categories, n+1 elements must be specified in the breaks option (the values must be in increasing order).\n\nBefore we move on though, it is a good practice to retrieve our variable’s descriptive statistics - mean, median, quartiles, min and max. I’m supposed to work on the DEPENDENCY feature, but because I’m interested to map the concentration of our elderly population, I will work instead on the AGED feature.\n\nsummary(combined$AGED)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n      0     515    2080    2667    3745   20240      92 \n\n\nWe are most interested in which regions of the country contain the range between the first and third quartiles - within which also lies the mean and median. This is a universally-understood indicator of central tendency.\nAs such, our breakpoints will be the following vector:\n\naged_breaks &lt;- c(0, 514, 2079, 2666, 3744, 20240)\n\nwhere aged_breaks[1] and aged_breaks[6] are the min and max respectively. In R, indexes start at 1, and not 0 as is the case of 0-indexed languages like Python, C or Java.\n\n\n\nH2.4.4 Colour Scheme\nWith our statistically-derived breakpoints now set, we can now move on to plotting our more statistically informed choropleth map.\nSimCity 4, which I play a lot of, plots age-related data for in-game cities using a colour ramp of green (lowest) and blue (highest). Therefore, to showcase the use of tm_fill()’s palette argument for colouring, we can define a colour vector to use to colour our map in that manner.\n\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=c(\"green\", \"blue\")) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nOr we could use one of the built-in single-colour palettes as such:\n\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=\"Purples\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nTo reverse the colour shading, we can add a “-” prefix:\n\ntm_shape(combined) +\n  tm_fill(\"AGED\", breaks=aged_breaks, palette=\"-Oranges\") +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\n\n\nH2.4.5 Map Layouts\n\nH2.4.5.1 Map Legend\nFrom this section onward, we will revert to working on the DEPENDENCY feature.\nIn tmap, several legend options are provided to change the placement, format and appearance of the legend.\n\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"jenks\", \n          palette = \"Oranges\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(main.title = \"Distribution of Dependency Ratio by planning subzone \\n(Jenks classification)\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            legend.outside = FALSE,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nH2.4.5.2 Map style\nWe can also change the map style by calling tmap_style().\n\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\") +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"classic\")\n\ntmap style set to \"classic\"\n\n\nother available styles are: \"white\", \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\n\nH2.4.5.3 Cartographic furniture\nBesides map style, tmap also allows us to draw other map furniture like compasses, scale bars and grid lines. In the code chunk below, tm_compass(), tm_scale_bar() and tm_grid() are used to add a compass, scale bar and grid lines respectively to the map.\n\ntm_shape(combined)+\n  tm_fill(\"DEPENDENCY\", \n          style = \"quantile\", \n          palette = \"Greens\",\n          title = \"No. of persons\") +\n  tm_layout(main.title = \"Distribution of Dependency Ratio \\nby planning subzone\",\n            main.title.position = \"center\",\n            main.title.size = 1.2,\n            legend.height = 0.45, \n            legend.width = 0.35,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scale_bar(width = 0.15) +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nFinally, the following code chunk resets the default style.\n\ntmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\nH2.4.6 Drawing small multiple choropleth maps\nFrom the course outline:\n\nSmall multiple maps, also referred to as facet maps, are composed of many maps arrange side-by-side, and sometimes stacked vertically. Small multiple maps enable the visualisation of how spatial relationships change with respect to another variable, such as time.\nIn tmap, small multiple maps can be plotted in three ways:\n\n\n\nby assigning multiple values to at least one of the asthetic arguments,\n\n\n\n\nby defining a group-by variable in tm_facets(), and\n\n\n\n\nby creating multiple stand-alone maps with tmap_arrange().\n\n\n\nH2.4.6.1 By assigning multiple values to at least one of the aesthetic arguments\n\ntm_shape(combined)+\n  tm_fill(c(\"YOUNG\", \"AGED\"),\n          style = \"equal\", \n          palette = \"Blues\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\")) +\n  tm_borders(alpha = 0.5) +\n  tmap_style(\"white\")\n\ntmap style set to \"white\"\n\n\nother available styles are: \"gray\", \"natural\", \"cobalt\", \"col_blind\", \"albatross\", \"beaver\", \"bw\", \"classic\", \"watercolor\" \n\n\n\n\n\n\n\n\n\n\ntm_shape(combined)+ \n  tm_polygons(c(\"DEPENDENCY\", \"AGED\"),\n          style = c(\"equal\", \"quantile\"), \n          palette = list(\"Blues\", \"Greens\")) +\n  tm_layout(legend.position = c(\"right\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nH2.4.6.2 By defining a group-by variable in tm_facets()\nHelpful for separating our choropleth map by regions:\n\ntm_shape(combined) +\n  tm_fill(\"DEPENDENCY\",\n          style = \"quantile\",\n          palette = \"Blues\",\n          thres.poly = 0) + \n  tm_facets(by=\"REGION_N\", \n            free.coords=TRUE, \n            drop.shapes=TRUE) +\n  tm_layout(legend.show = FALSE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(alpha = 0.5)\n\nWarning: The argument drop.shapes has been renamed to drop.units, and is\ntherefore deprecated\n\n\n\n\n\n\n\n\n\n\n\nH2.4.6.3 By creating multiple standalone maps with tmap_arrange()\n\nyoungmap &lt;- tm_shape(combined)+ \n  tm_polygons(\"YOUNG\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\nagedmap &lt;- tm_shape(combined)+ \n  tm_polygons(\"AGED\", \n              style = \"quantile\", \n              palette = \"Blues\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\n\nH2.4.7 Mapping Spatial Objects meeting a selection criterion\nSometimes we may not have the screen real estate to create multiple small choropleth maps. In such a situation, we can use a selection function to map spatial objects meeting a selection criterion.\nIn the following code chunk, our selection function will map out the distribution of dependents in only the northeast region of the country.\n\ntm_shape(combined[combined$REGION_N==\"NORTH-EAST REGION\", ])+\n  tm_fill(\"DEPENDENCY\",\n          n = 10,\n          style = \"kmeans\", \n          legend.hist = TRUE, \n          legend.is.portrait = TRUE,\n          legend.hist.z = 0.1) +\n  tm_layout(legend.outside = TRUE,\n            legend.height = 0.45, \n            legend.width = 5.0,\n            legend.position = c(\"right\", \"bottom\"),\n            frame = FALSE) +\n  tm_borders(alpha = 0.5)\n\nWarning in pre_process_gt(x, interactive = interactive, orig_crs =\ngm$shape.orig_crs): legend.width controls the width of the legend within a map.\nPlease use legend.outside.size to control the width of the outside legend"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About me",
    "section": "",
    "text": "Hi there! My name is Kendrick Teo, and I’m a final-year student of Singapore Management University (SMU).\nThe purpose of this website is to document my learning journey in the course: IS415: Geospatial Analytics and Applications under professor Kam Tin Seong. Follow along with my coursework below as I explore the vast world of data analytics, geospatial analytics and urban planning.\nIf you’re liking this site so far, I would most appreciate it if you could connect with me on LinkedIn!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "IS415: Geospatial Analytics and Applications",
    "section": "",
    "text": "Welcome, and thanks for stopping by! My name is Kendrick, and you’ve reached my portfolio website for IS415: Geospatial Analytics and Applications.\nhello_world &lt;- \"hello world!\"\nprint(hello_world)\n\n[1] \"hello world!\""
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "",
    "text": "Changelog: Since the same dataset may be required across multiple hands-on exercises, the data folder for this hands-on exercise has been moded to the root of the HandsOn directory. Correspondingly, all code chunks have been modified to reference the newly located data folder."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.1-importing-polygon-feature-data-in-shapefile-format",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.1-importing-polygon-feature-data-in-shapefile-format",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.4.1 Importing polygon feature data in shapefile format",
    "text": "H1.4.1 Importing polygon feature data in shapefile format\nThe code chunk below uses st_read() function of sf package to import the MP14_SUBZONE_WEB_PL shapefile into R as a polygon feature data frame.\n\nmp_subzone = st_read(dsn=\"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\n\nThere are a total of 323 multipolygon features and 15 fields in mpsz simple feature data frame. mpsz is in svy21 projected coordinates systems. The bounding box provides the x extend and y extend of the data."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.2-importing-polyline-feature-data-in-shapefile-form",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.2-importing-polyline-feature-data-in-shapefile-form",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.4.2 Importing polyline feature data in shapefile form",
    "text": "H1.4.2 Importing polyline feature data in shapefile form\nUsing the same method as above, we now import the CyclingPath shapefile into R as a line feature data frame.\n\ncycling_paths = st_read(dsn=\"../data/geospatial/CyclingPath_Jul2024\", layer=\"CyclingPathGazette\")\n\nReading layer `CyclingPathGazette' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/CyclingPath_Jul2024' \n  using driver `ESRI Shapefile'\nSimple feature collection with 3138 features and 2 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11854.32 ymin: 28347.98 xmax: 42644.17 ymax: 48948.15\nProjected CRS: SVY21"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.3-importing-gis-data-in-kml-format",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.4.3-importing-gis-data-in-kml-format",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.4.3 Importing GIS data in kml format",
    "text": "H1.4.3 Importing GIS data in kml format\n\npreschool_data = st_read(\"../data/geospatial/PreSchoolsLocation.kml\")\n\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.1-working-with-st_geometry",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.1-working-with-st_geometry",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.5.1 Working with st_geometry()",
    "text": "H1.5.1 Working with st_geometry()\n\nst_geometry(mp_subzone)\n\nGeometry set for 323 features \nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\nFirst 5 geometries:\n\n\nMULTIPOLYGON (((31495.56 30140.01, 31980.96 296...\n\n\nMULTIPOLYGON (((29092.28 30021.89, 29119.64 300...\n\n\nMULTIPOLYGON (((29932.33 29879.12, 29947.32 298...\n\n\nMULTIPOLYGON (((27131.28 30059.73, 27088.33 297...\n\n\nMULTIPOLYGON (((26451.03 30396.46, 26440.47 303..."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.2-working-with-glimpse",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.2-working-with-glimpse",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.5.2 Working with glimpse()",
    "text": "H1.5.2 Working with glimpse()\n\nglimpse(mp_subzone)\n\nRows: 323\nColumns: 16\n$ OBJECTID   &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, …\n$ SUBZONE_NO &lt;int&gt; 1, 1, 3, 8, 3, 7, 9, 2, 13, 7, 12, 6, 1, 5, 1, 1, 3, 2, 2, …\n$ SUBZONE_N  &lt;chr&gt; \"MARINA SOUTH\", \"PEARL'S HILL\", \"BOAT QUAY\", \"HENDERSON HIL…\n$ SUBZONE_C  &lt;chr&gt; \"MSSZ01\", \"OTSZ01\", \"SRSZ03\", \"BMSZ08\", \"BMSZ03\", \"BMSZ07\",…\n$ CA_IND     &lt;chr&gt; \"Y\", \"Y\", \"Y\", \"N\", \"N\", \"N\", \"N\", \"Y\", \"N\", \"N\", \"N\", \"N\",…\n$ PLN_AREA_N &lt;chr&gt; \"MARINA SOUTH\", \"OUTRAM\", \"SINGAPORE RIVER\", \"BUKIT MERAH\",…\n$ PLN_AREA_C &lt;chr&gt; \"MS\", \"OT\", \"SR\", \"BM\", \"BM\", \"BM\", \"BM\", \"SR\", \"QT\", \"QT\",…\n$ REGION_N   &lt;chr&gt; \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENTRAL REGION\", \"CENT…\n$ REGION_C   &lt;chr&gt; \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\", \"CR\",…\n$ INC_CRC    &lt;chr&gt; \"5ED7EB253F99252E\", \"8C7149B9EB32EEFC\", \"C35FEFF02B13E0E5\",…\n$ FMEL_UPD_D &lt;date&gt; 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05, 2014-12-05…\n$ X_ADDR     &lt;dbl&gt; 31595.84, 28679.06, 29654.96, 26782.83, 26201.96, 25358.82,…\n$ Y_ADDR     &lt;dbl&gt; 29220.19, 29782.05, 29974.66, 29933.77, 30005.70, 29991.38,…\n$ SHAPE_Leng &lt;dbl&gt; 5267.381, 3506.107, 1740.926, 3313.625, 2825.594, 4428.913,…\n$ SHAPE_Area &lt;dbl&gt; 1630379.27, 559816.25, 160807.50, 595428.89, 387429.44, 103…\n$ geometry   &lt;MULTIPOLYGON [m]&gt; MULTIPOLYGON (((31495.56 30..., MULTIPOLYGON (…"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.3-working-with-head",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.5.3-working-with-head",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.5.3 Working with head()",
    "text": "H1.5.3 Working with head()\n\nhead(mp_subzone, n=10)\n\nSimple feature collection with 10 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 20660.53 ymin: 28369.47 xmax: 32362.39 ymax: 30684.55\nProjected CRS: SVY21\n   OBJECTID SUBZONE_NO       SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n1         1          1    MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n2         2          1    PEARL'S HILL    OTSZ01      Y          OUTRAM\n3         3          3       BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n4         4          8  HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n5         5          3         REDHILL    BMSZ03      N     BUKIT MERAH\n6         6          7  ALEXANDRA HILL    BMSZ07      N     BUKIT MERAH\n7         7          9   BUKIT HO SWEE    BMSZ09      N     BUKIT MERAH\n8         8          2     CLARKE QUAY    SRSZ02      Y SINGAPORE RIVER\n9         9         13 PASIR PANJANG 1    QTSZ13      N      QUEENSTOWN\n10       10          7       QUEENSWAY    QTSZ07      N      QUEENSTOWN\n   PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n1          MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n2          OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n3          SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n4          BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n5          BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n6          BM CENTRAL REGION       CR 9D286521EF5E3B59 2014-12-05 25358.82\n7          BM CENTRAL REGION       CR 7839A8577144EFE2 2014-12-05 27680.06\n8          SR CENTRAL REGION       CR 48661DC0FBA09F7A 2014-12-05 29253.21\n9          QT CENTRAL REGION       CR 1F721290C421BFAB 2014-12-05 22077.34\n10         QT CENTRAL REGION       CR 3580D2AFFBEE914C 2014-12-05 24168.31\n     Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n1  29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n2  29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n3  29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n4  29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n5  30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n6  29991.38   4428.913  1030378.8 MULTIPOLYGON (((25899.7 297...\n7  30230.86   3275.312   551732.0 MULTIPOLYGON (((27746.95 30...\n8  30222.86   2208.619   290184.7 MULTIPOLYGON (((29351.26 29...\n9  29893.78   6571.323  1084792.3 MULTIPOLYGON (((20996.49 30...\n10 30104.18   3454.239   631644.3 MULTIPOLYGON (((24472.11 29..."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.7.1-assigning-epsg-code-to-a-simple-feature-data-frame",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.7.1-assigning-epsg-code-to-a-simple-feature-data-frame",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.7.1 Assigning EPSG code to a simple feature data frame",
    "text": "H1.7.1 Assigning EPSG code to a simple feature data frame\nA common issue that can happen when impmorting geospatial data into R is a missing or wrongly assigned coordinate system. For example:\n\nst_crs(mp_subzone)\n\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n\n\nAt the end of the output, the EPSG code is displayed, and it reads 9001 (world). The correct EPSG code for the Singapore Plane Coordinate System (SVY21) should be 3414 (Singapore). As such, we need to assign the correct EPSG code using the following code chunk:\n\nmpsz_3414 &lt;- st_set_crs(mp_subzone, 3414)\n\nWarning: st_crs&lt;- : replacing crs does not reproject data; use st_transform for\nthat\n\nst_crs(mpsz_3414)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.7.2-transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.7.2-transforming-the-projection-of-preschool-from-wgs84-to-svy21",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.7.2 Transforming the projection of preschool from wgs84 to svy21",
    "text": "H1.7.2 Transforming the projection of preschool from wgs84 to svy21\nAs noted in the above warning message upon applying st_set_crs(), simply replacing the EPSG code does not reproject the data.\nAs adapted from the course website:\n\nIn geospatial analytics, it is very common for us to transform the original data from geographic coordinate system to projected coordinate system. This is because geographic coordinate system is not appropriate if the analysis need to use distance or/and area measurements.\n\n\nst_geometry(preschool_data)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\nFirst 5 geometries:\n\n\nPOINT Z (103.8072 1.299333 0)\n\n\nPOINT Z (103.826 1.312839 0)\n\n\nPOINT Z (103.8409 1.348843 0)\n\n\nPOINT Z (103.8048 1.435024 0)\n\n\nPOINT Z (103.839 1.33315 0)\n\n\nRunning the above code reveals the preschool featureset uses the wrong wgs84 coordinate system. To fix this, instead of running st_set_crs(), we have to run st_transform() to reproject preschool from one coordinate system to another.\n\npreschool_3414 &lt;- st_transform(preschool_data, crs=3414)\nst_geometry(preschool_3414)\n\nGeometry set for 2290 features \nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 11810.03 ymin: 25596.33 xmax: 45404.24 ymax: 49300.88\nz_range:       zmin: 0 zmax: 0\nProjected CRS: SVY21 / Singapore TM\nFirst 5 geometries:\n\n\nPOINT Z (25089.46 31299.16 0)\n\n\nPOINT Z (27189.07 32792.54 0)\n\n\nPOINT Z (28844.56 36773.76 0)\n\n\nPOINT Z (24821.92 46303.16 0)\n\n\nPOINT Z (28637.82 35038.49 0)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.8.1-importing-aspatial-airbnb-data",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.8.1-importing-aspatial-airbnb-data",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.8.1 Importing aspatial Airbnb data",
    "text": "H1.8.1 Importing aspatial Airbnb data\nJust like importing and reading data in Python’s pandas, importing aspatial data into the R/quarto environment is as easy as calling read_csv().\n\nlistings &lt;- read_csv(\"../data/aspatial/listings.csv\")\n\nRows: 3540 Columns: 18\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (6): name, host_name, neighbourhood_group, neighbourhood, room_type, l...\ndbl  (11): id, host_id, latitude, longitude, price, minimum_nights, number_o...\ndate  (1): last_review\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nlist(listings)\n\n[[1]]\n# A tibble: 3,540 × 18\n       id name      host_id host_name neighbourhood_group neighbourhood latitude\n    &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;     &lt;chr&gt;               &lt;chr&gt;            &lt;dbl&gt;\n 1  71609 Ensuite …  367042 Belinda   East Region         Tampines          1.35\n 2  71896 B&B  Roo…  367042 Belinda   East Region         Tampines          1.35\n 3  71903 Room 2-n…  367042 Belinda   East Region         Tampines          1.35\n 4 275343 10min wa… 1439258 Kay       Central Region      Bukit Merah       1.29\n 5 275344 15 mins … 1439258 Kay       Central Region      Bukit Merah       1.29\n 6 289234 Booking …  367042 Belinda   East Region         Tampines          1.34\n 7 294281 5 mins w… 1521514 Elizabeth Central Region      Newton            1.31\n 8 324945 Comforta… 1439258 Kay       Central Region      Bukit Merah       1.29\n 9 330095 Relaxing… 1439258 Kay       Central Region      Bukit Merah       1.29\n10 344803 Budget s…  367042 Belinda   East Region         Tampines          1.35\n# ℹ 3,530 more rows\n# ℹ 11 more variables: longitude &lt;dbl&gt;, room_type &lt;chr&gt;, price &lt;dbl&gt;,\n#   minimum_nights &lt;dbl&gt;, number_of_reviews &lt;dbl&gt;, last_review &lt;date&gt;,\n#   reviews_per_month &lt;dbl&gt;, calculated_host_listings_count &lt;dbl&gt;,\n#   availability_365 &lt;dbl&gt;, number_of_reviews_ltm &lt;dbl&gt;, license &lt;chr&gt;"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.8.2-creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.8.2-creating-a-simple-feature-data-frame-from-an-aspatial-data-frame",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.8.2 Creating a simple feature data frame from an aspatial data frame",
    "text": "H1.8.2 Creating a simple feature data frame from an aspatial data frame\n\nlistings_sf &lt;- st_as_sf(listings, coords = c(\"longitude\", \"latitude\"), crs=4326) %&gt;%\n    st_transform(crs=3414)\n\nThings to learn from the arguments above:\n\ncoords argument requires you to provide the column name of the x-coordinates first then followed by the column name of the y-coordinates.\ncrs argument requires you to provide the coordinates system in epsg format. EPSG: 4326 is wgs84 Geographic Coordinate System and EPSG: 3414 is Singapore’s SVY21 Projected Coordinate System. You can search for other country’s epsg code by referring to epsg.io.\n%&gt;% is used to nest st_transform() to transform the newly created simple feature data frame into the svy21 projected coordinates system.\n\n\nglimpse(listings_sf)\n\nRows: 3,540\nColumns: 17\n$ id                             &lt;dbl&gt; 71609, 71896, 71903, 275343, 275344, 28…\n$ name                           &lt;chr&gt; \"Ensuite Room (Room 1 & 2) near EXPO\", …\n$ host_id                        &lt;dbl&gt; 367042, 367042, 367042, 1439258, 143925…\n$ host_name                      &lt;chr&gt; \"Belinda\", \"Belinda\", \"Belinda\", \"Kay\",…\n$ neighbourhood_group            &lt;chr&gt; \"East Region\", \"East Region\", \"East Reg…\n$ neighbourhood                  &lt;chr&gt; \"Tampines\", \"Tampines\", \"Tampines\", \"Bu…\n$ room_type                      &lt;chr&gt; \"Private room\", \"Private room\", \"Privat…\n$ price                          &lt;dbl&gt; NA, 80, 80, 50, 50, NA, 85, 65, 45, 54,…\n$ minimum_nights                 &lt;dbl&gt; 92, 92, 92, 180, 180, 92, 92, 180, 180,…\n$ number_of_reviews              &lt;dbl&gt; 19, 24, 46, 20, 16, 12, 131, 17, 5, 60,…\n$ last_review                    &lt;date&gt; 2020-01-17, 2019-10-13, 2020-01-09, 20…\n$ reviews_per_month              &lt;dbl&gt; 0.12, 0.15, 0.29, 0.15, 0.11, 0.08, 0.8…\n$ calculated_host_listings_count &lt;dbl&gt; 6, 6, 6, 49, 49, 6, 7, 49, 49, 6, 7, 7,…\n$ availability_365               &lt;dbl&gt; 89, 148, 90, 62, 0, 88, 365, 0, 0, 365,…\n$ number_of_reviews_ltm          &lt;dbl&gt; 0, 0, 0, 0, 2, 0, 0, 1, 1, 1, 0, 0, 0, …\n$ license                        &lt;chr&gt; NA, NA, NA, \"S0399\", \"S0399\", NA, NA, \"…\n$ geometry                       &lt;POINT [m]&gt; POINT (41972.5 36390.05), POINT (…"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.9.1-buffering",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.9.1-buffering",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.9.1 Buffering",
    "text": "H1.9.1 Buffering\nThe scenario:\nThe authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.\nThe solution:\nFirstly, st_buffer() of sf package is used to compute the 5-meter buffers around cycling paths.\n\nbuffer_cycling &lt;- st_buffer(cycling_paths, dist=5, nQuadSegs=30)\n\nThen, we calculate the area of the buffers:\n\nbuffer_cycling$AREA &lt;- st_area(buffer_cycling)\n\n…and take the sum of Base R to derive the total land needed.\n\nsum(buffer_cycling$AREA)\n\n2218855 [m^2]"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.9.2-point-in-polygon-count",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.9.2-point-in-polygon-count",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.9.2 Point-in-polygon count",
    "text": "H1.9.2 Point-in-polygon count\nThe scenario:\nA pre-school service group want to find out the numbers of pre-schools in each Planning Subzone.\nThe solution:\nThe code chunk below performs two operations at one go. Firstly, identify pre-schools located inside each Planning Subzone by using st_intersects(). Next, length() of Base R is used to calculate numbers of pre-schools that fall inside each planning subzone.\n\nmpsz_3414$`PreSch Count` &lt;- lengths(st_intersects(mpsz_3414, preschool_3414))\n\nsummary(mpsz_3414$`PreSch Count`)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n   0.00    0.00    4.00    7.09   10.00   72.00 \n\n\n\nWarning: Not to be confused by st_intersection().\n\ntop_n() from the dplyr package, for n = 1, is used to find the planning subzone with the greatest number of preschools:\n\ntop_n(mpsz_3414, 1, `PreSch Count`)\n\nSimple feature collection with 1 feature and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 39655.33 ymin: 35966 xmax: 42940.57 ymax: 38622.37\nProjected CRS: SVY21 / Singapore TM\n  OBJECTID SUBZONE_NO     SUBZONE_N SUBZONE_C CA_IND PLN_AREA_N PLN_AREA_C\n1      189          2 TAMPINES EAST    TMSZ02      N   TAMPINES         TM\n     REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR   Y_ADDR SHAPE_Leng\n1 EAST REGION       ER 21658EAAF84F4D8D 2014-12-05 41122.55 37392.39   10180.62\n  SHAPE_Area                       geometry PreSch Count\n1    4339824 MULTIPOLYGON (((42196.76 38...           72\n\n\n\nDIY: Calculate the density of pre-school by planning subzone.\n\nThe solution:\nFirst, use st_area() of the sf package to derive the area of each planning subzone:\n\nmpsz_3414$Area &lt;- mpsz_3414 %&gt;%\n  st_area()\n\nNext, mutate() of the dplyr package is used to compute the density by using the code chunk below.\n\nmpsz_3414 &lt;- mpsz_3414 %&gt;%\n  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.10.1-plotting-the-distribution-of-presch-density",
    "href": "HandsOn/Hands-on_Ex01/hands-on-1.html#h1.10.1-plotting-the-distribution-of-presch-density",
    "title": "H1: Geospatial Data Wrangling with R",
    "section": "H1.10.1 Plotting the distribution of PreSch Density",
    "text": "H1.10.1 Plotting the distribution of PreSch Density\n\nhist(mpsz_3414$`PreSch Density`)\n\n\n\n\n\n\n\n\n\nggplot(data=mpsz_3414, \n       aes(x= as.numeric(`PreSch Density`)))+\n  geom_histogram(bins=20, \n                 color=\"black\", \n                 fill=\"orange\") +\n  labs(title = \"Are preschools evenly distributed in Singapore?\",\n       subtitle= \"There are many planning sub-zones with a single preschool. On the other hand, \\nthere are two planning sub-zones with at least 20 preschools!\",\n      x = \"Pre-school density (per km^2)\",\n      y = \"Frequency\")"
  },
  {
    "objectID": "InClass/ICE1/in-class-1.html",
    "href": "InClass/ICE1/in-class-1.html",
    "title": "CE1: Geospatial Data Science",
    "section": "",
    "text": "CE1 Overview\nThe aim of this exercise is to practise loading simple featuresets (point, line, polygon, etc) with R.\n\n\nCE1.1"
  },
  {
    "objectID": "InClass/ICE1/data/MPSZ-2019.html",
    "href": "InClass/ICE1/data/MPSZ-2019.html",
    "title": "IS415 - Kendrick",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html",
    "href": "InClass/ICE2/in-class-2.html",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "",
    "text": "Create a subfolder called data in In-class_Ex02 folder\nDownload and load both the ESRI shapefile and kml file from Master Plan 2014 Subzone Boundary (Web) from the portal.\nWrite a code chunk to import Master Plan 2014 Subzone Boundary (Web) as SF simple features DataFrame.\n\n\npacman::p_load(sf, tmap, tidyverse, ggstatsplot)\n\nmp_subzone_14_shp &lt;- st_read(dsn=\"data/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nclass(mp_subzone_14_shp)\n\n[1] \"sf\"         \"data.frame\"\n\n#! eval:false\n# Doesn't work!\ntryCatch({mp_subzone_kml &lt;- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")}, error=function(e) {\n  print(e)\n  print(\"Cannot load!\")\n  })\n\n&lt;Rcpp::exception: Cannot open \"/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebKML.kml\"; The source could be corrupt or not supported. See `st_drivers()` for a list of supported formats.&gt;\n[1] \"Cannot load!\"\n\n# So we need to write our own KML file.\nst_write(mp_subzone_14_shp, \"data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml\", delete_dsn=TRUE)\n\nDeleting source `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting layer `WORKINGMasterPlan2014SubzoneBoundaryWebKML' to data source \n  `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n# delete_dsn replaces the file with our new one if its already exists"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.1-working-with-masterplan-2014-subzone-data",
    "href": "InClass/ICE2/in-class-2.html#ce2.1-working-with-masterplan-2014-subzone-data",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "",
    "text": "Create a subfolder called data in In-class_Ex02 folder\nDownload and load both the ESRI shapefile and kml file from Master Plan 2014 Subzone Boundary (Web) from the portal.\nWrite a code chunk to import Master Plan 2014 Subzone Boundary (Web) as SF simple features DataFrame.\n\n\npacman::p_load(sf, tmap, tidyverse, ggstatsplot)\n\nmp_subzone_14_shp &lt;- st_read(dsn=\"data/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nclass(mp_subzone_14_shp)\n\n[1] \"sf\"         \"data.frame\"\n\n#! eval:false\n# Doesn't work!\ntryCatch({mp_subzone_kml &lt;- st_read(\"data/MasterPlan2014SubzoneBoundaryWebKML.kml\")}, error=function(e) {\n  print(e)\n  print(\"Cannot load!\")\n  })\n\n&lt;Rcpp::exception: Cannot open \"/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2014SubzoneBoundaryWebKML.kml\"; The source could be corrupt or not supported. See `st_drivers()` for a list of supported formats.&gt;\n[1] \"Cannot load!\"\n\n# So we need to write our own KML file.\nst_write(mp_subzone_14_shp, \"data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml\", delete_dsn=TRUE)\n\nDeleting source `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting layer `WORKINGMasterPlan2014SubzoneBoundaryWebKML' to data source \n  `data/WORKINGMasterPlan2014SubzoneBoundaryWebKML.kml' using driver `KML'\nWriting 323 features with 15 fields and geometry type Multi Polygon.\n\n# delete_dsn replaces the file with our new one if its already exists"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.2-working-with-masterplan-2019-subzone-data",
    "href": "InClass/ICE2/in-class-2.html#ce2.2-working-with-masterplan-2019-subzone-data",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.2 Working with Masterplan 2019 Subzone Data",
    "text": "CE2.2 Working with Masterplan 2019 Subzone Data\n\nmp_subzone_19_shp &lt;- st_read(dsn=\"data/MPSZ-2019\", layer=\"MPSZ-2019\")\n\nReading layer `MPSZ-2019' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MPSZ-2019' \n  using driver `ESRI Shapefile'\nSimple feature collection with 332 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\n\nmp_subzone_19_kml &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/InClass/ICE2/data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY, XYZ\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.3-transforming-coordinate-data-from-wgs84-to-svy21",
    "href": "InClass/ICE2/in-class-2.html#ce2.3-transforming-coordinate-data-from-wgs84-to-svy21",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.3 Transforming coordinate data from WGS84 to SVY21",
    "text": "CE2.3 Transforming coordinate data from WGS84 to SVY21\n\nmp_subzone_19_shp &lt;- mp_subzone_19_shp %&gt;% st_transform(crs = 3414)\nst_crs(mp_subzone_19_shp)\n\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.4-working-with-population-data",
    "href": "InClass/ICE2/in-class-2.html#ce2.4-working-with-population-data",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.4 Working with Population Data",
    "text": "CE2.4 Working with Population Data\n\npopulation_2023 &lt;- read_csv(\"data/respopagesextod2023/respopagesextod2023.csv\")\n\nRows: 100928 Columns: 7\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (5): PA, SZ, AG, Sex, TOD\ndbl (2): Pop, Time\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nprint(\"Columns of population_2023\")\n\n[1] \"Columns of population_2023\"\n\ncolnames(population_2023)\n\n[1] \"PA\"   \"SZ\"   \"AG\"   \"Sex\"  \"TOD\"  \"Pop\"  \"Time\"\n\nprint(\"Head of population_2023\")\n\n[1] \"Head of population_2023\"\n\nhead(population_2023)\n\n# A tibble: 6 × 7\n  PA         SZ                     AG     Sex   TOD                   Pop  Time\n  &lt;chr&gt;      &lt;chr&gt;                  &lt;chr&gt;  &lt;chr&gt; &lt;chr&gt;               &lt;dbl&gt; &lt;dbl&gt;\n1 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 1- and 2-Room …     0  2023\n2 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 3-Room Flats        0  2023\n3 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 4-Room Flats       10  2023\n4 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HDB 5-Room and Exe…    30  2023\n5 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males HUDC Flats (exclud…     0  2023\n6 Ang Mo Kio Ang Mo Kio Town Centre 0_to_4 Males Condominiums and O…    40  2023"
  },
  {
    "objectID": "InClass/ICE2/data/MPSZ-2019/MPSZ-2019.html",
    "href": "InClass/ICE2/data/MPSZ-2019/MPSZ-2019.html",
    "title": "IS415 - Kendrick",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     dataset\n\n\n        0 0     false"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.5-group-data-by-planning-area-and-subzone",
    "href": "InClass/ICE2/in-class-2.html#ce2.5-group-data-by-planning-area-and-subzone",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.5 Group data by planning area and subzone",
    "text": "CE2.5 Group data by planning area and subzone\n\npopulation_2023_pivot &lt;- population_2023 %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP`=sum(`Pop`)) %&gt;%\n  ungroup() %&gt;%\n  pivot_wider(names_from=AG, values_from=POP)\n\n`summarise()` has grouped output by 'PA', 'SZ'. You can override using the\n`.groups` argument.\n\ncolnames(population_2023)\n\n[1] \"PA\"   \"SZ\"   \"AG\"   \"Sex\"  \"TOD\"  \"Pop\"  \"Time\"\n\n# Read the data structure carefully before proceeding!"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "",
    "text": "Notes for grading: For week 3, the requirement is to complete both chapters 4 and 5 in the R for Geospatial Data Science and Analytics course website. Both have been combined into a single webpage for brevity."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.1-overview",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.1-overview",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.1 Overview",
    "text": "H3.1 Overview\nSpatial Point Pattern Analysis serves to evaluate the pattern or distribution of a set of points on a map surface. These points serve many purposes, ranging from mapping events like crimes and disease onset (like John Snow’s map of the 1854 Broad Street cholera outbreak), or the locations of business services or facilities.\nUsing appropriate functions, this hands-on exercise aims to discover the spatial point patterns of a quintessential facility in 2020s Singapore - childcare centres. Specifically, we want to find out:\n\nif these are randomly distributed throughout the country, and;\nthe planning areas with the highest concentration of childcare centres."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.2-the-data",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.2-the-data",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.2 The data",
    "text": "H3.2 The data\nThe datasets to be used are:\n\nMP14_SUBZONE_WEB_PL, containing polygon features.\nCoastalOutline, a new dataset containing polygon features showing the boundaries of Singapore. It is provided by SLA in ESRI shapefile format.\n\nIn addition, our childcare centre data will, as always, be sourced from the Singapore government’s data lake at data.gov.sg. These will take the form of point feature data."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.3-installing-and-loading-r-packages",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.3-installing-and-loading-r-packages",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.3 Installing and Loading R packages",
    "text": "H3.3 Installing and Loading R packages\nAlong with the usual sf and tmap, three new packages will be used. They are:\n\nspatstat, which includes a wide range of useful functions for first and second order spatial point patterns analysis, and to derive the kernel density estimation (KDE) layer.\nraster reads, writes, manipulates, analyses and models (i.e. rasters) gridded spatial data.\nmaptools, which is for manipulating geographic data.\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.4-spatial-data-wrangling",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.4-spatial-data-wrangling",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.4 Spatial Data Wrangling",
    "text": "H3.4 Spatial Data Wrangling\n\nH3.4.1 Importing spatial data\nHere, we import the data we need and plot basic maps to get a basic sense of the spatial patterns we are dealing with.\n\nmpsz_sf &lt;- st_read(dsn=\"../data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP\", layer=\"MP14_SUBZONE_WEB_PL\")\n\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n\nsg_sf &lt;- st_read(dsn=\"../data/geospatial/CoastalOutline\", layer=\"CostalOutline\")\n\nReading layer `CostalOutline' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/CoastalOutline' \n  using driver `ESRI Shapefile'\nSimple feature collection with 60 features and 4 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 2663.926 ymin: 16357.98 xmax: 56047.79 ymax: 50244.03\nProjected CRS: SVY21\n\nchildcare_sf &lt;- st_read(\"../data/geospatial/child-care-services-geojson.geojson\") %&gt;% st_transform(crs=3414)\n\nReading layer `child-care-services-geojson' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial/child-care-services-geojson.geojson' \n  using driver `GeoJSON'\nSimple feature collection with 1545 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6824 ymin: 1.248403 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\ntm_shape(mpsz_sf) + tm_polygons() + tm_shape(childcare_sf) + tm_dots() + tm_layout(title = 'Childcare Centres')\n\n\n\n\n\n\n\n\nAlternatively, we can prepare a pin map as below.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare_sf) + tm_dots() + tm_layout(title = 'Childcare Centres')\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting"
  },
  {
    "objectID": "InClass/ICE2/in-class-2.html#ce2.6-data-wrangling",
    "href": "InClass/ICE2/in-class-2.html#ce2.6-data-wrangling",
    "title": "CE2: Working with Master Plan Planning Subzone Data",
    "section": "CE2.6 Data Wrangling",
    "text": "CE2.6 Data Wrangling\n\npopulation_2023_pivot &lt;- population_2023_pivot %&gt;%\n    # As young boys in Singapore serve 2 years of national service, the earliest age to be considered economically active should be 25.\n    mutate(`YOUNG` = rowSums(.[3:6]) + rowSums(.[14])) %&gt;%\n    # By 2026, the retirement age in Singapore will be raised to 64.\n    mutate(`ECONOMY ACTIVE` = rowSums(.[7:13]) + rowSums(.[15])) %&gt;%\n    mutate(`AGED` = rowSums(.[16:21])) %&gt;%\n    mutate(`TOTAL` = rowSums(.[3:21])) %&gt;%\n    mutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n    / `ECONOMY ACTIVE`) %&gt;%\n    # mutate(): Perform calculation or conversion\n    select(\n        `PA`, `SZ`, `YOUNG`,\n        `ECONOMY ACTIVE`, `AGED`,\n        `TOTAL`, `DEPENDENCY`\n    ) %&gt;% \n    mutate_at(.vars = vars(PA, SZ), .funs = list(toupper)) %&gt;%\n    filter(`ECONOMY ACTIVE` &gt; 0)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.5-geospatial-data-wrangling",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.5-geospatial-data-wrangling",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.5 Geospatial Data Wrangling",
    "text": "H3.5 Geospatial Data Wrangling\nSome geospatial analysis packages require that any input geospatial data be represented with sp’s Spatial* classes. This section introduces a way to convert simple feature data into the Spatial* class.\n\nH3.5.1 Converting sf data frames to Spatial* class\n\nchildcare &lt;- as_Spatial(childcare_sf)\nmpsz &lt;- as_Spatial(mpsz_sf)\nsg &lt;- as_Spatial(sg_sf)\n\nchildcare\n\nclass       : SpatialPointsDataFrame \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 2\nnames       :    Nameescription \nmin values  :   kml_1, &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;1, MARINA BOULEVARD, #B1 - 01, ONE MARINA BOULEVARD, SINGAPORE 018989&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;THE LITTLE SKOOL-HOUSE INTERNATIONAL PTE. LTD.&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;08F73931F4A691F4&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \nmax values  : kml_999,                  &lt;center&gt;&lt;table&gt;&lt;tr&gt;&lt;th colspan='2' align='center'&gt;&lt;em&gt;Attributes&lt;/em&gt;&lt;/th&gt;&lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSBLOCKHOUSENUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSBUILDINGNAME&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSPOSTALCODE&lt;/th&gt; &lt;td&gt;829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSSTREETNAME&lt;/th&gt; &lt;td&gt;200, PONGGOL SEVENTEENTH AVENUE, SINGAPORE 829646&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSTYPE&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;DESCRIPTION&lt;/th&gt; &lt;td&gt;Child Care Services&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;HYPERLINK&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;LANDXADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;LANDYADDRESSPOINT&lt;/th&gt; &lt;td&gt;0&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;NAME&lt;/th&gt; &lt;td&gt;RAFFLES KIDZ @ PUNGGOL PTE LTD&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;PHOTOURL&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;ADDRESSFLOORNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;INC_CRC&lt;/th&gt; &lt;td&gt;379D017BF244B0FA&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"\"&gt; &lt;th&gt;FMEL_UPD_D&lt;/th&gt; &lt;td&gt;20200826094036&lt;/td&gt; &lt;/tr&gt;&lt;tr bgcolor=\"#E3E3F3\"&gt; &lt;th&gt;ADDRESSUNITNUMBER&lt;/th&gt; &lt;td&gt;&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;&lt;/center&gt; \n\nmpsz\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 323 \nextent      : 2667.538, 56396.44, 15748.72, 50256.33  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 15\nnames       : OBJECTID, SUBZONE_NO, SUBZONE_N, SUBZONE_C, CA_IND, PLN_AREA_N, PLN_AREA_C,       REGION_N, REGION_C,          INC_CRC, FMEL_UPD_D,     X_ADDR,     Y_ADDR,    SHAPE_Leng,    SHAPE_Area \nmin values  :        1,          1, ADMIRALTY,    AMSZ01,      N, ANG MO KIO,         AM, CENTRAL REGION,       CR, 00F5E30B5C9B7AD8,      16409,  5092.8949,  19579.069, 871.554887798, 39437.9352703 \nmax values  :      323,         17,    YUNNAN,    YSSZ09,      Y,     YISHUN,         YS,    WEST REGION,       WR, FFCCF172717C2EAF,      16409, 50424.7923, 49552.7904, 68083.9364708,  69748298.792 \n\nsg\n\nclass       : SpatialPolygonsDataFrame \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \nvariables   : 4\nnames       : GDO_GID, MSLINK, MAPID,              COSTAL_NAM \nmin values  :       1,      1,     0,             ISLAND LINK \nmax values  :      60,     67,     0, SINGAPORE - MAIN ISLAND \n\n\n\n\nH3.5.2 Converting Spatial* into generic sp format\nspatstat requires the analytical data to be in ppp object form. There is no direct way to convert a Spatial* class into a ppp object. We need to convert it into a Spatial object first.\n\nchildcare_sp &lt;- as(childcare, \"SpatialPoints\")\nchildcare_sp\n\nclass       : SpatialPoints \nfeatures    : 1545 \nextent      : 11203.01, 45404.24, 25667.6, 49300.88  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \n\nsg_sp &lt;- as(sg, \"SpatialPolygons\")\nsg_sp\n\nclass       : SpatialPolygons \nfeatures    : 60 \nextent      : 2663.926, 56047.79, 16357.98, 50244.03  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +datum=WGS84 +units=m +no_defs \n\n\nOne major difference that can observed between a Spatial class object and generic sp object is the variables, names, min values and max values attributes, which are absent in the latter.\n\n\nH3.5.3 Converting generic sp format into ppp format\n\nchildcare_ppp &lt;- as.ppp(childcare_sf)\n\nWarning in as.ppp.sf(childcare_sf): only first attribute column is used for\nmarks\n\nchildcare_ppp\n\nMarked planar point pattern: 1545 points\nmarks are of storage type  'character'\nwindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n\nplot(childcare_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\nsummary(childcare_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 1.91145e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: rectangle = [11203.01, 45404.24] x [25667.6, 49300.88] units\n                    (34200 x 23630 units)\nWindow area = 808287000 square units"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.5.4-handling-duplicates",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.5.4-handling-duplicates",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.5.4 Handling duplicates",
    "text": "H3.5.4 Handling duplicates\nIn spatial point patterns analysis, as is data analytics in general, an issue of significance is the presence of duplicates. These need to be handled, since it is assumed that the points cannot be coincident.\nIn this section, we will:\n\nCheck for duplicated points in our childcare_ppp object;\nCount the number of coincidence points with the multiplicity() function;\nFind the number of locations with more than one point event;\nView the locations of duplicated point events on a map plot;\nPerform jittering, which will add a small perturbation to the duplicate points so that they do not occupy the exact same space.\n\n\n# Check for duplication\nany(duplicated(childcare_ppp))\n\n[1] FALSE\n\n# Find multiplicity\nmultiplicity &lt;- multiplicity(childcare_ppp)\nmultiplicity\n\n   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [704] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [741] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [778] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [815] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [852] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [889] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [926] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n [963] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1037] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1074] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1111] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1148] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1185] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1222] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1259] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1296] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1333] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1370] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1407] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1444] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1481] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n[1518] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n# Print the number of locations with more than 1 point event\nsum(multiplicity &gt; 1)\n\n[1] 0\n\n\nWe can conclude from the above that there are no duplicates in the data.\n\n# Find the locations of duplicate point events\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(childcare) +\n  tm_dots(alpha=0.4, \n          size=0.05)\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n# Perform jittering\nchildcare_ppp_jit &lt;- rjitter(childcare_ppp, \n                             retry=TRUE, \n                             nsim=1, \n                             drop=TRUE)\nany(duplicated(childcare_ppp_jit))\n\n[1] FALSE\n\n\nJittering is one of three ways to deal with missing geospatial data, the others being to make each point “unique” and then attach the duplicate attributes as marks (which would be more complex), or simply remove the data (which might lead to the loss of other important attributes).\n\nH3.5.5 Creating an owin object\nWhen analysing spatial point patterns, it is a good practice to confine the analysis within a geographical area, such as the national boundary of Singapore. In spatstat, owin is specifically designed to represent this polygonal region and can be defined and output as such:\n\nsg_owin &lt;- as.owin(sg_sf)\nplot(sg_owin)\n\n\n\n\n\n\n\nsummary(sg_owin)\n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401\n\n\n\n\nH3.5.6 Combining point events and owin objects\nFinally, we can extract our childcare centre “events” and combine them with the owin object as such:\n\nchildcare_SG_ppp = childcare_ppp[sg_owin]\nplot(childcare_SG_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 1545 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\nsummary(childcare_SG_ppp)\n\nMarked planar point pattern:  1545 points\nAverage intensity 2.129929e-06 points per square unit\n\nCoordinates are given to 11 decimal places\n\nmarks are of type 'character'\nSummary:\n   Length     Class      Mode \n     1545 character character \n\nWindow: polygonal boundary\n50 separate polygons (1 hole)\n                 vertices         area relative.area\npolygon 1 (hole)       30     -7081.18     -9.76e-06\npolygon 2              55     82537.90      1.14e-04\npolygon 3              90    415092.00      5.72e-04\npolygon 4              49     16698.60      2.30e-05\npolygon 5              38     24249.20      3.34e-05\npolygon 6             976  23344700.00      3.22e-02\npolygon 7             721   1927950.00      2.66e-03\npolygon 8            1992   9992170.00      1.38e-02\npolygon 9             330   1118960.00      1.54e-03\npolygon 10            175    925904.00      1.28e-03\npolygon 11            115    928394.00      1.28e-03\npolygon 12             24      6352.39      8.76e-06\npolygon 13            190    202489.00      2.79e-04\npolygon 14             37     10170.50      1.40e-05\npolygon 15             25     16622.70      2.29e-05\npolygon 16             10      2145.07      2.96e-06\npolygon 17             66     16184.10      2.23e-05\npolygon 18           5195 636837000.00      8.78e-01\npolygon 19             76    312332.00      4.31e-04\npolygon 20            627  31891300.00      4.40e-02\npolygon 21             20     32842.00      4.53e-05\npolygon 22             42     55831.70      7.70e-05\npolygon 23             67   1313540.00      1.81e-03\npolygon 24            734   4690930.00      6.47e-03\npolygon 25             16      3194.60      4.40e-06\npolygon 26             15      4872.96      6.72e-06\npolygon 27             15      4464.20      6.15e-06\npolygon 28             14      5466.74      7.54e-06\npolygon 29             37      5261.94      7.25e-06\npolygon 30            111    662927.00      9.14e-04\npolygon 31             69     56313.40      7.76e-05\npolygon 32            143    145139.00      2.00e-04\npolygon 33            397   2488210.00      3.43e-03\npolygon 34             90    115991.00      1.60e-04\npolygon 35             98     62682.90      8.64e-05\npolygon 36            165    338736.00      4.67e-04\npolygon 37            130     94046.50      1.30e-04\npolygon 38             93    430642.00      5.94e-04\npolygon 39             16      2010.46      2.77e-06\npolygon 40            415   3253840.00      4.49e-03\npolygon 41             30     10838.20      1.49e-05\npolygon 42             53     34400.30      4.74e-05\npolygon 43             26      8347.58      1.15e-05\npolygon 44             74     58223.40      8.03e-05\npolygon 45            327   2169210.00      2.99e-03\npolygon 46            177    467446.00      6.44e-04\npolygon 47             46    699702.00      9.65e-04\npolygon 48              6     16841.00      2.32e-05\npolygon 49             13     70087.30      9.66e-05\npolygon 50              4      9459.63      1.30e-05\nenclosing rectangle: [2663.93, 56047.79] x [16357.98, 50244.03] units\n                     (53380 x 33890 units)\nWindow area = 725376000 square units\nFraction of frame area: 0.401"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.6-first-order-spatial-point-patterns-analysis",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.6-first-order-spatial-point-patterns-analysis",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.6 First Order Spatial Point Patterns Analysis",
    "text": "H3.6 First Order Spatial Point Patterns Analysis\nSpatial point patterns analysis (SPPA) is the study of the spatial arrangements of points in (typically) 2D space. In this section, we will perform first order SPPA using spatstat. In particular, we will:\n\nderive the kernel density estimation (KDE) layer for visualising and exploring the intensity of point processes, and;\nperforming confirmatory spatial point patterns analysis using nearest neighbour statistics.\n\n\nH3.6.1 Kernel Density Estimation\nKernel density estimation (KDE) serves to compute the intensity of a point distribution. It has two general steps: first to compute the point intensity, followed by spatial interpolation using a kernel function (to create distributions like a uniform, triangular, quartic or gaussian distribution). In this exercise, we will mostly use the gaussian kernel.\n\nH3.6.1.1 Computing KDE using automatic bandwidth selection\n\nkde_childcareSG_bw &lt;- density(childcare_SG_ppp,\n                              sigma=bw.diggle,\n                              edge=TRUE,\n                            kernel=\"gaussian\")\nplot(kde_childcareSG_bw)\n\n\n\n\n\n\n\n\nAs we can see, the range of our density values is between 0 and 35*10-4, which is way too small for us. This is because svy21 uses metres by default, which means the density values to be computed will be the number of points per square metre.\nWe will therefore need to rescale our KDE values. Before we move on though, it is good to know that the following code chunk will retrieve us the bandwidth used to compute the KDE layer.\n\nbw &lt;- bw.diggle(childcare_SG_ppp)\nbw\n\n   sigma \n298.4095 \n\n\n\n\nH3.6.1.2 Rescaling KDE values\nTo rescale our KDE values, we can convert the unit of measurement into kilometres, and then re-run density() and plot the output map to see the result.\n\nchildcareSG_ppp.km &lt;- rescale.ppp(childcare_SG_ppp, 1000, \"km\")\nkde_childcareSG.bw &lt;- density(childcareSG_ppp.km, sigma=bw.diggle, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG.bw)\n\n\n\n\n\n\n\n\nWe now have a much more readable density map.\n\n\n\nH3.6.2 Working with different automatic bandwidth methods\nOther than bw.diggle(), bw.CvL(), bw.scott() and bw.ppl may be used to determine the bandwidth.\n\nbw.diggle(childcareSG_ppp.km)\n\n    sigma \n0.2984095 \n\nbw.scott(childcareSG_ppp.km)\n\n sigma.x  sigma.y \n2.224898 1.450966 \n\nbw.CvL(childcareSG_ppp.km)\n\n   sigma \n4.543278 \n\nbw.ppl(childcareSG_ppp.km)\n\n    sigma \n0.3897114 \n\n\nWe can also plot different maps to compare the output of different bandwidth methods.\n\nkde_childcareSG.ppl &lt;- density(childcareSG_ppp.km, \n                               sigma=bw.ppl, \n                               edge=TRUE,\n                               kernel=\"gaussian\")\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"bw.diggle\")\nplot(kde_childcareSG.ppl, main = \"bw.ppl\")\n\n\n\n\n\n\n\n\n\n\nH3.6.3 Working with different kernel methods\nAs mentioned, there are different kernel methods to give us different distributions. The code chunk below compares the results of three other kernel methods than gaussian, and computes additional kernel density estimations.\n\npar(mfrow=c(2,2))\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"gaussian\"), \n     main=\"Gaussian\")\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"epanechnikov\"), \n     main=\"Epanechnikov\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"quartic\"), \n     main=\"Quartic\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel\n\nplot(density(childcareSG_ppp.km, \n             sigma=bw.ppl, \n             edge=TRUE, \n             kernel=\"disc\"), \n     main=\"Disc\")\n\nWarning in density.ppp(childcareSG_ppp.km, sigma = bw.ppl, edge = TRUE, :\nBandwidth selection will be based on Gaussian kernel"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.7-fixed-and-adaptive-kde",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.7-fixed-and-adaptive-kde",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.7 Fixed and adaptive KDE",
    "text": "H3.7 Fixed and adaptive KDE\n\nH3.7.1 Computing KDE using fixed bandwidth\nAnother way to compute a KDE layer is by defining a fixed bandwidth. The code chunk below defines a bandwidth (sigma) of 600m (0.6km).\n\nkde_childcareSG_600 &lt;- density(childcareSG_ppp.km, sigma=0.6, edge=TRUE, kernel=\"gaussian\")\nplot(kde_childcareSG_600)\n\n\n\n\n\n\n\n\n\n\nH3.7.2 Computing KDE using adaptive bandwidth\nThe fixed bandwidth method is sensitive to skewed distributions of spatial point patterns (for instance, if a large number of points is clustered in one area, say an urban area, instead of another, like a rural area.) Adaptive bandwidth, using density.adaptive(), is one way to overcome this problem.\n\nkde_childcareSG_adaptive &lt;- adaptive.density(childcareSG_ppp.km, method=\"kernel\")\nplot(kde_childcareSG_adaptive)\n\n\n\n\n\n\n\n\nTwo KDE outputs may be compared as follows.\n\npar(mfrow=c(1,2))\nplot(kde_childcareSG.bw, main = \"Fixed bandwidth\")\nplot(kde_childcareSG_adaptive, main = \"Adaptive bandwidth\")\n\n\n\n\n\n\n\n\n\n\nH3.7.3 Converting KDE outputs into grid objects\nFor mapping purposes.\n\ngridded_kde_childcareSG_bw &lt;- as(kde_childcareSG.bw, \"SpatialGridDataFrame\")\nspplot(gridded_kde_childcareSG_bw)\n\n\n\n\n\n\n\n\n\n\nH3.7.3.1 Converting gridded output into RasterLayer\n\nkde_childcareSG_bw_raster &lt;- raster(kde_childcareSG.bw)\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n\nH3.7.3.2 Assigning projection system\nNotice that the crs attribute is NA, indicating that no coordinate system has been assigned to the raster. We will fix this by adding the WSY21 (Singapore) CRS to our RasterLayer.\n\nprojection(kde_childcareSG_bw_raster) &lt;- CRS(\"+init=EPSG:3414\")\nkde_childcareSG_bw_raster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 0.4170614, 0.2647348  (x, y)\nextent     : 2.663926, 56.04779, 16.35798, 50.24403  (xmin, xmax, ymin, ymax)\ncrs        : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : -8.476185e-15, 28.51831  (min, max)\n\n\n\n\nH3.7.4 Visualising output in tmap\nFinally, we can display the raster in cartographic quality using tmap.\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\nWith all the work we have done so far, a quick glance at the maps indicates a higher than usual density of childcare centres in the areas of Woodlands South and Punggol (the yellow patches in the above tmap display).\n\n\nH3.7.5 Comparing Spatial Point Patterns using KDE\nAnd now for the fun part - comparing KDEs between regions. In this section, we will compare the density estimations of childcare centres located in the planning areas of Choa Chu Kang, Jurong West, Punggol and Tampines.\n\nH3.7.5.1 Extracting and plotting study areas\n\n# First, extract the target planning areas\n\npunggol &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"PUNGGOL\")\ntampines &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"TAMPINES\")\nchoa_chu_kang &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"CHOA CHU KANG\")\njurong_west &lt;- mpsz_sf %&gt;%\n  filter(PLN_AREA_N == \"JURONG WEST\")\n\n# Then, visualise the areas with a plot\npar(mfrow=c(2,2))\nplot(punggol, main = \"Punggol\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(tampines, main = \"Tampines\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(choa_chu_kang, main = \"Choa Chu Kang\")\n\nWarning: plotting the first 10 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\nplot(jurong_west, main = \"Jurong West\")\n\nWarning: plotting the first 9 out of 15 attributes; use max.plot = 15 to plot\nall\n\n\n\n\n\n\n\n\n\n\n\nH3.7.5.2 Creating owin object\n\npg_owin &lt;- as.owin(punggol)\ntm_owin &lt;- as.owin(tampines)\nck_owin &lt;- as.owin(choa_chu_kang)\njw_owin &lt;- as.owin(jurong_west)\n\n\n\nH3.7.5.3 Combining childcare points and the study area\nThe code chunk below completes the following 3 tasks. First, we extract the childcare region for each of our four study areas. Next, we transform the unit of measurement from metres to kilometres. Finally, we can plot the locations of childcare centres within the four study areas.\n\nchildcare_pg_ppp &lt;- childcare_ppp_jit[pg_owin]\nchildcare_tm_ppp &lt;- childcare_ppp_jit[tm_owin]\nchildcare_ck_ppp &lt;- childcare_ppp_jit[ck_owin]\nchildcare_jw_ppp &lt;- childcare_ppp_jit[jw_owin]\n\nchildcare_pg_ppp.km &lt;- rescale.ppp(childcare_pg_ppp, 1000, \"km\")\nchildcare_tm_ppp.km &lt;- rescale.ppp(childcare_tm_ppp, 1000, \"km\")\nchildcare_ck_ppp.km &lt;- rescale.ppp(childcare_ck_ppp, 1000, \"km\")\nchildcare_jw_ppp.km &lt;- rescale.ppp(childcare_jw_ppp, 1000, \"km\")\n\npar(mfrow=c(2,2))\nplot(childcare_pg_ppp.km, main=\"Childcare centres in Punggol\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n\nplot(childcare_tm_ppp.km, main=\"Childcare centres in Tampines\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 89 symbols are shown in the symbol map\n\nplot(childcare_ck_ppp.km, main=\"Childcare centres in Choa Chu Kang\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 61 symbols are shown in the symbol map\n\nplot(childcare_jw_ppp.km, main=\"Childcare centres in Jurong West\")\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 88 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n\n\n\nH3.7.5.4 Computing KDE\nFinally, we can compute the KDE for each of the four planning areas with the bw.diggle method.\n\npar(mfrow=c(2,2))\nplot(density(childcare_pg_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Punggol\")\nplot(density(childcare_tm_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Tempines\")\nplot(density(childcare_ck_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Choa Chu Kang\")\nplot(density(childcare_jw_ppp.km, \n             sigma=bw.diggle, \n             edge=TRUE, \n             kernel=\"gaussian\"),\n     main=\"Jurong West\")\n\n\n\n\n\n\n\n\nThe KDE displays indicate Punggol as the planning area with the highest density of childcare centres."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.7.4-visualising-output-in-tmap",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.7.4-visualising-output-in-tmap",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.7.4 Visualising output in tmap",
    "text": "H3.7.4 Visualising output in tmap\nFinally, we can display the raster in cartographic quality using tmap.\n\ntm_shape(kde_childcareSG_bw_raster) + \n  tm_raster(\"layer\", palette = \"viridis\") +\n  tm_layout(legend.position = c(\"right\", \"bottom\"), frame = FALSE)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.7.5-comparing-spatial-point-patterns-using-kde",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.7.5-comparing-spatial-point-patterns-using-kde",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.7.5 Comparing Spatial Point Patterns using KDE",
    "text": "H3.7.5 Comparing Spatial Point Patterns using KDE\nAnd now for the fun part - comparing KDEs between regions. In this section, we will compare the density estimations of childcare centres located in the planning areas of Choa Chu Kang, Jurong West, Punggol and Tampines.\n\nH3.7.5.1 Extracting and plotting study areas"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.8-nearest-neighbour-analysis",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.8-nearest-neighbour-analysis",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.8 Nearest Neighbour Analysis",
    "text": "H3.8 Nearest Neighbour Analysis\nNearest neighbours are the direct distance from points to their nearest neighbours. The nearest neighbour index is expressed as the ratio of the observed mean distance to the expected mean distance. An index of less than 1 indicates the spatial point pattern exhibits clustering, while an index of greater than 1 indicates dispersion or competition. Finally, an index of exactly 1 indicates complete random distribution.\nIn this section, we will perform the Clark-Evans test on the hypothesis that the distribution of childcare services is random.\n\nH3.8.1 Testing spatial point patterns using the Clark-Evans Test\n\nclarkevans.test(childcare_SG_ppp,\n                correction=\"none\",\n                clipregion=\"sg_owin\",\n                alternative=c(\"clustered\"),\n                nsim=99)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_SG_ppp\nR = 0.55631, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nWith a p-value of 2.2 * 10-16, we can conclude that the spatial point patterns are not randomly distributed for the entire country, and are instead clustered. We can corroborate this test result with the map visualisations, that indicates that childcare centres are typically located in either the city centre or suburban towns.\nWe can run the test again on each of the sets pertaining to our four planning areas. For now, we will focus on Punggol and Jurong West - the former is a non-mature estate inhabited by more young families, while the latter is a mature estate where residents might have lived in for longer.\n\n\nH3.8.2 Clark-Evans Test: Punggol\n\nclarkevans.test(childcare_pg_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_pg_ppp\nR = 0.91633, p-value = 0.2112\nalternative hypothesis: two-sided\n\n\n\n\nH3.8.3 Clark-Evans Test: Jurong West\n\nclarkevans.test(childcare_jw_ppp,\n                correction=\"none\",\n                clipregion=NULL,\n                alternative=c(\"two.sided\"),\n                nsim=999)\n\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  childcare_jw_ppp\nR = 0.9087, p-value = 0.1013\nalternative hypothesis: two-sided"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.9-second-order-spatial-points-patterns-analysis",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.9-second-order-spatial-points-patterns-analysis",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.9 Second Order Spatial Points Patterns Analysis",
    "text": "H3.9 Second Order Spatial Points Patterns Analysis\nWhile first order SPPA measures how observations vary due to changes in the underlying property, second order SPPA deals with variations in observations due to the way they interact with one another. The methods used for second order SPPA include the F-, G-, K- and L-functions.\nIn this section, we will explore the F-, G- K- and L-functions by applying them on the childcare centre data for the planning areas of Choa Chu Kang in Western Singapore, and Tampines in the East."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.10-f-function",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.10-f-function",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.10 F-Function",
    "text": "H3.10 F-Function\nThe F-function estimates the empty space function \\(F(r)\\) from a point pattern in a window of arbitrary shape. It can be computed using Fest() of the spatstat package.\nFollowing that, a Monte Carlo simulation test can be performed using envelope(). We will perform both operations on the segments of the data representing\n\nH3.10.1 Computing F-function estimations\n\nH3.10.1.1 Choa Chu Kang\n\nF_function_Choa_Chu_Kang &lt;- Fest(childcare_ck_ppp)\nplot(F_function_Choa_Chu_Kang)\n\n\n\n\n\n\n\n\n\n\nH3.10.1.2 Tampines\n\nF_function_Tampines &lt;- Fest(childcare_tm_ppp, correction=\"best\")\nplot(F_function_Tampines)\n\n\n\n\n\n\n\n\n\n\n\nH3.10.2 Performing Complete Spatial Randomness Test\nTo confirm the observed spatial patterns above, we can conduct a Monte Carlo (hypothesis) test with envelope(). The hypothesis and test are as follows:\nH0 = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang/Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nH3.10.2.1 Choa Chu Kang\n\nF_CCK.csr &lt;- envelope(childcare_ck_ppp, Fest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(F_CCK.csr)\n\n\n\n\n\n\n\n\n\n\nH3.10.2.2 Tampines\n\nF_TM.csr &lt;- envelope(childcare_tm_ppp, Fest, correction=\"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(F_TM.csr)\n\n\n\n\n\n\n\n\nThe F-function for the Choa Chu Kang set is within the envelope, and that for the Tampines set is below the envelope. This indicates that indicating that the childcare centres in Choa Chu Kang exhibit complete spatial randomness (CSR), while the centres in Tampines are clustered."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.10.1-computing-f-function-estimation-for-choa-chu-kang-planning-area",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.10.1-computing-f-function-estimation-for-choa-chu-kang-planning-area",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.10.1 Computing F-function estimation for Choa Chu Kang planning area",
    "text": "H3.10.1 Computing F-function estimation for Choa Chu Kang planning area\n\nF_CCK = Fest(childcare_ck_ppp)\nplot(F_CCK)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.10.2-performing-complete-spatial-randomness-test",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.10.2-performing-complete-spatial-randomness-test",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.10.2 Performing Complete Spatial Randomness Test",
    "text": "H3.10.2 Performing Complete Spatial Randomness Test"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.11-g-function",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.11-g-function",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.11 G-Function",
    "text": "H3.11 G-Function\nThe G-function measures the distribution of distances from an arbitrary event to its nearest event.\nOnce again, a function from the spatstat package will be used, this time the Gest() function. Following that, we will perform another Monte Carlo simulation test with envelope().\n\nH3.11.1 Computing G-function estimations\n\nH3.11.1.1 Choa Chu Kang\n\nG_CK &lt;- Gest(childcare_ck_ppp, correction = \"border\")\nplot(G_CK, xlim=c(0,500))\n\n\n\n\n\n\n\n\n\n\nH3.11.1.2 Tampines\n\nG_tm &lt;- Gest(childcare_tm_ppp, correction = \"best\")\nplot(G_tm)\n\n\n\n\n\n\n\n\n\n\n\nH3.11.2 Performing Complete Spatial Randomness Test\nAs a reminder:\nH0 = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang/Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nH3.11.2.1 Choa Chu Kang\n\nG_CK.csr &lt;- envelope(childcare_ck_ppp, Gest, nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(G_CK.csr)\n\n\n\n\n\n\n\n\n\n\nH3.11.2.2 Tampines\n\nG_tm.csr &lt;- envelope(childcare_tm_ppp, Gest, correction = \"all\", nsim = 999)\n\nGenerating 999 simulations of CSR  ...\n1, 2, 3, ......10.........20.........30.........40.........50.........60..\n.......70.........80.........90.........100.........110.........120.........130\n.........140.........150.........160.........170.........180.........190........\n.200.........210.........220.........230.........240.........250.........260......\n...270.........280.........290.........300.........310.........320.........330....\n.....340.........350.........360.........370.........380.........390.........400..\n.......410.........420.........430.........440.........450.........460.........470\n.........480.........490.........500.........510.........520.........530........\n.540.........550.........560.........570.........580.........590.........600......\n...610.........620.........630.........640.........650.........660.........670....\n.....680.........690.........700.........710.........720.........730.........740..\n.......750.........760.........770.........780.........790.........800.........810\n.........820.........830.........840.........850.........860.........870........\n.880.........890.........900.........910.........920.........930.........940......\n...950.........960.........970.........980.........990........\n999.\n\nDone.\n\nplot(G_tm.csr)\n\n\n\n\n\n\n\n\nUnlike the function for Choa Chu Kang, which lies entirely within the envelopes, a small portion of the Tampines function falls above the envelopes. Once again, this indicates that the childcare centres of Choa Chu Kang exhibit CSR, while those in Tampines are clustered."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.12-k-function",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.12-k-function",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.12 K-Function",
    "text": "H3.12 K-Function\nThe K-function measures the number of events found up to a given distance of any particular event. For this exercise, the spatstat function to be used is the the Kest() function, and another Monte Carlo simulation test will be performed with envelope().\n\nH3.12.1 Computing K-function estimations\n\nH3.12.1.1 Choa Chu Kang\n\nK_ck = Kest(childcare_ck_ppp, correction = \"Ripley\")\nplot(K_ck, . -r ~ r, ylab= \"K(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\nH3.12.1.2 Tampines\n\nK_tm = Kest(childcare_tm_ppp, correction = \"Ripley\")\nplot(K_tm, . -r ~ r, \n     ylab= \"K(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n\nH3.12.2 Performing Complete Spatial Randomness Test\nAs a reminder:\nH0 = The distribution of childcare services at Choa Chu Kang/Tampines are randomly distributed.\nH1= The distribution of childcare services at Choa Chu Kang/Tampines are not randomly distributed.\nThe null hypothesis will be rejected if p-value is smaller than alpha value of 0.001.\n\nH3.12.2.1 Choa Chu Kang\n\nK_ck.csr &lt;- envelope(childcare_ck_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(K_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"K(d)-r\")\n\n\n\n\n\n\n\n\n\n\nH3.12.2.2 Tampines\n\nK_tm.csr &lt;- envelope(childcare_tm_ppp, Kest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(K_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"K(d)-r\", xlim=c(0,500))\n\n\n\n\n\n\n\n\nThe Choa Chu Kang K-function lies entirely inside the envelope, while much of that for Tampines lies above it. Once again, this shows that the Choa Chu Kang childcare centres are randomly distributed (CSR). The K-function indicates that the childcare centres in Tampines exhibit a significant regular pattern."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.13-l-function",
    "href": "HandsOn/Hands-on_Ex03/hands-on-3.html#h3.13-l-function",
    "title": "H3: Spatial Point Patterns Analysis",
    "section": "H3.13 L-Function",
    "text": "H3.13 L-Function\nThe L-function is a normalisation of the K-function so as to obtain a benchmark of zero.\nFor this exercise, the spatstat function to be used is the the Lest() function, and another Monte Carlo simulation test will be performed with envelope().\n\nH3.13.1 Computing L-function estimations\n\nH3.13.1.1 Choa Chu Kang\n\nL_ck = Lest(childcare_ck_ppp, correction = \"Ripley\")\nplot(L_ck, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\")\n\n\n\n\n\n\n\n\n\n\nH3.13.1.2 Tampines\n\nL_tm = Lest(childcare_tm_ppp, correction = \"Ripley\")\nplot(L_tm, . -r ~ r, \n     ylab= \"L(d)-r\", xlab = \"d(m)\", \n     xlim=c(0,1000))\n\n\n\n\n\n\n\n\n\n\n\nH3.13.2 Performing Complete Spatial Randomness Test\n\nH3.13.2.1 Choa Chu Kang\n\nL_ck.csr &lt;- envelope(childcare_ck_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(L_ck.csr, . - r ~ r, xlab=\"d\", ylab=\"L(d)-r\")\n\n\n\n\n\n\n\n\n\n\nH3.13.2.2 Tampines\n\nL_tm.csr &lt;- envelope(childcare_tm_ppp, Lest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(L_tm.csr, . - r ~ r, \n     xlab=\"d\", ylab=\"L(d)-r\", xlim=c(0,500))"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex04/hands-on-4.html",
    "href": "HandsOn/Hands-on_Ex04/hands-on-4.html",
    "title": "H4: Network Constrained Spatial Point Patterns Analysis (Incomplete)",
    "section": "",
    "text": "Network Constrained Spatial Point Patterns Analysis (NetSPPA) is a collection of spatial point patterns analysis (SPPA) methods special developed for analysing spatial point event occurs on or alongside a network. Examples of networks are road, train and river networks, while examples of spatial point events include locations of events like crime, or facilities like schools and parks.\nThis exercise will be on the spNetwork package, which serves to derive network kernel density estimation (NKDE), as well as to perform network G- and K-function analysis. Continuing on our theme of childcare centres, we will analyise the spatial distribution of childcare centres in the relatively young, northeastern planning area of Punggol. Two geospatial datasets in ESRI shapefile format will be used, namely:\n\nPunggol_St, a line featureset storing information on Punggol’s road network, and;\nPunggol_CC, a point featureset storing the locations of Punggol’s childcare centres."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.1-overview",
    "href": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.1-overview",
    "title": "H4: Network Constrained Spatial Point Patterns Analysis",
    "section": "",
    "text": "Network constrained Spatial Point Patterns Analysis (NetSPAA) is a collection of spatial point patterns analysis methods special developed for analysing spatial point event occurs on or alongside network. The spatial point event can be locations of traffic accident or childcare centre for example. The network, on the other hand can be a road network or river network."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.1-overview-and-data",
    "href": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.1-overview-and-data",
    "title": "H4: Network Constrained Spatial Point Patterns Analysis (Incomplete)",
    "section": "",
    "text": "Network Constrained Spatial Point Patterns Analysis (NetSPPA) is a collection of spatial point patterns analysis (SPPA) methods special developed for analysing spatial point event occurs on or alongside a network. Examples of networks are road, train and river networks, while examples of spatial point events include locations of events like crime, or facilities like schools and parks.\nThis exercise will be on the spNetwork package, which serves to derive network kernel density estimation (NKDE), as well as to perform network G- and K-function analysis. Continuing on our theme of childcare centres, we will analyise the spatial distribution of childcare centres in the relatively young, northeastern planning area of Punggol. Two geospatial datasets in ESRI shapefile format will be used, namely:\n\nPunggol_St, a line featureset storing information on Punggol’s road network, and;\nPunggol_CC, a point featureset storing the locations of Punggol’s childcare centres."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.2-installing-and-launching-r-packages",
    "href": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.2-installing-and-launching-r-packages",
    "title": "H4: Network Constrained Spatial Point Patterns Analysis (Incomplete)",
    "section": "H4.2 Installing and launching R packages",
    "text": "H4.2 Installing and launching R packages\nThe R packages to be used today are:\n\nspNetwork, for performing SPPA procedures like KDE and K-functions on the network. It can also be used to build spatial matrices to conduct any kind of traditional spatial analysis with spatial weights based on reticular distances.\nsf\ntmap, particularly the leaflet API, which helps us plot cartographic-quality static point pattern maps or interactive maps.\n\n\n# pacman::p_load(sf, spNetwork, tmap, tidyverse)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.3-data-import-preparation-and-visualisation",
    "href": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.3-data-import-preparation-and-visualisation",
    "title": "H4: Network Constrained Spatial Point Patterns Analysis (Incomplete)",
    "section": "H4.3 Data Import, Preparation and Visualisation",
    "text": "H4.3 Data Import, Preparation and Visualisation\nAs always, the first step is to import our geospatial datasets into RStudio as sf dataframes.\n\n# network &lt;- st_read(dsn=\".../data/geospatial\", \n#                    layer=\"Punggol_St\")\n# network\n# childcare &lt;- st_read(dsn=\".../data/geospatial\",\n#                      layer=\"Punggol_CC\")\n# childcare\n# plot(st_geometry(network))\n# plot(childcare, add=T, col='blue', pch=19)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.4-network-kde-analysis",
    "href": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.4-network-kde-analysis",
    "title": "H4: Network Constrained Spatial Point Patterns Analysis (Incomplete)",
    "section": "H4.4 Network KDE Analysis",
    "text": "H4.4 Network KDE Analysis\nNetwork KDE (NKDE) analysis can be performed by using appropriate functions from the spNetwork package.\n\nH4.4.1 Preparing lixel objects\nBefore finding the NKDE, we need to first cut our SpatialLines objects into lixels with a specified minimal distance. We can do this by calling lixelize_lines() as shown. In the code chunk below:\n\nThe length of a lixel, taken in with the lx_length parameter, is set to 700 metres, and;\nThe minimum length of a lixel, as defined in the mindist parameter, is 375 metres.\n\n\n# lixels &lt;- lixelize_lines(network, \n#                          700, \n#                          mindist = 375)\n\nAfter cutting, the length of the final lixel, if shorter than the minimum distance, is added to the previous lixel. If mindist is not defined (NULL), then it is maxdist / 10. Segments that are already shorter than the minimum distance are also not modified.\n\n\nH4.4.2 Generating line centre points\nNext, the code chunk below will generate a SpatialPointsDataFrame (i.e. samples) with line centre points. These points are located at the centre of the line based on its length.\n\n# samples &lt;- lines_center(lixels)\n\n\n\nH4.4.3 Performing NKDE\nWe are now ready to compute the NKDE by using the following code chunk.\n\n# densities &lt;- nkde(network, \n#                   events = childcare,\n#                   w = rep(1, nrow(childcare)),\n#                   samples = samples,\n#                   kernel_name = \"quartic\",\n#                   bw = 300, \n#                   div= \"bw\", \n#                   method = \"simple\", \n#                   digits = 1, \n#                   tol = 1,\n#                   grid_shape = c(1,1), \n#                   max_depth = 8,\n#                   agg = 5, \n#                   sparse = TRUE,\n#                   verbose = FALSE)\n\nSome interesting elements to note from the above code chunk include:\n\nThe quartic kernel is to be used for this NKDE exercise, and is passed into the kernel_name argument.\nThe simple keyword is passed into the method argument, which indicates it is to be used to find the NKDE.\n\nThree popular methods are currently supported by spNetwork - simple, discontinuous and continuous. simple uses network distances between events and sampling points, and the density is calculated over a linear unit (like metres) instead of an areal unit (like square metres). discontinuous “divides” the mass density of an event at intersections of lixels, while continuous divides the mass of the density at intersection but adjusts the density before the intersection to make the function continuous.\n\nH4.4.3.1 Visualising NKDE\nWe are now ready to visualise our computed NKDE values, but not before doing some preparatory work beforehand.\nFirst, we need to insert the computed density values (densities) into the density fields of our samples and lixels objects.\n\n# samples$density &lt;- densities\n# lixels$density &lt;- densities\n\nNext, we have to rescale our density values by kilometres, up from the current metres. As we’ve seen in a previous hands-on exercise, leaving the projection system in metres (the SVY21 default) leads to extremely small computed density values.\n\n# samples$density &lt;- samples$density * 1000\n# lixels$density &lt;- lixels$density * 1000\n\nFinally, we can draw our interactive and high-quality map visualisation.\n\n# tmap_mode('view')\n# tm_shape(lixels)+\n#   tm_lines(col=\"density\")+\n# tm_shape(childcare)+\n#   tm_dots()\n# tmap_mode('plot')\n\nThe interactive map above effectively distinguishes road segments with a relatively higher density of childcare centres (darker color) than those with a relatively lower density of childcare centres (lighter color)."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex05/hands-on-5.html",
    "href": "HandsOn/Hands-on_Ex05/hands-on-5.html",
    "title": "H5: Spatial Weights and Appliations",
    "section": "",
    "text": "This exercise is on computing spatial weights with R. For this exercise, the following datasets, set in Hunan Province, China, will be used:\n\nThe Hunan country boundary layer, in ESRI shapefile format, and;\nHunan_2012.csv, an aspatial dataset containing selected local development indicators for the area in 2012.\n\nIn addition to the usual sf, readr and dplyr packages, spatial weights and spatially lagged variables will be computed using appropriate spdep functions.\n\n\nAfter loading our packages, our data will be imported into the R environment.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\nhunan &lt;- st_read(dsn = \"../data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\ndev_2012 &lt;- read_csv(\"../data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nWe can now perform a left join of the Hunan 2012 development dataset on the map of Hunan province:\n\nhunan &lt;- left_join(hunan,dev_2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex05/hands-on-5.html#h5.1-overview-study-area-and-data",
    "href": "HandsOn/Hands-on_Ex05/hands-on-5.html#h5.1-overview-study-area-and-data",
    "title": "H5: Spatial Weights and Appliations",
    "section": "",
    "text": "This exercise is on computing spatial weights with R. For this exercise, the following datasets, set in Hunan Province, China, will be used:\n\nThe Hunan country boundary layer, in ESRI shapefile format, and;\nHunan_2012.csv, an aspatial dataset containing selected local development indicators for the area in 2012.\n\nIn addition to the usual sf, readr and dplyr packages, spatial weights and spatially lagged variables will be computed using appropriate spdep functions.\n\n\nAfter loading our packages, our data will be imported into the R environment.\n\npacman::p_load(sf, spdep, tmap, tidyverse, knitr)\nhunan &lt;- st_read(dsn = \"../data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\ndev_2012 &lt;- read_csv(\"../data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nWe can now perform a left join of the Hunan 2012 development dataset on the map of Hunan province:\n\nhunan &lt;- left_join(hunan,dev_2012)%&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.5-network-constrained-g--and-k-function-analysis",
    "href": "HandsOn/Hands-on_Ex04/hands-on-4.html#h4.5-network-constrained-g--and-k-function-analysis",
    "title": "H4: Network Constrained Spatial Point Patterns Analysis (Incomplete)",
    "section": "H4.5 Network-Constrained G- and K-Function Analysis",
    "text": "H4.5 Network-Constrained G- and K-Function Analysis\nThe last step is to perform a complete spatial randomness (CSR) test by running our data through a K-function. The function to be used is kfunctions(), once again from the spNetwork package.\nToday’s null hypothesis is defined as:\nH0: The observed spatial point events (i.e distribution of childcare centres) are uniformly distributed over a street network in Punggol.\nIn other words, our childcare centres are randomly and independently distributed over the street network. If this null hypothesis is rejected, we may infer that the childcare centres in Punggol are spatially dependent on each other; as a result, they may form non-random patterns.\n\n# kfun_childcare &lt;- kfunctions(network, \n#                              childcare,\n#                              start = 0, \n#                              end = 1000, \n#                              step = 50, \n#                              width = 50, \n#                              nsim = 50, \n#                              resolution = 50,\n#                              verbose = FALSE, \n#                              conf_int = 0.05)\n\nThe ten arguments required by kfunctions() are:\n\nlines: A SpatialLinesDataFrame with the sampling points.\npoints: A SpatialPointsDataFrame representing the points on the network. These points will be snapped on the network.\nstart: A double, the start value for evaluating the K- and G- functions.\nend: A double, the last value for evaluating the K- and G- functions.\nstep: A double, the jump between two evaluations of the K- and G- function.\nwidth: The width of each donut for the g-function.\nnsim: An integer indicating the number of Monte Carlo simulations required. In the above example, 50 simulations were performed, but it is usually preferred to have more simulations.\nresolution: When simulating random points on the network, selecting a resolution will reduce greatly the calculation time. When the resolution is NULL, the random points can occur everywhere on the graph. If a value is specified, the edges are split according to this value and the random points are selected vertices on the new network.\nconf_int: A double indicating the width confidence interval (default = 0.05).\n\nkfunctions() outputs:\n\nplotkA, a ggplot2 object representing the values of the K-function;\nplotgA, a ggplot2 object representing the values of the G-function;\nvaluesA, a DataFrame with the values used to build the plots.\n\nFinally, we can visualise the ggplot2 object of our K-function as follows.\n\n# kfun_childcare$plotk\n\nSince the observed values for the distance interval of 250-400m are below the envelop, we can infer that the childcare centres in Punggol resemble a regular pattern for that distance."
  },
  {
    "objectID": "HandsOn/Hands-on_Ex05/hands-on-5.html#h5.2-visualising-our-data",
    "href": "HandsOn/Hands-on_Ex05/hands-on-5.html#h5.2-visualising-our-data",
    "title": "H5: Spatial Weights and Appliations",
    "section": "H5.2 Visualising our Data",
    "text": "H5.2 Visualising our Data\nUsing qtm() and other tmap packages, we can now prepare a basemap and choropleth map showing the distribution of GDP per capita by region.\n\nbasemap &lt;- tm_shape(hunan) +\n  tm_polygons() +\n  tm_text(\"NAME_3\", size=0.5)\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\ntmap_arrange(basemap, gdppc, asp=1, ncol=2)"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex05/hands-on-5.html#h5.3-computing-contiguity-spatial-weights",
    "href": "HandsOn/Hands-on_Ex05/hands-on-5.html#h5.3-computing-contiguity-spatial-weights",
    "title": "H5: Spatial Weights and Appliations",
    "section": "H5.3 Computing Contiguity Spatial Weights",
    "text": "H5.3 Computing Contiguity Spatial Weights\nThe poly2nb() function of the spdep package may be used to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with continuous boundaries.\n\nH5.3.1 Creating QUEEN contiguity-based neighbours\n\nwm_q &lt;- poly2nb(hunan, queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\nFor each polygon in our polygon object, wm_q lists all neighbouring polygons. The following code chunk reveals the neighbours for the first polygon in the object. It is good to be reminded here that R is not a zero-index index, so all list indices start from 1.\n\nwm_q[[1]]\n\n[1]  2  3  4 57 85\n\n\nWe can also retrieve the county name with Polygon ID=1 as follows:\n\nhunan$County[1]\n\n[1] \"Anxiang\"\n\n\nOr the county names of the five counties bordering county ID 1:\n\nhunan$NAME_3[c(2,3,4,57,85)]\n\n[1] \"Hanshou\" \"Jinshi\"  \"Li\"      \"Nan\"     \"Taoyuan\"\n\n\nFinally, we can retrieve the GDP per capita of each of the five counties bordering county ID 1:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nThe complete weight matrix may be displayed using str(). It’s a long one.\n\nstr(wm_q)\n\nList of 88\n $ : int [1:5] 2 3 4 57 85\n $ : int [1:5] 1 57 58 78 85\n $ : int [1:4] 1 4 5 85\n $ : int [1:4] 1 3 5 6\n $ : int [1:4] 3 4 6 85\n $ : int [1:5] 4 5 69 75 85\n $ : int [1:4] 67 71 74 84\n $ : int [1:7] 9 46 47 56 78 80 86\n $ : int [1:6] 8 66 68 78 84 86\n $ : int [1:8] 16 17 19 20 22 70 72 73\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:3] 11 15 17\n $ : int [1:4] 13 14 17 83\n $ : int [1:5] 10 17 22 72 83\n $ : int [1:7] 10 11 14 15 16 72 83\n $ : int [1:5] 20 22 23 77 83\n $ : int [1:6] 10 20 21 73 74 86\n $ : int [1:7] 10 18 19 21 22 23 82\n $ : int [1:5] 19 20 35 82 86\n $ : int [1:5] 10 16 18 20 83\n $ : int [1:7] 18 20 38 41 77 79 82\n $ : int [1:5] 25 28 31 32 54\n $ : int [1:5] 24 28 31 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:3] 26 29 42\n $ : int [1:5] 24 25 33 49 54\n $ : int [1:3] 27 37 42\n $ : int 33\n $ : int [1:8] 24 25 32 36 39 40 56 81\n $ : int [1:8] 24 31 50 54 55 56 75 85\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 47 80 82 86\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:4] 29 42 43 44\n $ : int [1:4] 23 44 77 79\n $ : int [1:5] 31 40 42 43 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:7] 26 27 29 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:4] 37 38 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:3] 8 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:5] 32 48 52 54 55\n $ : int [1:3] 48 49 52\n $ : int [1:5] 48 49 50 51 54\n $ : int [1:3] 48 55 75\n $ : int [1:6] 24 28 32 49 50 52\n $ : int [1:5] 32 48 50 53 75\n $ : int [1:7] 8 31 32 36 78 80 85\n $ : int [1:6] 1 2 58 64 76 85\n $ : int [1:5] 2 57 68 76 78\n $ : int [1:4] 60 61 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:7] 12 59 60 62 63 77 87\n $ : int [1:3] 61 77 87\n $ : int [1:4] 12 61 77 83\n $ : int [1:2] 57 76\n $ : int 76\n $ : int [1:5] 9 67 68 76 84\n $ : int [1:4] 7 66 76 84\n $ : int [1:5] 9 58 66 76 78\n $ : int [1:3] 6 75 85\n $ : int [1:3] 10 72 73\n $ : int [1:3] 7 73 74\n $ : int [1:5] 10 11 16 17 70\n $ : int [1:5] 10 19 70 71 74\n $ : int [1:6] 7 19 71 73 84 86\n $ : int [1:6] 6 32 53 55 69 85\n $ : int [1:7] 57 58 64 65 66 67 68\n $ : int [1:7] 18 23 38 61 62 63 83\n $ : int [1:7] 2 8 9 56 58 68 85\n $ : int [1:7] 23 38 40 41 43 44 45\n $ : int [1:8] 8 34 35 36 41 45 47 56\n $ : int [1:6] 25 26 31 33 39 42\n $ : int [1:5] 20 21 23 35 41\n $ : int [1:9] 12 13 15 16 17 18 22 63 77\n $ : int [1:6] 7 9 66 67 74 86\n $ : int [1:11] 1 2 3 5 6 32 56 57 69 75 ...\n $ : int [1:9] 8 9 19 21 35 46 47 74 84\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language poly2nb(pl = hunan, queen = TRUE)\n - attr(*, \"type\")= chr \"queen\"\n - attr(*, \"sym\")= logi TRUE\n\n\n\n\nH5.3.2 Creating ROOK contiguity-based neighbours\nAside from the QUEEN contiguity weight matrix, we can also create ROOK contiguity based neighbours by setting the queen parameter to FALSE. The summary report below shows there are 88 area units in Hunan Province, with the most connected area unit having 10 neighbours.\n\nwm_r &lt;- poly2nb(hunan, queen=FALSE)\nsummary(wm_r)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 440 \nPercentage nonzero weights: 5.681818 \nAverage number of links: 5 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 10 \n 2  2 12 20 21 14 11  3  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 10 links\n\n\n\n\nH5.3.3 Visualising contiguity weights\nA connectivity graph takes a point and displays a line to each neighboring point. We are working with polygons at the moment, so we will need to get points in order to make our connectivity graphs. The most typically method for this will be polygon centroids, which we can calculate these in the sf package.\n\nH5.3.3.1 Getting Latitude and Longitude of Polygon Centroids\nWe will need points to associate with each polygon before we can make our connectivity graph. It will be a little more complicated than just running st_centroid on the sf object: us.bound. We need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid. We will be using map_dbl variation of map from the purrr package. For more documentation, check out map documentation\nTo get our longitude values we map the st_centroid function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\nWe can check the first few observations to see if things are formatted correctly.\n\nhead(coords)\n\n     longitude latitude\n[1,]  112.1531 29.44362\n[2,]  112.0372 28.86489\n[3,]  111.8917 29.47107\n[4,]  111.7031 29.74499\n[5,]  111.6138 29.49258\n[6,]  111.0341 29.79863\n\n\n\n\nH5.3.3.2 Plotting Queen contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\n\n\n\n\n\n\n\n\n\n\nH5.3.3.3 Plotting Rook contiguity based neighbours map\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nH5.3.3.4 Plotting both together\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"Queen Contiguity\")\nplot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= \"red\")\nplot(hunan$geometry, border=\"lightgrey\", main=\"Rook Contiguity\")\nplot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\n\nH5.4 Computing distance-based neighbours\nDistance-based weight matrices may be derived using dnearneigh(). This function identifies neighbours of region points by Euclidean distance with a lower bound of d1 and upper bound of d2, controlled by the bounds parameter. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix, and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.\n\n\nH5.4.1 Determining the cutoff distance\nTo determine the upper limit for the distance band, we can follow the steps below:\n\nReturn a matrix with the indices of points belonging to the set of the k nearest neighbours of each other using knearneigh();\nConvert the knn object returned by knearneigh() into a neighbours list of class nb with a list of integer vectors containing neighbour region number IDs using knn2nb()\nReturn the length of neighbour relationship edges using nbdists(), which returns in the units of the coordinates if one is projected, and in kilometres otherwise.\nRemove the list structure of the returned object using unlist().\n\n\n# coords &lt;- coordinates(hunan)\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\n\n\nH5.4.2 Computing fixed distance weight matrix using dnearneigh()\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat=TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\n\nNext, we use str() to display the content of our matrix.\n\nstr(wm_d62)\n\nList of 88\n $ : int [1:5] 3 4 5 57 64\n $ : int [1:4] 57 58 78 85\n $ : int [1:4] 1 4 5 57\n $ : int [1:3] 1 3 5\n $ : int [1:4] 1 3 4 85\n $ : int 69\n $ : int [1:2] 67 84\n $ : int [1:4] 9 46 47 78\n $ : int [1:4] 8 46 68 84\n $ : int [1:4] 16 22 70 72\n $ : int [1:3] 14 17 72\n $ : int [1:5] 13 60 61 63 83\n $ : int [1:4] 12 15 60 83\n $ : int [1:2] 11 17\n $ : int 13\n $ : int [1:4] 10 17 22 83\n $ : int [1:3] 11 14 16\n $ : int [1:3] 20 22 63\n $ : int [1:5] 20 21 73 74 82\n $ : int [1:5] 18 19 21 22 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:4] 10 16 18 20\n $ : int [1:3] 41 77 82\n $ : int [1:4] 25 28 31 54\n $ : int [1:4] 24 28 33 81\n $ : int [1:4] 27 33 42 81\n $ : int [1:2] 26 29\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:2] 27 37\n $ : int 33\n $ : int [1:2] 24 36\n $ : int 50\n $ : int [1:5] 25 26 28 30 81\n $ : int [1:3] 36 45 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:5] 31 34 45 56 80\n $ : int [1:2] 29 42\n $ : int [1:3] 44 77 79\n $ : int [1:4] 40 42 43 81\n $ : int [1:3] 39 45 79\n $ : int [1:5] 23 35 45 79 82\n $ : int [1:5] 26 37 39 43 81\n $ : int [1:3] 39 42 44\n $ : int [1:2] 38 43\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:5] 8 9 35 47 86\n $ : int [1:5] 8 35 46 80 86\n $ : int [1:5] 50 51 52 53 55\n $ : int [1:4] 28 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:4] 48 49 50 52\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:2] 48 55\n $ : int [1:5] 24 28 49 50 52\n $ : int [1:4] 48 50 53 75\n $ : int 36\n $ : int [1:5] 1 2 3 58 64\n $ : int [1:5] 2 57 64 66 68\n $ : int [1:3] 60 87 88\n $ : int [1:4] 12 13 59 61\n $ : int [1:5] 12 60 62 63 87\n $ : int [1:4] 61 63 77 87\n $ : int [1:5] 12 18 61 62 83\n $ : int [1:4] 1 57 58 76\n $ : int 76\n $ : int [1:5] 58 67 68 76 84\n $ : int [1:2] 7 66\n $ : int [1:4] 9 58 66 84\n $ : int [1:2] 6 75\n $ : int [1:3] 10 72 73\n $ : int [1:2] 73 74\n $ : int [1:3] 10 11 70\n $ : int [1:4] 19 70 71 74\n $ : int [1:5] 19 21 71 73 86\n $ : int [1:2] 55 69\n $ : int [1:3] 64 65 66\n $ : int [1:3] 23 38 62\n $ : int [1:2] 2 8\n $ : int [1:4] 38 40 41 45\n $ : int [1:5] 34 35 36 45 47\n $ : int [1:5] 25 26 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:4] 12 13 16 63\n $ : int [1:4] 7 9 66 68\n $ : int [1:2] 2 5\n $ : int [1:4] 21 46 47 74\n $ : int [1:4] 59 61 62 88\n $ : int [1:2] 59 87\n - attr(*, \"class\")= chr \"nb\"\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language dnearneigh(x = coords, d1 = 0, d2 = 62, longlat = TRUE)\n - attr(*, \"dnn\")= num [1:2] 0 62\n - attr(*, \"bounds\")= chr [1:2] \"GE\" \"LE\"\n - attr(*, \"nbtype\")= chr \"distance\"\n - attr(*, \"sym\")= logi TRUE\n\n\nWe can also display the weight matrix in a table form by combining table() and card(), from spdep.\n\ntable(hunan$County, card(wm_d62))\n\n               \n                1 2 3 4 5 6\n  Anhua         1 0 0 0 0 0\n  Anren         0 0 0 1 0 0\n  Anxiang       0 0 0 0 1 0\n  Baojing       0 0 0 0 1 0\n  Chaling       0 0 1 0 0 0\n  Changning     0 0 1 0 0 0\n  Changsha      0 0 0 1 0 0\n  Chengbu       0 1 0 0 0 0\n  Chenxi        0 0 0 1 0 0\n  Cili          0 1 0 0 0 0\n  Dao           0 0 0 1 0 0\n  Dongan        0 0 1 0 0 0\n  Dongkou       0 0 0 1 0 0\n  Fenghuang     0 0 0 1 0 0\n  Guidong       0 0 1 0 0 0\n  Guiyang       0 0 0 1 0 0\n  Guzhang       0 0 0 0 0 1\n  Hanshou       0 0 0 1 0 0\n  Hengdong      0 0 0 0 1 0\n  Hengnan       0 0 0 0 1 0\n  Hengshan      0 0 0 0 0 1\n  Hengyang      0 0 0 0 0 1\n  Hongjiang     0 0 0 0 1 0\n  Huarong       0 0 0 1 0 0\n  Huayuan       0 0 0 1 0 0\n  Huitong       0 0 0 1 0 0\n  Jiahe         0 0 0 0 1 0\n  Jianghua      0 0 1 0 0 0\n  Jiangyong     0 1 0 0 0 0\n  Jingzhou      0 1 0 0 0 0\n  Jinshi        0 0 0 1 0 0\n  Jishou        0 0 0 0 0 1\n  Lanshan       0 0 0 1 0 0\n  Leiyang       0 0 0 1 0 0\n  Lengshuijiang 0 0 1 0 0 0\n  Li            0 0 1 0 0 0\n  Lianyuan      0 0 0 0 1 0\n  Liling        0 1 0 0 0 0\n  Linli         0 0 0 1 0 0\n  Linwu         0 0 0 1 0 0\n  Linxiang      1 0 0 0 0 0\n  Liuyang       0 1 0 0 0 0\n  Longhui       0 0 1 0 0 0\n  Longshan      0 1 0 0 0 0\n  Luxi          0 0 0 0 1 0\n  Mayang        0 0 0 0 0 1\n  Miluo         0 0 0 0 1 0\n  Nan           0 0 0 0 1 0\n  Ningxiang     0 0 0 1 0 0\n  Ningyuan      0 0 0 0 1 0\n  Pingjiang     0 1 0 0 0 0\n  Qidong        0 0 1 0 0 0\n  Qiyang        0 0 1 0 0 0\n  Rucheng       0 1 0 0 0 0\n  Sangzhi       0 1 0 0 0 0\n  Shaodong      0 0 0 0 1 0\n  Shaoshan      0 0 0 0 1 0\n  Shaoyang      0 0 0 1 0 0\n  Shimen        1 0 0 0 0 0\n  Shuangfeng    0 0 0 0 0 1\n  Shuangpai     0 0 0 1 0 0\n  Suining       0 0 0 0 1 0\n  Taojiang      0 1 0 0 0 0\n  Taoyuan       0 1 0 0 0 0\n  Tongdao       0 1 0 0 0 0\n  Wangcheng     0 0 0 1 0 0\n  Wugang        0 0 1 0 0 0\n  Xiangtan      0 0 0 1 0 0\n  Xiangxiang    0 0 0 0 1 0\n  Xiangyin      0 0 0 1 0 0\n  Xinhua        0 0 0 0 1 0\n  Xinhuang      1 0 0 0 0 0\n  Xinning       0 1 0 0 0 0\n  Xinshao       0 0 0 0 0 1\n  Xintian       0 0 0 0 1 0\n  Xupu          0 1 0 0 0 0\n  Yanling       0 0 1 0 0 0\n  Yizhang       1 0 0 0 0 0\n  Yongshun      0 0 0 1 0 0\n  Yongxing      0 0 0 1 0 0\n  You           0 0 0 1 0 0\n  Yuanjiang     0 0 0 0 1 0\n  Yuanling      1 0 0 0 0 0\n  Yueyang       0 0 1 0 0 0\n  Zhijiang      0 0 0 0 1 0\n  Zhongfang     0 0 0 1 0 0\n  Zhuzhou       0 0 0 0 1 0\n  Zixing        0 0 1 0 0 0\n\nn_comp &lt;- n.comp.nb(wm_d62)\nn_comp$nc\n\n[1] 1\n\ntable(n_comp$comp.id)\n\n\n 1 \n88 \n\n\n\nH5.4.2.1 Plotting fixed distance weight matrix\nA weight matrix can now be plotted as below:\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(wm_d62, coords, add=TRUE)\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\n\n\n\n\n\n\n\n\nThe red lines show links of first nearest neighbours, while the black lines show the links of neighbours within the cutoff distance of 62km.\nAlternatively, we can plot both of these next to each other as below:\n\npar(mfrow=c(1,2))\nplot(hunan$geometry, border=\"lightgrey\", main=\"1st nearest neighbours\")\nplot(k1, coords, add=TRUE, col=\"red\", length=0.08)\nplot(hunan$geometry, border=\"lightgrey\", main=\"Distance link\")\nplot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)\n\n\n\n\n\n\n\n\n\n\n\nH5.4.3 Computing distance matrix\nA key characteristic involving fixed distance weight matrices is that more densly-populated areas (usually urban areas) tend to have more neighbours than their less densly-populated counterparts. Yet, having many neighbours smoothes the neighbour relationship across more neighbours. It is possible to control the number of neighbours directly using K-nearest neighbours, by either accepting asymmetric neighbours or imposing symmetry as shown below.\n\nknn6 &lt;- knn2nb(knearneigh(coords, k=6))\nknn6\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 528 \nPercentage nonzero weights: 6.818182 \nAverage number of links: 6 \nNon-symmetric neighbours list\n\nstr(knn6)\n\nList of 88\n $ : int [1:6] 2 3 4 5 57 64\n $ : int [1:6] 1 3 57 58 78 85\n $ : int [1:6] 1 2 4 5 57 85\n $ : int [1:6] 1 3 5 6 69 85\n $ : int [1:6] 1 3 4 6 69 85\n $ : int [1:6] 3 4 5 69 75 85\n $ : int [1:6] 9 66 67 71 74 84\n $ : int [1:6] 9 46 47 78 80 86\n $ : int [1:6] 8 46 66 68 84 86\n $ : int [1:6] 16 19 22 70 72 73\n $ : int [1:6] 10 14 16 17 70 72\n $ : int [1:6] 13 15 60 61 63 83\n $ : int [1:6] 12 15 60 61 63 83\n $ : int [1:6] 11 15 16 17 72 83\n $ : int [1:6] 12 13 14 17 60 83\n $ : int [1:6] 10 11 17 22 72 83\n $ : int [1:6] 10 11 14 16 72 83\n $ : int [1:6] 20 22 23 63 77 83\n $ : int [1:6] 10 20 21 73 74 82\n $ : int [1:6] 18 19 21 22 23 82\n $ : int [1:6] 19 20 35 74 82 86\n $ : int [1:6] 10 16 18 19 20 83\n $ : int [1:6] 18 20 41 77 79 82\n $ : int [1:6] 25 28 31 52 54 81\n $ : int [1:6] 24 28 31 33 54 81\n $ : int [1:6] 25 27 29 33 42 81\n $ : int [1:6] 26 29 30 37 42 81\n $ : int [1:6] 24 25 33 49 52 54\n $ : int [1:6] 26 27 37 42 43 81\n $ : int [1:6] 26 27 28 33 49 81\n $ : int [1:6] 24 25 36 39 40 54\n $ : int [1:6] 24 31 50 54 55 56\n $ : int [1:6] 25 26 28 30 49 81\n $ : int [1:6] 36 40 41 45 56 80\n $ : int [1:6] 21 41 46 47 80 82\n $ : int [1:6] 31 34 40 45 56 80\n $ : int [1:6] 26 27 29 42 43 44\n $ : int [1:6] 23 43 44 62 77 79\n $ : int [1:6] 25 40 42 43 44 81\n $ : int [1:6] 31 36 39 43 45 79\n $ : int [1:6] 23 35 45 79 80 82\n $ : int [1:6] 26 27 37 39 43 81\n $ : int [1:6] 37 39 40 42 44 79\n $ : int [1:6] 37 38 39 42 43 79\n $ : int [1:6] 34 36 40 41 79 80\n $ : int [1:6] 8 9 35 47 78 86\n $ : int [1:6] 8 21 35 46 80 86\n $ : int [1:6] 49 50 51 52 53 55\n $ : int [1:6] 28 33 48 51 52 54\n $ : int [1:6] 32 48 51 52 54 55\n $ : int [1:6] 28 48 49 50 52 54\n $ : int [1:6] 28 48 49 50 51 54\n $ : int [1:6] 48 50 51 52 55 75\n $ : int [1:6] 24 28 49 50 51 52\n $ : int [1:6] 32 48 50 52 53 75\n $ : int [1:6] 32 34 36 78 80 85\n $ : int [1:6] 1 2 3 58 64 68\n $ : int [1:6] 2 57 64 66 68 78\n $ : int [1:6] 12 13 60 61 87 88\n $ : int [1:6] 12 13 59 61 63 87\n $ : int [1:6] 12 13 60 62 63 87\n $ : int [1:6] 12 38 61 63 77 87\n $ : int [1:6] 12 18 60 61 62 83\n $ : int [1:6] 1 3 57 58 68 76\n $ : int [1:6] 58 64 66 67 68 76\n $ : int [1:6] 9 58 67 68 76 84\n $ : int [1:6] 7 65 66 68 76 84\n $ : int [1:6] 9 57 58 66 78 84\n $ : int [1:6] 4 5 6 32 75 85\n $ : int [1:6] 10 16 19 22 72 73\n $ : int [1:6] 7 19 73 74 84 86\n $ : int [1:6] 10 11 14 16 17 70\n $ : int [1:6] 10 19 21 70 71 74\n $ : int [1:6] 19 21 71 73 84 86\n $ : int [1:6] 6 32 50 53 55 69\n $ : int [1:6] 58 64 65 66 67 68\n $ : int [1:6] 18 23 38 61 62 63\n $ : int [1:6] 2 8 9 46 58 68\n $ : int [1:6] 38 40 41 43 44 45\n $ : int [1:6] 34 35 36 41 45 47\n $ : int [1:6] 25 26 28 33 39 42\n $ : int [1:6] 19 20 21 23 35 41\n $ : int [1:6] 12 13 15 16 22 63\n $ : int [1:6] 7 9 66 68 71 74\n $ : int [1:6] 2 3 4 5 56 69\n $ : int [1:6] 8 9 21 46 47 74\n $ : int [1:6] 59 60 61 62 63 88\n $ : int [1:6] 59 60 61 62 63 87\n - attr(*, \"region.id\")= chr [1:88] \"1\" \"2\" \"3\" \"4\" ...\n - attr(*, \"call\")= language knearneigh(x = coords, k = 6)\n - attr(*, \"sym\")= logi FALSE\n - attr(*, \"type\")= chr \"knn\"\n - attr(*, \"knn-k\")= num 6\n - attr(*, \"class\")= chr \"nb\"\n\n\n\n\nH5.4.3.1 Plotting distance-based neighbours\n\nplot(hunan$geometry, border=\"lightgrey\")\nplot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = \"red\")\n\n\n\n\n\n\n\n\n\n\nH5.5 Weights based on IDW\nThis section serves to derive a spatial weight matrix based on the inversed distance method.\nFirst, we compute the distance between areas using nbdists().\n\ndist &lt;- nbdists(wm_q, coords, longlat = TRUE)\nids &lt;- lapply(dist, function(x) 1/(x))\nids\n\n[[1]]\n[1] 0.01535405 0.03916350 0.01820896 0.02807922 0.01145113\n\n[[2]]\n[1] 0.01535405 0.01764308 0.01925924 0.02323898 0.01719350\n\n[[3]]\n[1] 0.03916350 0.02822040 0.03695795 0.01395765\n\n[[4]]\n[1] 0.01820896 0.02822040 0.03414741 0.01539065\n\n[[5]]\n[1] 0.03695795 0.03414741 0.01524598 0.01618354\n\n[[6]]\n[1] 0.015390649 0.015245977 0.021748129 0.011883901 0.009810297\n\n[[7]]\n[1] 0.01708612 0.01473997 0.01150924 0.01872915\n\n[[8]]\n[1] 0.02022144 0.03453056 0.02529256 0.01036340 0.02284457 0.01500600 0.01515314\n\n[[9]]\n[1] 0.02022144 0.01574888 0.02109502 0.01508028 0.02902705 0.01502980\n\n[[10]]\n[1] 0.02281552 0.01387777 0.01538326 0.01346650 0.02100510 0.02631658 0.01874863\n[8] 0.01500046\n\n[[11]]\n[1] 0.01882869 0.02243492 0.02247473\n\n[[12]]\n[1] 0.02779227 0.02419652 0.02333385 0.02986130 0.02335429\n\n[[13]]\n[1] 0.02779227 0.02650020 0.02670323 0.01714243\n\n[[14]]\n[1] 0.01882869 0.01233868 0.02098555\n\n[[15]]\n[1] 0.02650020 0.01233868 0.01096284 0.01562226\n\n[[16]]\n[1] 0.02281552 0.02466962 0.02765018 0.01476814 0.01671430\n\n[[17]]\n[1] 0.01387777 0.02243492 0.02098555 0.01096284 0.02466962 0.01593341 0.01437996\n\n[[18]]\n[1] 0.02039779 0.02032767 0.01481665 0.01473691 0.01459380\n\n[[19]]\n[1] 0.01538326 0.01926323 0.02668415 0.02140253 0.01613589 0.01412874\n\n[[20]]\n[1] 0.01346650 0.02039779 0.01926323 0.01723025 0.02153130 0.01469240 0.02327034\n\n[[21]]\n[1] 0.02668415 0.01723025 0.01766299 0.02644986 0.02163800\n\n[[22]]\n[1] 0.02100510 0.02765018 0.02032767 0.02153130 0.01489296\n\n[[23]]\n[1] 0.01481665 0.01469240 0.01401432 0.02246233 0.01880425 0.01530458 0.01849605\n\n[[24]]\n[1] 0.02354598 0.01837201 0.02607264 0.01220154 0.02514180\n\n[[25]]\n[1] 0.02354598 0.02188032 0.01577283 0.01949232 0.02947957\n\n[[26]]\n[1] 0.02155798 0.01745522 0.02212108 0.02220532\n\n[[27]]\n[1] 0.02155798 0.02490625 0.01562326\n\n[[28]]\n[1] 0.01837201 0.02188032 0.02229549 0.03076171 0.02039506\n\n[[29]]\n[1] 0.02490625 0.01686587 0.01395022\n\n[[30]]\n[1] 0.02090587\n\n[[31]]\n[1] 0.02607264 0.01577283 0.01219005 0.01724850 0.01229012 0.01609781 0.01139438\n[8] 0.01150130\n\n[[32]]\n[1] 0.01220154 0.01219005 0.01712515 0.01340413 0.01280928 0.01198216 0.01053374\n[8] 0.01065655\n\n[[33]]\n[1] 0.01949232 0.01745522 0.02229549 0.02090587 0.01979045\n\n[[34]]\n[1] 0.03113041 0.03589551 0.02882915\n\n[[35]]\n[1] 0.01766299 0.02185795 0.02616766 0.02111721 0.02108253 0.01509020\n\n[[36]]\n[1] 0.01724850 0.03113041 0.01571707 0.01860991 0.02073549 0.01680129\n\n[[37]]\n[1] 0.01686587 0.02234793 0.01510990 0.01550676\n\n[[38]]\n[1] 0.01401432 0.02407426 0.02276151 0.01719415\n\n[[39]]\n[1] 0.01229012 0.02172543 0.01711924 0.02629732 0.01896385\n\n[[40]]\n[1] 0.01609781 0.01571707 0.02172543 0.01506473 0.01987922 0.01894207\n\n[[41]]\n[1] 0.02246233 0.02185795 0.02205991 0.01912542 0.01601083 0.01742892\n\n[[42]]\n[1] 0.02212108 0.01562326 0.01395022 0.02234793 0.01711924 0.01836831 0.01683518\n\n[[43]]\n[1] 0.01510990 0.02629732 0.01506473 0.01836831 0.03112027 0.01530782\n\n[[44]]\n[1] 0.01550676 0.02407426 0.03112027 0.01486508\n\n[[45]]\n[1] 0.03589551 0.01860991 0.01987922 0.02205991 0.02107101 0.01982700\n\n[[46]]\n[1] 0.03453056 0.04033752 0.02689769\n\n[[47]]\n[1] 0.02529256 0.02616766 0.04033752 0.01949145 0.02181458\n\n[[48]]\n[1] 0.02313819 0.03370576 0.02289485 0.01630057 0.01818085\n\n[[49]]\n[1] 0.03076171 0.02138091 0.02394529 0.01990000\n\n[[50]]\n[1] 0.01712515 0.02313819 0.02551427 0.02051530 0.02187179\n\n[[51]]\n[1] 0.03370576 0.02138091 0.02873854\n\n[[52]]\n[1] 0.02289485 0.02394529 0.02551427 0.02873854 0.03516672\n\n[[53]]\n[1] 0.01630057 0.01979945 0.01253977\n\n[[54]]\n[1] 0.02514180 0.02039506 0.01340413 0.01990000 0.02051530 0.03516672\n\n[[55]]\n[1] 0.01280928 0.01818085 0.02187179 0.01979945 0.01882298\n\n[[56]]\n[1] 0.01036340 0.01139438 0.01198216 0.02073549 0.01214479 0.01362855 0.01341697\n\n[[57]]\n[1] 0.028079221 0.017643082 0.031423501 0.029114131 0.013520292 0.009903702\n\n[[58]]\n[1] 0.01925924 0.03142350 0.02722997 0.01434859 0.01567192\n\n[[59]]\n[1] 0.01696711 0.01265572 0.01667105 0.01785036\n\n[[60]]\n[1] 0.02419652 0.02670323 0.01696711 0.02343040\n\n[[61]]\n[1] 0.02333385 0.01265572 0.02343040 0.02514093 0.02790764 0.01219751 0.02362452\n\n[[62]]\n[1] 0.02514093 0.02002219 0.02110260\n\n[[63]]\n[1] 0.02986130 0.02790764 0.01407043 0.01805987\n\n[[64]]\n[1] 0.02911413 0.01689892\n\n[[65]]\n[1] 0.02471705\n\n[[66]]\n[1] 0.01574888 0.01726461 0.03068853 0.01954805 0.01810569\n\n[[67]]\n[1] 0.01708612 0.01726461 0.01349843 0.01361172\n\n[[68]]\n[1] 0.02109502 0.02722997 0.03068853 0.01406357 0.01546511\n\n[[69]]\n[1] 0.02174813 0.01645838 0.01419926\n\n[[70]]\n[1] 0.02631658 0.01963168 0.02278487\n\n[[71]]\n[1] 0.01473997 0.01838483 0.03197403\n\n[[72]]\n[1] 0.01874863 0.02247473 0.01476814 0.01593341 0.01963168\n\n[[73]]\n[1] 0.01500046 0.02140253 0.02278487 0.01838483 0.01652709\n\n[[74]]\n[1] 0.01150924 0.01613589 0.03197403 0.01652709 0.01342099 0.02864567\n\n[[75]]\n[1] 0.011883901 0.010533736 0.012539774 0.018822977 0.016458383 0.008217581\n\n[[76]]\n[1] 0.01352029 0.01434859 0.01689892 0.02471705 0.01954805 0.01349843 0.01406357\n\n[[77]]\n[1] 0.014736909 0.018804247 0.022761507 0.012197506 0.020022195 0.014070428\n[7] 0.008440896\n\n[[78]]\n[1] 0.02323898 0.02284457 0.01508028 0.01214479 0.01567192 0.01546511 0.01140779\n\n[[79]]\n[1] 0.01530458 0.01719415 0.01894207 0.01912542 0.01530782 0.01486508 0.02107101\n\n[[80]]\n[1] 0.01500600 0.02882915 0.02111721 0.01680129 0.01601083 0.01982700 0.01949145\n[8] 0.01362855\n\n[[81]]\n[1] 0.02947957 0.02220532 0.01150130 0.01979045 0.01896385 0.01683518\n\n[[82]]\n[1] 0.02327034 0.02644986 0.01849605 0.02108253 0.01742892\n\n[[83]]\n[1] 0.023354289 0.017142433 0.015622258 0.016714303 0.014379961 0.014593799\n[7] 0.014892965 0.018059871 0.008440896\n\n[[84]]\n[1] 0.01872915 0.02902705 0.01810569 0.01361172 0.01342099 0.01297994\n\n[[85]]\n [1] 0.011451133 0.017193502 0.013957649 0.016183544 0.009810297 0.010656545\n [7] 0.013416965 0.009903702 0.014199260 0.008217581 0.011407794\n\n[[86]]\n[1] 0.01515314 0.01502980 0.01412874 0.02163800 0.01509020 0.02689769 0.02181458\n[8] 0.02864567 0.01297994\n\n[[87]]\n[1] 0.01667105 0.02362452 0.02110260 0.02058034\n\n[[88]]\n[1] 0.01785036 0.02058034\n\n\n\n\nH5.6 Row-standardised Weights Matrix\nNext, we need to assign weights to each neighbouring polygon. In our case, each neighbouring polygon will be assigned equal weight (style=\"W\").\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147\n\nrswm_ids &lt;- nb2listw(wm_q, glist=ids, style=\"B\", zero.policy=TRUE)\nrswm_ids\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn       S0        S1     S2\nB 88 7744 8.786867 0.3776535 3.8137\n\nrswm_q$weights[10]\n\n[[1]]\n[1] 0.125 0.125 0.125 0.125 0.125 0.125 0.125 0.125\n\nsummary(unlist(rswm_ids$weights))\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n0.008218 0.015088 0.018739 0.019614 0.022823 0.040338"
  },
  {
    "objectID": "HandsOn/Hands-on_Ex05/hands-on-5.html#h5.7-applications-of-spatial-weight-matrices",
    "href": "HandsOn/Hands-on_Ex05/hands-on-5.html#h5.7-applications-of-spatial-weight-matrices",
    "title": "H5: Spatial Weights and Appliations",
    "section": "H5.7 Applications of Spatial Weight Matrices",
    "text": "H5.7 Applications of Spatial Weight Matrices\nSpatial weight matrices are used to create spatial lagged variables. In this section, four of them will be created: first with row-standardised weights, second as a sum of neighbouring values, third a spatial window average, and fourth a spatial window sum.\n\nH5.7.1 Row-standardised weights\nFirst, the average neighbour GDP per capita value for each polygon is calculated.\n\nGDPPC.lag &lt;- lag.listw(rswm_q, hunan$GDPPC)\nGDPPC.lag\n\n [1] 24847.20 22724.80 24143.25 27737.50 27270.25 21248.80 43747.00 33582.71\n [9] 45651.17 32027.62 32671.00 20810.00 25711.50 30672.33 33457.75 31689.20\n[17] 20269.00 23901.60 25126.17 21903.43 22718.60 25918.80 20307.00 20023.80\n[25] 16576.80 18667.00 14394.67 19848.80 15516.33 20518.00 17572.00 15200.12\n[33] 18413.80 14419.33 24094.50 22019.83 12923.50 14756.00 13869.80 12296.67\n[41] 15775.17 14382.86 11566.33 13199.50 23412.00 39541.00 36186.60 16559.60\n[49] 20772.50 19471.20 19827.33 15466.80 12925.67 18577.17 14943.00 24913.00\n[57] 25093.00 24428.80 17003.00 21143.75 20435.00 17131.33 24569.75 23835.50\n[65] 26360.00 47383.40 55157.75 37058.00 21546.67 23348.67 42323.67 28938.60\n[73] 25880.80 47345.67 18711.33 29087.29 20748.29 35933.71 15439.71 29787.50\n[81] 18145.00 21617.00 29203.89 41363.67 22259.09 44939.56 16902.00 16930.00\n\n\nIn the previous section, we retrieved the GDP per capita of the five neighbours with this code chunk:\n\nnb1 &lt;- wm_q[[1]]\nnb1 &lt;- hunan$GDPPC[nb1]\nnb1\n\n[1] 20981 34592 24473 21311 22879\n\n\nWe can then append the spatially lagged GDP per capita values onto the hunan dataset by using the code chunk below, and print out the average neighbouring income values for each county. Following that, we can plot both GDP per capita and spatial lag GDP per capita for comparison.\n\nlag.list &lt;- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag.list)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag GDPPC\")\nhunan &lt;- left_join(hunan,lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\nhead(hunan)\n\nSimple feature collection with 6 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 110.4922 ymin: 28.61762 xmax: 112.3013 ymax: 30.12812\nGeodetic CRS:  WGS 84\n   NAME_2  ID_3  NAME_3   ENGTYPE_3  County GDPPC lag GDPPC\n1 Changde 21098 Anxiang      County Anxiang 23667  24847.20\n2 Changde 21100 Hanshou      County Hanshou 20981  22724.80\n3 Changde 21101  Jinshi County City  Jinshi 34592  24143.25\n4 Changde 21102      Li      County      Li 24473  27737.50\n5 Changde 21103   Linli      County   Linli 25554  27270.25\n6 Changde 21104  Shimen      County  Shimen 27137  21248.80\n                        geometry\n1 POLYGON ((112.0625 29.75523...\n2 POLYGON ((112.2288 29.11684...\n3 POLYGON ((111.8927 29.6013,...\n4 POLYGON ((111.3731 29.94649...\n5 POLYGON ((111.6324 29.76288...\n6 POLYGON ((110.8825 30.11675...\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_gdppc &lt;- qtm(hunan, \"lag GDPPC\")\ntmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nH5.7.2 Spatial lag as a sum of neighbouring values\nWe can also calculate spatial lag as a sum of neighbouring values by assigning binary weights. This requires us to go back to the neighbours list, apply a function to assign binary weights, then explicitly assign the weights with the glist= parameter in the nb2listw() function.\nWe start by applying a function that will assign a value of 1 per neighbour. This is done with lapply(), which was used before to manipulate neighbour structure. The lapply() a function across each value in the neighbours structure.\n\nb_weights &lt;- lapply(wm_q, function(x) 0*x + 1)\nb_weights2 &lt;- nb2listw(wm_q,\n                       glist = b_weights,\n                       style = \"B\")\nb_weights2\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1    S2\nB 88 7744 448 896 10224\n\n\nWith the proper weights assigned, we can use lag.listw() to compute a lag variable from our weight and GDP per capita. We can then examine the result with the code chunk below.\n\nlag_sum &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nlag.res &lt;- as.data.frame(lag_sum)\ncolnames(lag.res) &lt;- c(\"NAME_3\", \"lag_sum GDPPC\")\nlag_sum\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\n\nNext, let’s left join the GDPPC field of lag_sum into the hunan dataframe. After that, we can plot both the original dataset and the spatial lag sum dataset for comparison.\n\nhunan &lt;- left_join(hunan, lag.res)\n\nJoining with `by = join_by(NAME_3)`\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\nlag_sum_gdppc &lt;- qtm(hunan, \"lag_sum GDPPC\")\ntmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\n\n\n\nH5.7.3 Spatial window average\nThe spatial window average uses row-standardised weights and includes the diagonal element. To do this in R, we need to go back to the neighbours structure and add the diagonal element before assigning weights with include.self(wm_q) before assigning weights.\n\nwm_qs &lt;- include.self(wm_q)\nwm_qs[[1]]\n\n[1]  1  2  3  4 57 85\n\n\nNotice that [1] now has 6 neighbours instead of 5. We can now proceed to obtain and assign weight values.\n\nwm_qs &lt;- nb2listw(wm_qs)\nwm_qs\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 536 \nPercentage nonzero weights: 6.921488 \nAverage number of links: 6.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 30.90265 357.5308\n\nlag_w_avg_gpdpc &lt;- lag.listw(wm_qs, \n                             hunan$GDPPC)\nlag_w_avg_gpdpc\n\n [1] 24650.50 22434.17 26233.00 27084.60 26927.00 22230.17 47621.20 37160.12\n [9] 49224.71 29886.89 26627.50 22690.17 25366.40 25825.75 30329.00 32682.83\n[17] 25948.62 23987.67 25463.14 21904.38 23127.50 25949.83 20018.75 19524.17\n[25] 18955.00 17800.40 15883.00 18831.33 14832.50 17965.00 17159.89 16199.44\n[33] 18764.50 26878.75 23188.86 20788.14 12365.20 15985.00 13764.83 11907.43\n[41] 17128.14 14593.62 11644.29 12706.00 21712.29 43548.25 35049.00 16226.83\n[49] 19294.40 18156.00 19954.75 18145.17 12132.75 18419.29 14050.83 23619.75\n[57] 24552.71 24733.67 16762.60 20932.60 19467.75 18334.00 22541.00 26028.00\n[65] 29128.50 46569.00 47576.60 36545.50 20838.50 22531.00 42115.50 27619.00\n[73] 27611.33 44523.29 18127.43 28746.38 20734.50 33880.62 14716.38 28516.22\n[81] 18086.14 21244.50 29568.80 48119.71 22310.75 43151.60 17133.40 17009.33\n\n\nThe final steps are to:\n\nConvert the lag variable listw object into a dataframe;\nLeft joining our lag window back to the hunan dataframe;\nCompare the spatial lag weights and spatial window average by plotting the lag_gdppc and w_ave_dgppc maps side by side.\n\n\nlag.list.wm_qs &lt;- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))\nlag_wm_qs.res &lt;- as.data.frame(lag.list.wm_qs)\ncolnames(lag_wm_qs.res) &lt;- c(\"NAME_3\", \"lag_window_avg GDPPC\")\nhunan &lt;- left_join(hunan, lag_wm_qs.res)\n\nJoining with `by = join_by(NAME_3)`\n\n# w_avg_gdppc &lt;- qtm(hunan, \"lag_window_avg GDPPC\")\n# tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)\n\nTo compare the values of lag GDPPC and Spatial window average, we can use kable() from the Knitr package to prepare a table.\n\nhunan %&gt;%\n  select(\"County\", \n         \"lag GDPPC\", \n         \"lag_window_avg GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag GDPPC\nlag_window_avg GDPPC\ngeometry\n\n\n\n\nAnxiang\n24847.20\n24650.50\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n22724.80\n22434.17\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n24143.25\n26233.00\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n27737.50\n27084.60\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n27270.25\n26927.00\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n21248.80\n22230.17\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n43747.00\n47621.20\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n33582.71\n37160.12\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n45651.17\n49224.71\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n32027.62\n29886.89\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n32671.00\n26627.50\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n20810.00\n22690.17\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n25711.50\n25366.40\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n30672.33\n25825.75\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n33457.75\n30329.00\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n31689.20\n32682.83\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n20269.00\n25948.62\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n23901.60\n23987.67\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n25126.17\n25463.14\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n21903.43\n21904.38\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n22718.60\n23127.50\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n25918.80\n25949.83\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n20307.00\n20018.75\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n20023.80\n19524.17\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n16576.80\n18955.00\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n18667.00\n17800.40\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n14394.67\n15883.00\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n19848.80\n18831.33\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n15516.33\n14832.50\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518.00\n17965.00\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n17572.00\n17159.89\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n15200.12\n16199.44\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n18413.80\n18764.50\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n14419.33\n26878.75\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n24094.50\n23188.86\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n22019.83\n20788.14\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n12923.50\n12365.20\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n14756.00\n15985.00\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n13869.80\n13764.83\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n12296.67\n11907.43\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n15775.17\n17128.14\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n14382.86\n14593.62\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n11566.33\n11644.29\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n13199.50\n12706.00\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n23412.00\n21712.29\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n39541.00\n43548.25\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n36186.60\n35049.00\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n16559.60\n16226.83\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n20772.50\n19294.40\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n19471.20\n18156.00\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n19827.33\n19954.75\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n15466.80\n18145.17\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n12925.67\n12132.75\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n18577.17\n18419.29\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n14943.00\n14050.83\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n24913.00\n23619.75\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n25093.00\n24552.71\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n24428.80\n24733.67\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n17003.00\n16762.60\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n21143.75\n20932.60\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n20435.00\n19467.75\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n17131.33\n18334.00\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n24569.75\n22541.00\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n23835.50\n26028.00\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360.00\n29128.50\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n47383.40\n46569.00\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n55157.75\n47576.60\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n37058.00\n36545.50\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n21546.67\n20838.50\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n23348.67\n22531.00\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n42323.67\n42115.50\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n28938.60\n27619.00\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n25880.80\n27611.33\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n47345.67\n44523.29\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n18711.33\n18127.43\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n29087.29\n28746.38\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n20748.29\n20734.50\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n35933.71\n33880.62\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n15439.71\n14716.38\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n29787.50\n28516.22\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n18145.00\n18086.14\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n21617.00\n21244.50\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n29203.89\n29568.80\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n41363.67\n48119.71\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n22259.09\n22310.75\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n44939.56\n43151.60\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n16902.00\n17133.40\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n16930.00\n17009.33\nPOLYGON ((111.3659 25.39472…\n\n\n\n\n\n\n\nH5.7.4 Spatial Window Sum\nUnlike the spatial window average, the spatial window sum does not use row-standardised weights. The first two steps to creating our spatial window sum are the same as before - add the diagonal element from the neighbour list and assign binary weights. The lag variable is then computed with lag.listw(), then converted into a data frame and left joined back to the hunan data frame.\n\nw_sum_gdppc &lt;- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))\nw_sum_gdppc\n\n[[1]]\n [1] \"Anxiang\"       \"Hanshou\"       \"Jinshi\"        \"Li\"           \n [5] \"Linli\"         \"Shimen\"        \"Liuyang\"       \"Ningxiang\"    \n [9] \"Wangcheng\"     \"Anren\"         \"Guidong\"       \"Jiahe\"        \n[13] \"Linwu\"         \"Rucheng\"       \"Yizhang\"       \"Yongxing\"     \n[17] \"Zixing\"        \"Changning\"     \"Hengdong\"      \"Hengnan\"      \n[21] \"Hengshan\"      \"Leiyang\"       \"Qidong\"        \"Chenxi\"       \n[25] \"Zhongfang\"     \"Huitong\"       \"Jingzhou\"      \"Mayang\"       \n[29] \"Tongdao\"       \"Xinhuang\"      \"Xupu\"          \"Yuanling\"     \n[33] \"Zhijiang\"      \"Lengshuijiang\" \"Shuangfeng\"    \"Xinhua\"       \n[37] \"Chengbu\"       \"Dongan\"        \"Dongkou\"       \"Longhui\"      \n[41] \"Shaodong\"      \"Suining\"       \"Wugang\"        \"Xinning\"      \n[45] \"Xinshao\"       \"Shaoshan\"      \"Xiangxiang\"    \"Baojing\"      \n[49] \"Fenghuang\"     \"Guzhang\"       \"Huayuan\"       \"Jishou\"       \n[53] \"Longshan\"      \"Luxi\"          \"Yongshun\"      \"Anhua\"        \n[57] \"Nan\"           \"Yuanjiang\"     \"Jianghua\"      \"Lanshan\"      \n[61] \"Ningyuan\"      \"Shuangpai\"     \"Xintian\"       \"Huarong\"      \n[65] \"Linxiang\"      \"Miluo\"         \"Pingjiang\"     \"Xiangyin\"     \n[69] \"Cili\"          \"Chaling\"       \"Liling\"        \"Yanling\"      \n[73] \"You\"           \"Zhuzhou\"       \"Sangzhi\"       \"Yueyang\"      \n[77] \"Qiyang\"        \"Taojiang\"      \"Shaoyang\"      \"Lianyuan\"     \n[81] \"Hongjiang\"     \"Hengyang\"      \"Guiyang\"       \"Changsha\"     \n[85] \"Taoyuan\"       \"Xiangtan\"      \"Dao\"           \"Jiangyong\"    \n\n[[2]]\n [1] 124236 113624  96573 110950 109081 106244 174988 235079 273907 256221\n[11]  98013 104050 102846  92017 133831 158446 141883 119508 150757 153324\n[21] 113593 129594 142149 100119  82884  74668  43184  99244  46549  20518\n[31] 140576 121601  92069  43258 144567 132119  51694  59024  69349  73780\n[41]  94651 100680  69398  52798 140472 118623 180933  82798  83090  97356\n[51]  59482  77334  38777 111463  74715 174391 150558 122144  68012  84575\n[61] 143045  51394  98279  47671  26360 236917 220631 185290  64640  70046\n[71] 126971 144693 129404 284074 112268 203611 145238 251536 108078 238300\n[81] 108870 108085 262835 248182 244850 404456  67608  33860\n\nw_sum_gdppc.res &lt;- as.data.frame(w_sum_gdppc)\ncolnames(w_sum_gdppc.res) &lt;- c(\"NAME_3\", \"w_sum GDPPC\")\nhunan &lt;- left_join(hunan, w_sum_gdppc.res)\n\nJoining with `by = join_by(NAME_3)`\n\n\nFinally, we can compare the spatial lag weights and spatial window average by plotting the lag_sum_gdppc and w_sum_gdppc maps side by side. We can also construct a kable() table to compare the results in tabular form.\n\nw_sum_gdppc &lt;- qtm(hunan, \"w_sum GDPPC\")\ntmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)\n\n\n\n\n\n\n\nhunan %&gt;%\n  select(\"County\", \"lag_sum GDPPC\", \"w_sum GDPPC\") %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\nCounty\nlag_sum GDPPC\nw_sum GDPPC\ngeometry\n\n\n\n\nAnxiang\n124236\n124236\nPOLYGON ((112.0625 29.75523…\n\n\nHanshou\n113624\n113624\nPOLYGON ((112.2288 29.11684…\n\n\nJinshi\n96573\n96573\nPOLYGON ((111.8927 29.6013,…\n\n\nLi\n110950\n110950\nPOLYGON ((111.3731 29.94649…\n\n\nLinli\n109081\n109081\nPOLYGON ((111.6324 29.76288…\n\n\nShimen\n106244\n106244\nPOLYGON ((110.8825 30.11675…\n\n\nLiuyang\n174988\n174988\nPOLYGON ((113.9905 28.5682,…\n\n\nNingxiang\n235079\n235079\nPOLYGON ((112.7181 28.38299…\n\n\nWangcheng\n273907\n273907\nPOLYGON ((112.7914 28.52688…\n\n\nAnren\n256221\n256221\nPOLYGON ((113.1757 26.82734…\n\n\nGuidong\n98013\n98013\nPOLYGON ((114.1799 26.20117…\n\n\nJiahe\n104050\n104050\nPOLYGON ((112.4425 25.74358…\n\n\nLinwu\n102846\n102846\nPOLYGON ((112.5914 25.55143…\n\n\nRucheng\n92017\n92017\nPOLYGON ((113.6759 25.87578…\n\n\nYizhang\n133831\n133831\nPOLYGON ((113.2621 25.68394…\n\n\nYongxing\n158446\n158446\nPOLYGON ((113.3169 26.41843…\n\n\nZixing\n141883\n141883\nPOLYGON ((113.7311 26.16259…\n\n\nChangning\n119508\n119508\nPOLYGON ((112.6144 26.60198…\n\n\nHengdong\n150757\n150757\nPOLYGON ((113.1056 27.21007…\n\n\nHengnan\n153324\n153324\nPOLYGON ((112.7599 26.98149…\n\n\nHengshan\n113593\n113593\nPOLYGON ((112.607 27.4689, …\n\n\nLeiyang\n129594\n129594\nPOLYGON ((112.9996 26.69276…\n\n\nQidong\n142149\n142149\nPOLYGON ((111.7818 27.0383,…\n\n\nChenxi\n100119\n100119\nPOLYGON ((110.2624 28.21778…\n\n\nZhongfang\n82884\n82884\nPOLYGON ((109.9431 27.72858…\n\n\nHuitong\n74668\n74668\nPOLYGON ((109.9419 27.10512…\n\n\nJingzhou\n43184\n43184\nPOLYGON ((109.8186 26.75842…\n\n\nMayang\n99244\n99244\nPOLYGON ((109.795 27.98008,…\n\n\nTongdao\n46549\n46549\nPOLYGON ((109.9294 26.46561…\n\n\nXinhuang\n20518\n20518\nPOLYGON ((109.227 27.43733,…\n\n\nXupu\n140576\n140576\nPOLYGON ((110.7189 28.30485…\n\n\nYuanling\n121601\n121601\nPOLYGON ((110.9652 28.99895…\n\n\nZhijiang\n92069\n92069\nPOLYGON ((109.8818 27.60661…\n\n\nLengshuijiang\n43258\n43258\nPOLYGON ((111.5307 27.81472…\n\n\nShuangfeng\n144567\n144567\nPOLYGON ((112.263 27.70421,…\n\n\nXinhua\n132119\n132119\nPOLYGON ((111.3345 28.19642…\n\n\nChengbu\n51694\n51694\nPOLYGON ((110.4455 26.69317…\n\n\nDongan\n59024\n59024\nPOLYGON ((111.4531 26.86812…\n\n\nDongkou\n69349\n69349\nPOLYGON ((110.6622 27.37305…\n\n\nLonghui\n73780\n73780\nPOLYGON ((110.985 27.65983,…\n\n\nShaodong\n94651\n94651\nPOLYGON ((111.9054 27.40254…\n\n\nSuining\n100680\n100680\nPOLYGON ((110.389 27.10006,…\n\n\nWugang\n69398\n69398\nPOLYGON ((110.9878 27.03345…\n\n\nXinning\n52798\n52798\nPOLYGON ((111.0736 26.84627…\n\n\nXinshao\n140472\n140472\nPOLYGON ((111.6013 27.58275…\n\n\nShaoshan\n118623\n118623\nPOLYGON ((112.5391 27.97742…\n\n\nXiangxiang\n180933\n180933\nPOLYGON ((112.4549 28.05783…\n\n\nBaojing\n82798\n82798\nPOLYGON ((109.7015 28.82844…\n\n\nFenghuang\n83090\n83090\nPOLYGON ((109.5239 28.19206…\n\n\nGuzhang\n97356\n97356\nPOLYGON ((109.8968 28.74034…\n\n\nHuayuan\n59482\n59482\nPOLYGON ((109.5647 28.61712…\n\n\nJishou\n77334\n77334\nPOLYGON ((109.8375 28.4696,…\n\n\nLongshan\n38777\n38777\nPOLYGON ((109.6337 29.62521…\n\n\nLuxi\n111463\n111463\nPOLYGON ((110.1067 28.41835…\n\n\nYongshun\n74715\n74715\nPOLYGON ((110.0003 29.29499…\n\n\nAnhua\n174391\n174391\nPOLYGON ((111.6034 28.63716…\n\n\nNan\n150558\n150558\nPOLYGON ((112.3232 29.46074…\n\n\nYuanjiang\n122144\n122144\nPOLYGON ((112.4391 29.1791,…\n\n\nJianghua\n68012\n68012\nPOLYGON ((111.6461 25.29661…\n\n\nLanshan\n84575\n84575\nPOLYGON ((112.2286 25.61123…\n\n\nNingyuan\n143045\n143045\nPOLYGON ((112.0715 26.09892…\n\n\nShuangpai\n51394\n51394\nPOLYGON ((111.8864 26.11957…\n\n\nXintian\n98279\n98279\nPOLYGON ((112.2578 26.0796,…\n\n\nHuarong\n47671\n47671\nPOLYGON ((112.9242 29.69134…\n\n\nLinxiang\n26360\n26360\nPOLYGON ((113.5502 29.67418…\n\n\nMiluo\n236917\n236917\nPOLYGON ((112.9902 29.02139…\n\n\nPingjiang\n220631\n220631\nPOLYGON ((113.8436 29.06152…\n\n\nXiangyin\n185290\n185290\nPOLYGON ((112.9173 28.98264…\n\n\nCili\n64640\n64640\nPOLYGON ((110.8822 29.69017…\n\n\nChaling\n70046\n70046\nPOLYGON ((113.7666 27.10573…\n\n\nLiling\n126971\n126971\nPOLYGON ((113.5673 27.94346…\n\n\nYanling\n144693\n144693\nPOLYGON ((113.9292 26.6154,…\n\n\nYou\n129404\n129404\nPOLYGON ((113.5879 27.41324…\n\n\nZhuzhou\n284074\n284074\nPOLYGON ((113.2493 28.02411…\n\n\nSangzhi\n112268\n112268\nPOLYGON ((110.556 29.40543,…\n\n\nYueyang\n203611\n203611\nPOLYGON ((113.343 29.61064,…\n\n\nQiyang\n145238\n145238\nPOLYGON ((111.5563 26.81318…\n\n\nTaojiang\n251536\n251536\nPOLYGON ((112.0508 28.67265…\n\n\nShaoyang\n108078\n108078\nPOLYGON ((111.5013 27.30207…\n\n\nLianyuan\n238300\n238300\nPOLYGON ((111.6789 28.02946…\n\n\nHongjiang\n108870\n108870\nPOLYGON ((110.1441 27.47513…\n\n\nHengyang\n108085\n108085\nPOLYGON ((112.7144 26.98613…\n\n\nGuiyang\n262835\n262835\nPOLYGON ((113.0811 26.04963…\n\n\nChangsha\n248182\n248182\nPOLYGON ((112.9421 28.03722…\n\n\nTaoyuan\n244850\n244850\nPOLYGON ((112.0612 29.32855…\n\n\nXiangtan\n404456\n404456\nPOLYGON ((113.0426 27.8942,…\n\n\nDao\n67608\n67608\nPOLYGON ((111.498 25.81679,…\n\n\nJiangyong\n33860\n33860\nPOLYGON ((111.3659 25.39472…"
  },
  {
    "objectID": "index.html#featured-exercises",
    "href": "index.html#featured-exercises",
    "title": "IS415: Geospatial Analytics and Applications",
    "section": "Featured Exercises",
    "text": "Featured Exercises\nHands-on Exercise 1: Geospatial Data Wrangling with R\nHands-on Exercise 2: Thematic Mapping and GeoVisualisation with R\nHands-on Exercise 3: Spatial Point Patterns Analysis"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html",
    "href": "TakeHome/TakeHome1/take-home-1.html",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "Millions of people have their lives shattered by armed conflict every year. One of these is the Myanmar Civil War, a significant escalation of the long-running Myanmar Conflict in response to the 2021 coup d’etat.\nGeospatial analtyics holds the potential to address complex problems facing society, such as this one. This study serves to discover the sptial and spatio-temporal distribution (spread) of the latest armed conflict in Myanmar by applying spatial point pattern analysis (SPPA) methods.\n\n\nThe R packages we will use today are:\n\nsf\ntmap\nspatstat\nsparr\nraster\nmaptools\n\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.1-setting-the-scene",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.1-setting-the-scene",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "Millions of people have their lives shattered by armed conflict every year. One of these is the Myanmar Civil War, a significant escalation of the long-running Myanmar Conflict in response to the 2021 coup d’etat.\nGeospatial analtyics holds the potential to address complex problems facing society, such as this one. This study serves to discover the sptial and spatio-temporal distribution (spread) of the latest armed conflict in Myanmar by applying spatial point pattern analysis (SPPA) methods.\n\n\nThe R packages we will use today are:\n\nsf\ntmap\nspatstat\nsparr\nraster\nmaptools\n\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.2-the-data",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.2-the-data",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.2 The Data",
    "text": "TH1.2 The Data\nArmed conflict data in Myanmar between January 2021 and September 2024 was downloaded from the Armed Conflict Location & Event Database (ACLED), an independent, impartial, international non-profit organization collecting data on violent conflicts and protests in all countries and territories in the world (Raleigh et al., 2023). We will be superimposing these locations with the geogrpahical boundary and subdivisions of the country, from the Myanmar Information Management Unit (MIMU).\n\nTH1.2.1 Loading armed conflict data into tibble object\nFirst, we load our aspatial armed conflict data into a tibble object.\n\nacled_mya &lt;- read_csv(\"data/2021-01-01-2024-09-16-Southeast_Asia-Myanmar.csv\")\n\nRows: 53653 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(acled_mya)\n\n# A tibble: 6 × 31\n  event_id_cnty event_date         year time_precision disorder_type  event_type\n  &lt;chr&gt;         &lt;chr&gt;             &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;     \n1 MMR66329      06 September 2024  2024              1 Political vio… Battles   \n2 MMR66334      06 September 2024  2024              1 Political vio… Explosion…\n3 MMR66353      06 September 2024  2024              1 Political vio… Explosion…\n4 MMR66365      06 September 2024  2024              1 Political vio… Explosion…\n5 MMR66368      06 September 2024  2024              1 Political vio… Battles   \n6 MMR66422      06 September 2024  2024              1 Political vio… Explosion…\n# ℹ 25 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, actor2 &lt;chr&gt;, assoc_actor_2 &lt;chr&gt;, inter2 &lt;dbl&gt;,\n#   interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;, region &lt;chr&gt;,\n#   country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;, location &lt;chr&gt;,\n#   latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;, source &lt;chr&gt;,\n#   source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;, tags &lt;chr&gt;,\n#   timestamp &lt;dbl&gt;\n\n\n\n\nTH1.2.2 Loading administrative boundaries into sf object\nThree representations of Myanmar’s geography exist on the MIMU repository - Admin1 subdivides the country into its states and regions only, while Admin2 subdivides the country by its smaller districts, and Admin3 its townships. Further, the ACLED labels each incident with all 3 representations. For simplicity and ease of initial understanding, we shall use the Admin1 representation.\n\nmmr_admin1 &lt;- st_read(dsn = \"data/mmr_polbnda_adm1_250k_mimu_1\", layer = \"mmr_polbnda_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/TakeHome/TakeHome1/data/mmr_polbnda_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nmmr_admin1\n\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID          ST ST_PCODE           ST_RG          ST_MMR PCode_V\n1         1  Ayeyarwady   MMR017          Region  ဧရာဝတီတိုင်းဒေသကြီး     9.4\n2         2        Bago   MMR111          Region    ပဲခူးတိုင်းဒေသကြီး     9.4\n3         4        Chin   MMR004           State       ချင်းပြည်နယ်     9.4\n4         5      Kachin   MMR001           State       ကချင်ပြည်နယ်     9.4\n5         6       Kayah   MMR002           State       ကယားပြည်နယ်     9.4\n6         7       Kayin   MMR003           State        ကရင်ပြည်နယ်     9.4\n7         8      Magway   MMR009          Region   မကွေးတိုင်းဒေသကြီး     9.4\n8         9    Mandalay   MMR010          Region မန္တလေးတိုင်းဒေသကြီး     9.4\n9        10         Mon   MMR011           State         မွန်ပြည်နယ်     9.4\n10       11 Nay Pyi Taw   MMR018 Union Territory        နေပြည်တော်     9.4\n                         geometry\n1  MULTIPOLYGON (((95.20798 15...\n2  MULTIPOLYGON (((96.17964 19...\n3  MULTIPOLYGON (((93.36931 24...\n4  MULTIPOLYGON (((97.59674 28...\n5  MULTIPOLYGON (((97.1759 19....\n6  MULTIPOLYGON (((97.81508 16...\n7  MULTIPOLYGON (((94.11699 22...\n8  MULTIPOLYGON (((96.14023 23...\n9  MULTIPOLYGON (((97.73689 15...\n10 MULTIPOLYGON (((96.32013 20...\n\nqtm(mmr_admin1) # Plots the national boundaries of Myanmar\n\n\n\n\n\n\n\n\n\n\nTH1.2.3 Creating sf data frame from aspatial data\nThe ACLED tibble contains coordinates, making it useful for plotting on our map as points. We can therefore use it to create an sf data frame using which we can plot our points on a map. The EPSG format of the import coordinates should be 4326, corresponding to the WGS84 Geographic Coordinate System.\n\nacled_mya_sf &lt;- st_as_sf(acled_mya, coords = c(\"longitude\", \"latitude\"), crs = 4326)"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.3-using-appropriate-function-of-sf-and-tidyverse-packages-import-and-transform-the-downloaded-armed-conflict-data-and-administrative-boundary-data-into-sf-tibble-data.frames",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.3-using-appropriate-function-of-sf-and-tidyverse-packages-import-and-transform-the-downloaded-armed-conflict-data-and-administrative-boundary-data-into-sf-tibble-data.frames",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.3 Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames",
    "text": "TH1.3 Using appropriate function of sf and tidyverse packages, import and transform the downloaded armed conflict data and administrative boundary data into sf tibble data.frames\n\nTH1.3.1 Loading R packages and importing data\nThe R packages we will use today are:\n\nsf\ntmap\nspatstat\nraster\nmaptools\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\nmmr_polbnda &lt;- st_read(dsn=\"data/mmr_polbnda_adm1_250k_mimu_1\", layer=\"mmr_polbnda_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/TakeHome/TakeHome1/data/mmr_polbnda_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nmmr_polbnda\n\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID          ST ST_PCODE           ST_RG          ST_MMR PCode_V\n1         1  Ayeyarwady   MMR017          Region  ဧရာဝတီတိုင်းဒေသကြီး     9.4\n2         2        Bago   MMR111          Region    ပဲခူးတိုင်းဒေသကြီး     9.4\n3         4        Chin   MMR004           State       ချင်းပြည်နယ်     9.4\n4         5      Kachin   MMR001           State       ကချင်ပြည်နယ်     9.4\n5         6       Kayah   MMR002           State       ကယားပြည်နယ်     9.4\n6         7       Kayin   MMR003           State        ကရင်ပြည်နယ်     9.4\n7         8      Magway   MMR009          Region   မကွေးတိုင်းဒေသကြီး     9.4\n8         9    Mandalay   MMR010          Region မန္တလေးတိုင်းဒေသကြီး     9.4\n9        10         Mon   MMR011           State         မွန်ပြည်နယ်     9.4\n10       11 Nay Pyi Taw   MMR018 Union Territory        နေပြည်တော်     9.4\n                         geometry\n1  MULTIPOLYGON (((95.20798 15...\n2  MULTIPOLYGON (((96.17964 19...\n3  MULTIPOLYGON (((93.36931 24...\n4  MULTIPOLYGON (((97.59674 28...\n5  MULTIPOLYGON (((97.1759 19....\n6  MULTIPOLYGON (((97.81508 16...\n7  MULTIPOLYGON (((94.11699 22...\n8  MULTIPOLYGON (((96.14023 23...\n9  MULTIPOLYGON (((97.73689 15...\n10 MULTIPOLYGON (((96.32013 20...\n\nacled_mya &lt;- read_csv(\"data/ACLED_Myanmar.csv\")\n\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nacled_mya\n\n# A tibble: 55,574 × 31\n   event_id_cnty event_date        year time_precision disorder_type  event_type\n   &lt;chr&gt;         &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;          &lt;chr&gt;     \n 1 MMR56099      31 December 2023  2023              1 Political vio… Explosion…\n 2 MMR56222      31 December 2023  2023              1 Political vio… Explosion…\n 3 MMR56370      31 December 2023  2023              1 Political vio… Battles   \n 4 MMR56376      31 December 2023  2023              1 Demonstrations Protests  \n 5 MMR56380      31 December 2023  2023              1 Strategic dev… Strategic…\n 6 MMR56869      31 December 2023  2023              1 Strategic dev… Strategic…\n 7 MMR56871      31 December 2023  2023              1 Political vio… Battles   \n 8 MMR56873      31 December 2023  2023              1 Political vio… Explosion…\n 9 MMR56874      31 December 2023  2023              1 Political vio… Battles   \n10 MMR56876      31 December 2023  2023              1 Political vio… Violence …\n# ℹ 55,564 more rows\n# ℹ 25 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, actor2 &lt;chr&gt;, assoc_actor_2 &lt;chr&gt;, inter2 &lt;dbl&gt;,\n#   interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;, region &lt;chr&gt;,\n#   country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;, location &lt;chr&gt;,\n#   latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;, source &lt;chr&gt;,\n#   source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;, tags &lt;chr&gt;, …"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.3-importing-and-transforming-armed-conflict-data-and-administrative-boundary-data-into-sf-tibble-data.frames",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.3-importing-and-transforming-armed-conflict-data-and-administrative-boundary-data-into-sf-tibble-data.frames",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.3 Importing and transforming armed conflict data and administrative boundary data into sf tibble data.frames",
    "text": "TH1.3 Importing and transforming armed conflict data and administrative boundary data into sf tibble data.frames\n\nTH1.3.1 Loading R packages and aspatial data\nThe R packages we will use today are:\n\nsf\ntmap\nspatstat\nraster\nmaptools\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\nacled_mya &lt;- read_csv(\"data/ACLED_Myanmar.csv\")\n\nRows: 55574 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(acled_mya)\n\n# A tibble: 6 × 31\n  event_id_cnty event_date        year time_precision disorder_type   event_type\n  &lt;chr&gt;         &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;     \n1 MMR56099      31 December 2023  2023              1 Political viol… Explosion…\n2 MMR56222      31 December 2023  2023              1 Political viol… Explosion…\n3 MMR56370      31 December 2023  2023              1 Political viol… Battles   \n4 MMR56376      31 December 2023  2023              1 Demonstrations  Protests  \n5 MMR56380      31 December 2023  2023              1 Strategic deve… Strategic…\n6 MMR56869      31 December 2023  2023              1 Strategic deve… Strategic…\n# ℹ 25 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, actor2 &lt;chr&gt;, assoc_actor_2 &lt;chr&gt;, inter2 &lt;dbl&gt;,\n#   interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;, region &lt;chr&gt;,\n#   country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;, location &lt;chr&gt;,\n#   latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;, source &lt;chr&gt;,\n#   source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;, tags &lt;chr&gt;,\n#   timestamp &lt;dbl&gt;\n\n\n\n\nTH1.3.2 Loading and plotting geospatial data\nThree representations of Myanmar’s geography exist on - Admin1 subdivides the country into its states and regions only, while Admin2 subdivides the country by its smaller districts, and Admin3 its townships. Further, the ACLED labels each incident with all 3 representations. For simplicity and ease of understanding, we shall use the Admin1 representation.\n\nmmr_admin1 &lt;- st_read(dsn=\"data/mmr_polbnda_adm1_250k_mimu_1\", layer=\"mmr_polbnda_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/TakeHome/TakeHome1/data/mmr_polbnda_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nmmr_admin1\n\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID          ST ST_PCODE           ST_RG          ST_MMR PCode_V\n1         1  Ayeyarwady   MMR017          Region  ဧရာဝတီတိုင်းဒေသကြီး     9.4\n2         2        Bago   MMR111          Region    ပဲခူးတိုင်းဒေသကြီး     9.4\n3         4        Chin   MMR004           State       ချင်းပြည်နယ်     9.4\n4         5      Kachin   MMR001           State       ကချင်ပြည်နယ်     9.4\n5         6       Kayah   MMR002           State       ကယားပြည်နယ်     9.4\n6         7       Kayin   MMR003           State        ကရင်ပြည်နယ်     9.4\n7         8      Magway   MMR009          Region   မကွေးတိုင်းဒေသကြီး     9.4\n8         9    Mandalay   MMR010          Region မန္တလေးတိုင်းဒေသကြီး     9.4\n9        10         Mon   MMR011           State         မွန်ပြည်နယ်     9.4\n10       11 Nay Pyi Taw   MMR018 Union Territory        နေပြည်တော်     9.4\n                         geometry\n1  MULTIPOLYGON (((95.20798 15...\n2  MULTIPOLYGON (((96.17964 19...\n3  MULTIPOLYGON (((93.36931 24...\n4  MULTIPOLYGON (((97.59674 28...\n5  MULTIPOLYGON (((97.1759 19....\n6  MULTIPOLYGON (((97.81508 16...\n7  MULTIPOLYGON (((94.11699 22...\n8  MULTIPOLYGON (((96.14023 23...\n9  MULTIPOLYGON (((97.73689 15...\n10 MULTIPOLYGON (((96.32013 20...\n\nqtm(mmr_admin1)\n\n\n\n\n\n\n\n\n\n\nTH1.3.3 Creating sf data frame from aspatial data\nThe ACLED data contains coordinates, making it useful for plotting on our map as points. We can therefore use it to create an sf data frame which we can use to plot our points on a map. The EPSG format of the import coordinates should be 4326, corresponding to the WGS84 Geographic Coordinate System.\n\nacled_mya_sf &lt;- st_as_sf(acled_mya, coords = c(\"longitude\", \"latitude\"), crs=4326) \n\nThe EPSG area code for Myanmar is 4239. Before we work with our datasets, we will need to transform the coordinate system to use it.\n\nacled_mya_sf &lt;- acled_mya_sf %&gt;% st_transform(crs=4239)\nmmr_admin1 &lt;- mmr_admin1 %&gt;% st_transform(crs=4239)\ntm_shape(mmr_admin1) + tm_polygons() + tm_shape(acled_mya_sf) + tm_dots(size=0.05)\n\n\n\n\n\n\n\n\nAdditionally, since the data is timestamped, we are able to plot and compare the frequency of conflict events over time. Before we do, though, we need to preprocess the timestamps.\n\nacled_mya_sf &lt;- acled_mya_sf %&gt;% mutate(event_date=dmy(timestamp))\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `event_date = dmy(timestamp)`.\nCaused by warning:\n! All formats failed to parse. No formats found."
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#references",
    "href": "TakeHome/TakeHome1/take-home-1.html#references",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "References",
    "text": "References\n\nAlbert, E., & Maizland, L. (2020, January 23). What forces are fueling Myanmar’s Rohingya crisis? Council on Foreign Relations. https://www.cfr.org/backgrounder/rohingya-crisis\nDiggle, P.J. (1985). A kernel method for smoothing point process data. Applied Statistics (Journal of the Royal Statistical Society, Series C), 34, 138–147.\nMaizland, L. (2022, January 31). Myanmar’s troubled history: Coups, military rule, and ethnic conflict. Council on Foreign Relations. https://www.cfr.org/backgrounder/myanmar-history-coup-military-rule-ethnic-conflict-rohingya\nMyanmar Information Management Unit. (n.d.). Country Overview. Retrieved 16 September 2024, from https://www.themimu.info/country-overview\nRaleigh, C., Kishi, R. & Linke, A. Political instability patterns are obscured by conflict dataset scope conditions, sources, and coding choices. Humanit Soc Sci Commun 10, 74 (2023). https://doi.org/10.1057/s41599-023-01559-4\nRieffel, L. (2019, December 6). Peace and war in Myanmar. Brookings. https://www.brookings.edu/articles/peace-and-war-in-myanmar/\nScott, D.W. (1992). Multivariate Density Estimation. Theory, Practice and Visualization. New York: Wiley.\nSmith, M. (1999). Burma: Insurgency and the politics of ethnicity (2. (updated) ed). Univ. Press [u.a.].\nSullivan, D. P. (2021, October 21). Dire consequences: Addressing the humanitarian fallout from myanmar’s coup. Refugees International; Refugees International. https://www.refugeesinternational.org/reports-briefs/dire-consequences-addressing-the-humanitarian-fallout-from-myanmars-coup/\nUNDP (Ed.). (2024). Breaking the gridlock: Reimagining cooperation in a polarized world. United Nations Development Programme (UNDP)."
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html",
    "href": "InClass/ICE4/in-class-4.html",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "",
    "text": "A spatio-temporal point process (also called space-time or spatial-temporal point process) is a random collection of points, where each point represents the time and location of an event. Examples of events include incidence of disease, sightings or births of a species, or the occurrences of fires, earthquakes, lightning strikes, tsunamis, or volcanic eruptions.\nSpatio-temporal point patterns analysis (STPPA) is becoming increasingly necessary, given the rapid emergence of geographically and temporally indexed data in a wide range of fields. Several spatio-temporal point patterns analysis methods have been introduced and implemented in R in the last ten years. Today’s exercise will use data on a real-world forest fire event in Kepulauan Bangka Belitung, Indonesia from 1st January to 31st December 2023, to illustrate the methods, procedures and interpretations of STPPA.\nThis chapter shows how various R packages can be combined to run a set of spatio-temporal point pattern analyses in a guided and intuitive way. A real world forest fire event in from 1st January 2023 to 31st December 2023 is used to illustrate the methods, procedures and interpretations."
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.1-overview-and-explanation",
    "href": "InClass/ICE4/in-class-4.html#ce4.1-overview-and-explanation",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "",
    "text": "A spatio-temporal point process (also called space-time or spatial-temporal point process) is a random collection of points, where each point represents the time and location of an event. Examples of events include incidence of disease, sightings or births of a species, or the occurrences of fires, earthquakes, lightning strikes, tsunamis, or volcanic eruptions.\nSpatio-temporal point patterns analysis (STPPA) is becoming increasingly necessary, given the rapid emergence of geographically and temporally indexed data in a wide range of fields. Several spatio-temporal point patterns analysis methods have been introduced and implemented in R in the last ten years. Today’s exercise will use data on a real-world forest fire event in Kepulauan Bangka Belitung, Indonesia from 1st January to 31st December 2023, to illustrate the methods, procedures and interpretations of STPPA.\nThis chapter shows how various R packages can be combined to run a set of spatio-temporal point pattern analyses in a guided and intuitive way. A real world forest fire event in from 1st January 2023 to 31st December 2023 is used to illustrate the methods, procedures and interpretations."
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.2-research-questions",
    "href": "InClass/ICE4/in-class-4.html#ce4.2-research-questions",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.2 Research questions",
    "text": "CE4.2 Research questions\nBy the end of the exercise I hope to find out:\n\nIf the locations of forest fires in Kepulauan Bangka Belitung are spatially and spatially-temporally independent, and;\nIf not, where and when the observed forest fire locations tend to cluster."
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.3-the-data",
    "href": "InClass/ICE4/in-class-4.html#ce4.3-the-data",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.3 The data",
    "text": "CE4.3 The data\n\nforestfires, a CSV file that provides locations on forest fires from Moderate Resolution Imaging Spectroradiometer (MODIS) sensor data.\nKepulauan_Bangka_Belitung, which as the name suggests marks the boundary of the region of Kepulauan Bangka Belitung."
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.4-new-r-packages",
    "href": "InClass/ICE4/in-class-4.html#ce4.4-new-r-packages",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.4 New R Packages",
    "text": "CE4.4 New R Packages\nA new R package to be introduced today is rgdal, which is used for importing geospatial data in the GIS file format and saving it as a Spatial* DataFrame.\nIn addition, sparr gives us the ability to estimate fixed and adatptive kernel-smoothed spatial relative risk surfaces via the density-ratio method, and perform subsequent inferrence.\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse, sparr)"
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.5-importing-and-preparing-study-area",
    "href": "InClass/ICE4/in-class-4.html#ce4.5-importing-and-preparing-study-area",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.5 Importing and preparing study area",
    "text": "CE4.5 Importing and preparing study area\n\nCE4.5.1 Importing study area and creating OWIN object\n\nkbb &lt;- st_read(dsn=\"data/rawdata\", layer=\"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop=TRUE, what=\"ZM\") %&gt;% # Drop Z-values\n  st_transform(crs=32748) # EPSG: Indonesia\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/InClass/ICE4/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n# This dataset keeps Z-dimension (height) data. We might want to remove it if we are to do KDE\nkbb_owin &lt;- as.owin(kbb)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units"
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.5.1-importing-study-area",
    "href": "InClass/ICE4/in-class-4.html#ce4.5.1-importing-study-area",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.5.1 Importing study area",
    "text": "CE4.5.1 Importing study area\n\nkbb &lt;- st_read(dsn=\"data/rawdata\", layer=\"Kepulauan_Bangka_Belitung\")\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/InClass/ICE4/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "InClass/ICE4/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "href": "InClass/ICE4/data/rawdata/Kepulauan_Bangka_Belitung.html",
    "title": "IS415 - Kendrick",
    "section": "",
    "text": "&lt;!DOCTYPE qgis PUBLIC ‘http://mrcc.com/qgis.dtd’ ‘SYSTEM’&gt;     \n\n\n       GEOGCRS[“WGS 84”,ENSEMBLE[“World Geodetic System 1984 ensemble”,MEMBER[“World Geodetic System 1984 (Transit)”],MEMBER[“World Geodetic System 1984 (G730)”],MEMBER[“World Geodetic System 1984 (G873)”],MEMBER[“World Geodetic System 1984 (G1150)”],MEMBER[“World Geodetic System 1984 (G1674)”],MEMBER[“World Geodetic System 1984 (G1762)”],MEMBER[“World Geodetic System 1984 (G2139)”],ELLIPSOID[“WGS 84”,6378137,298.257223563,LENGTHUNIT[“metre”,1]],ENSEMBLEACCURACY[2.0]],PRIMEM[“Greenwich”,0,ANGLEUNIT[“degree”,0.0174532925199433]],CS[ellipsoidal,2],AXIS[“geodetic latitude (Lat)”,north,ORDER[1],ANGLEUNIT[“degree”,0.0174532925199433]],AXIS[“geodetic longitude (Lon)”,east,ORDER[2],ANGLEUNIT[“degree”,0.0174532925199433]],USAGE[SCOPE[“Horizontal component of 3D system.”],AREA[“World.”],BBOX[-90,-180,90,180]],ID[“EPSG”,4326]] +proj=longlat +datum=WGS84 +no_defs 3452 4326 EPSG:4326 WGS 84 longlat EPSG:7030 true"
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.5.1-importing-study-area-and-convert-to-owin",
    "href": "InClass/ICE4/in-class-4.html#ce4.5.1-importing-study-area-and-convert-to-owin",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.5.1 Importing study area and convert to OWIN",
    "text": "CE4.5.1 Importing study area and convert to OWIN\n\nkbb &lt;- st_read(dsn=\"data/rawdata\", layer=\"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop=TRUE, what=\"ZM\") %&gt;% # Drop Z-values\n  st_transform(crs=32748) # EPSG: Indonesia\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/InClass/ICE4/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n# This dataset keeps Z-dimension (height) data. We might want to remove it if we are to do KDE\nkbb_owin &lt;- as.owin(kbb)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units"
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.5.1-importing-study-area-and-creating-owin-object",
    "href": "InClass/ICE4/in-class-4.html#ce4.5.1-importing-study-area-and-creating-owin-object",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.5.1 Importing study area and creating OWIN object",
    "text": "CE4.5.1 Importing study area and creating OWIN object\n\nkbb &lt;- st_read(dsn=\"data/rawdata\", layer=\"Kepulauan_Bangka_Belitung\") %&gt;%\n  st_union() %&gt;%\n  st_zm(drop=TRUE, what=\"ZM\") %&gt;% # Drop Z-values\n  st_transform(crs=32748) # EPSG: Indonesia\n\nReading layer `Kepulauan_Bangka_Belitung' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/InClass/ICE4/data/rawdata' \n  using driver `ESRI Shapefile'\nSimple feature collection with 298 features and 27 fields\nGeometry type: POLYGON\nDimension:     XYZ\nBounding box:  xmin: 105.1085 ymin: -3.116593 xmax: 106.8488 ymax: -1.501603\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n\n\nst_as_s2(): dropping Z and/or M coordinate\n\n# This dataset keeps Z-dimension (height) data. We might want to remove it if we are to do KDE\nkbb_owin &lt;- as.owin(kbb)\nkbb_owin\n\nwindow: polygonal boundary\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n\n\n\nfire_sf &lt;- read_csv(\"data/rawdata/forestfires.csv\") %&gt;% st_as_sf(coords=c(\"longitude\", \"latitude\"), crs=4326) %&gt;% st_transform(crs=32748)\n\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message."
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.6-importing-and-preparing-forest-fire-data",
    "href": "InClass/ICE4/in-class-4.html#ce4.6-importing-and-preparing-forest-fire-data",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.6 Importing and preparing forest fire data",
    "text": "CE4.6 Importing and preparing forest fire data\n\n# Creating an SF dataframe from a CSV removes \"longitude\" and \"latitude\", transforming it to a \"geometry\" field\nfire_sf &lt;- read_csv(\"data/rawdata/forestfires.csv\") %&gt;% st_as_sf(coords=c(\"longitude\", \"latitude\"), crs=4326) %&gt;% st_transform(crs=32748)\n\nRows: 741 Columns: 15\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr   (3): satellite, instrument, daynight\ndbl  (11): latitude, longitude, brightness, scan, track, acq_time, confidenc...\ndate  (1): acq_date\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nWe will want to convert our SF object into ppp, which only accepts numerical or character data, later on. We will therefore need to convert our acq_date fields into numeric fields.\n\nfire_sf &lt;- fire_sf %&gt;% mutate(DayOfYear=yday(acq_date)) %&gt;%\n                      mutate(Month_num=month(acq_date)) %&gt;%\n                      mutate(Month_fac=month(acq_date, label=TRUE, abbr=FALSE))"
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.7-visualising-fire",
    "href": "InClass/ICE4/in-class-4.html#ce4.7-visualising-fire",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.7 Visualising fire",
    "text": "CE4.7 Visualising fire"
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.7-visualising-fire-locations",
    "href": "InClass/ICE4/in-class-4.html#ce4.7-visualising-fire-locations",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.7 Visualising fire locations",
    "text": "CE4.7 Visualising fire locations\n\nCE4.7.1 As points\n\n# tm_shape(kbb) + tm_polygons() + tm_shape(fire_sf) + tm_dots()\ntm_shape(kbb) + tm_polygons() + tm_shape(fire_sf) + tm_bubbles()\n\n\n\n\n\n\n\n\n\n\nCE4.7.2 Over time\n\ntm_shape(kbb) + tm_polygons() + tm_shape(fire_sf) + tm_dots(size=0.1) + tm_facets(by=\"Month_fac\", free.coords=FALSE, drop.units=TRUE)\n\n\n\n\n\n\n\n# free.coords: All points have the same coordinate pairs"
  },
  {
    "objectID": "InClass/ICE4/in-class-4.html#ce4.8-computing-stkde-by-month",
    "href": "InClass/ICE4/in-class-4.html#ce4.8-computing-stkde-by-month",
    "title": "CE4/H4: Spatial-Temporal Point Patterns Analysis",
    "section": "CE4.8 Computing STKDE by Month",
    "text": "CE4.8 Computing STKDE by Month\nUsing sparttemp.density() of the sparr package, we are able to compute spatial-temporal KDE (STKDE).\n\nCE4.8.1 Forest fires by month (ppp)\n\nfire_month &lt;- fire_sf %&gt;% select(Month_num)\nfire_month_ppp &lt;- as.ppp(fire_month)\nfire_month_ppp\n\nMarked planar point pattern: 741 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n\nsummary(fire_month_ppp)\n\nMarked planar point pattern:  741 points\nAverage intensity 2.49258e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: rectangle = [521564.1, 695791] x [9658137, 9828767] units\n                    (174200 x 170600 units)\nWindow area = 29728200000 square units\n\nany(duplicated(fire_month_ppp))\n\n[1] FALSE\n\nfire_month_owin &lt;- fire_month_ppp[kbb_owin]\nsummary(fire_month_owin)\n\nMarked planar point pattern:  741 points\nAverage intensity 6.424519e-08 points per square unit\n\nCoordinates are given to 10 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   8.000   9.000   8.579  10.000  12.000 \n\nWindow: polygonal boundary\n2 separate polygons (no holes)\n           vertices        area relative.area\npolygon 1     47493 11533600000      1.00e+00\npolygon 2       256      306427      2.66e-05\nenclosing rectangle: [512066.8, 705559.4] x [9655398, 9834006] units\n                     (193500 x 178600 units)\nWindow area = 11533900000 square units\nFraction of frame area: 0.334\n\n\n\n\nCE4.8.2 Spatio-temporal KDE\n\nst_kde &lt;- spattemp.density(fire_month_owin)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 15102.47 (spatial)\n  lambda = 0.0304 (temporal)\n\nNo. of observations\n  741 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [512066.8, 705559.4] x [9655398, 9834006]\n\nTemporal bound\n  [1, 12]\n\nEvaluation\n  128 x 128 x 12 trivariate lattice\n  Density range: [1.233458e-27, 8.202976e-10]\n\n\n\n\nCE4.8.3 Plotting the spatio-temporal KDE object\nThis code chunk plot()s the KDE for the entire year 2023. As expected, the KDEs indicate far fewer occurrences of forest fires in the area before June 2023 and in December 2023 (the rainy season usually falls between December and February.)\n\n# sparr\ntims &lt;- c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\npar(mfcol=c(1,2))\nfor (i in tims) {\n  plot(st_kde, i, override.par=FALSE, fix.range=TRUE, main=paste(\"KDE at month\", i))\n}"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.3-importing-and-transforming-armed-conflict-data-and-administrative-boundary-data-into-sf-and-tibble-dataframes",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.3-importing-and-transforming-armed-conflict-data-and-administrative-boundary-data-into-sf-and-tibble-dataframes",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.3 Importing and transforming armed conflict data and administrative boundary data into sf and tibble dataframes",
    "text": "TH1.3 Importing and transforming armed conflict data and administrative boundary data into sf and tibble dataframes\n\nTH1.3.1 Loading R packages and aspatial data\nThe R packages we will use today are:\n\nsf\ntmap\nspatstat\nraster\nmaptools\n\n\npacman::p_load(sf, raster, spatstat, tmap, tidyverse)\nacled_mya &lt;- read_csv(\"data/ACLED_Myanmar.csv\")\n\nRows: 47832 Columns: 31\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (20): event_id_cnty, event_date, disorder_type, event_type, sub_event_ty...\ndbl (11): year, time_precision, inter1, inter2, interaction, iso, latitude, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nhead(acled_mya)\n\n# A tibble: 6 × 31\n  event_id_cnty event_date        year time_precision disorder_type   event_type\n  &lt;chr&gt;         &lt;chr&gt;            &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;           &lt;chr&gt;     \n1 MMR56099      31 December 2023  2023              1 Political viol… Explosion…\n2 MMR56222      31 December 2023  2023              1 Political viol… Explosion…\n3 MMR56370      31 December 2023  2023              1 Political viol… Battles   \n4 MMR56376      31 December 2023  2023              1 Demonstrations  Protests  \n5 MMR56380      31 December 2023  2023              1 Strategic deve… Strategic…\n6 MMR56869      31 December 2023  2023              1 Strategic deve… Strategic…\n# ℹ 25 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, actor2 &lt;chr&gt;, assoc_actor_2 &lt;chr&gt;, inter2 &lt;dbl&gt;,\n#   interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;, region &lt;chr&gt;,\n#   country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;, location &lt;chr&gt;,\n#   latitude &lt;dbl&gt;, longitude &lt;dbl&gt;, geo_precision &lt;dbl&gt;, source &lt;chr&gt;,\n#   source_scale &lt;chr&gt;, notes &lt;chr&gt;, fatalities &lt;dbl&gt;, tags &lt;chr&gt;,\n#   timestamp &lt;dbl&gt;\n\n\n\n\nTH1.3.2 Loading and plotting geospatial data\nThree representations of Myanmar’s geography exist on the MIMU repository - Admin1 subdivides the country into its states and regions only, while Admin2 subdivides the country by its smaller districts, and Admin3 its townships. Further, the ACLED labels each incident with all 3 representations. For simplicity and ease of understanding, we shall use the Admin1 representation.\n\nmmr_admin1 &lt;- st_read(dsn = \"data/mmr_polbnda_adm1_250k_mimu_1\", layer = \"mmr_polbnda_adm1_250k_mimu_1\")\n\nReading layer `mmr_polbnda_adm1_250k_mimu_1' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/TakeHome/TakeHome1/data/mmr_polbnda_adm1_250k_mimu_1' \n  using driver `ESRI Shapefile'\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\n\nmmr_admin1\n\nSimple feature collection with 15 features and 6 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 92.1721 ymin: 9.696844 xmax: 101.17 ymax: 28.54554\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   OBJECTID          ST ST_PCODE           ST_RG          ST_MMR PCode_V\n1         1  Ayeyarwady   MMR017          Region  ဧရာဝတီတိုင်းဒေသကြီး     9.4\n2         2        Bago   MMR111          Region    ပဲခူးတိုင်းဒေသကြီး     9.4\n3         4        Chin   MMR004           State       ချင်းပြည်နယ်     9.4\n4         5      Kachin   MMR001           State       ကချင်ပြည်နယ်     9.4\n5         6       Kayah   MMR002           State       ကယားပြည်နယ်     9.4\n6         7       Kayin   MMR003           State        ကရင်ပြည်နယ်     9.4\n7         8      Magway   MMR009          Region   မကွေးတိုင်းဒေသကြီး     9.4\n8         9    Mandalay   MMR010          Region မန္တလေးတိုင်းဒေသကြီး     9.4\n9        10         Mon   MMR011           State         မွန်ပြည်နယ်     9.4\n10       11 Nay Pyi Taw   MMR018 Union Territory        နေပြည်တော်     9.4\n                         geometry\n1  MULTIPOLYGON (((95.20798 15...\n2  MULTIPOLYGON (((96.17964 19...\n3  MULTIPOLYGON (((93.36931 24...\n4  MULTIPOLYGON (((97.59674 28...\n5  MULTIPOLYGON (((97.1759 19....\n6  MULTIPOLYGON (((97.81508 16...\n7  MULTIPOLYGON (((94.11699 22...\n8  MULTIPOLYGON (((96.14023 23...\n9  MULTIPOLYGON (((97.73689 15...\n10 MULTIPOLYGON (((96.32013 20...\n\nqtm(mmr_admin1)\n\n\n\n\n\n\n\n\n\n\nTH1.3.3 Creating sf data frame from aspatial data\nThe ACLED tibble contains coordinates, making it useful for plotting on our map as points. We can therefore use it to create an sf data frame using which we can plot our points on a map. The EPSG format of the import coordinates should be 4326, corresponding to the WGS84 Geographic Coordinate System.\n\nacled_mya_sf &lt;- st_as_sf(acled_mya, coords = c(\"longitude\", \"latitude\"), crs = 4326)\n\nThe EPSG area code for Myanmar is 4239, while the WGS 84-compatible code is 32647. Since we’re creating an owin object later, we need to first convert our coordinate system.\n\nacled_mya_sf &lt;- acled_mya_sf %&gt;% st_transform(crs = 32647)\nmmr_admin1 &lt;- mmr_admin1 %&gt;% st_transform(crs = 32647)\ntm_shape(mmr_admin1) + tm_polygons() + tm_shape(acled_mya_sf) + tm_dots(size = 0.05)\n\n\n\n\n\n\n\n\nAdditionally, since the data is timestamped, we are able to plot and compare the frequency of conflict events over time. Before we do, though, we need to standardise the date stamps, then compartmentalise them into their year, month and day components, so that we can perform spatial-temporal point patterns analysis (STPPA) later.\nA visualisation of the spatial-temporial distribution of points can be found in Annex A. Notice the consistent appearance throughout the entire study period of a large cluster of points towards the west of the country - roughly the location of Rahkine state on the border with Bangladesh.\n\nacled_mya_sf &lt;- acled_mya_sf %&gt;%\n    mutate(event_date = dmy(event_date)) %&gt;%\n    mutate(DayOfYear = yday(event_date)) %&gt;%\n    mutate(Month_num = format(event_date, \"%Y-%m\")) %&gt;%  # Year-Month format\n    mutate(Month_fac = factor(format(event_date, \"%B %Y\"))) %&gt;% # Full month\n    mutate(Quarter = paste0(year(event_date), \"-\", quarter(event_date), \"Q\"))  # Quarter format\nacled_mya_sf\n\nSimple feature collection with 47832 features and 33 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: -207135 ymin: 1103500 xmax: 640934.5 ymax: 3042960\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 47,832 × 34\n   event_id_cnty event_date  year time_precision disorder_type        event_type\n * &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;                &lt;chr&gt;     \n 1 MMR56099      2023-12-31  2023              1 Political violence   Explosion…\n 2 MMR56222      2023-12-31  2023              1 Political violence   Explosion…\n 3 MMR56370      2023-12-31  2023              1 Political violence   Battles   \n 4 MMR56376      2023-12-31  2023              1 Demonstrations       Protests  \n 5 MMR56380      2023-12-31  2023              1 Strategic developme… Strategic…\n 6 MMR56869      2023-12-31  2023              1 Strategic developme… Strategic…\n 7 MMR56871      2023-12-31  2023              1 Political violence   Battles   \n 8 MMR56873      2023-12-31  2023              1 Political violence   Explosion…\n 9 MMR56874      2023-12-31  2023              1 Political violence   Battles   \n10 MMR56876      2023-12-31  2023              1 Political violence   Violence …\n# ℹ 47,822 more rows\n# ℹ 28 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, actor2 &lt;chr&gt;, assoc_actor_2 &lt;chr&gt;, inter2 &lt;dbl&gt;,\n#   interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;, region &lt;chr&gt;,\n#   country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;, location &lt;chr&gt;,\n#   geo_precision &lt;dbl&gt;, source &lt;chr&gt;, source_scale &lt;chr&gt;, notes &lt;chr&gt;,\n#   fatalities &lt;dbl&gt;, tags &lt;chr&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;, …\n\nquarters &lt;- unique(acled_mya_sf$Quarter)\nprint(length(quarters))\n\n[1] 20\n\nquarters\n\n [1] \"2023-4Q\" \"2023-3Q\" \"2023-2Q\" \"2023-1Q\" \"2022-4Q\" \"2022-3Q\" \"2022-2Q\"\n [8] \"2022-1Q\" \"2021-4Q\" \"2021-3Q\" \"2021-2Q\" \"2021-1Q\" \"2020-4Q\" \"2020-3Q\"\n[15] \"2020-2Q\" \"2020-1Q\" \"2019-4Q\" \"2019-3Q\" \"2019-2Q\" \"2019-1Q\"\n\n\n\n\nTH1.3.4 Final steps to prepare for KDE\nFinally, before moving on to our KDE,\n\nTH1.3.4.1 Using owin to confine study area within Myanmar borders\n\nmmr_admin1_owin &lt;- as.owin(mmr_admin1)\nplot(mmr_admin1_owin)\n\n\n\n\n\n\n\n# summary(mmr_admin1_owin)\n\n\n\nTH1.3.4.2 Creating quarterly ppp objects for KDE and merging owin\nThe code chunk below will extract quarterly\n\n# Extract quarterly armed conflict events and save to a list\nacled_ppp_list &lt;- list()\nfor (quarter in quarters) {\n  print(quarter)\n  acled_mya_quarters_subset &lt;- subset(acled_mya_sf, acled_mya_sf$Quarter == quarter)\n  acled_mya_quarter_ppp &lt;- as.ppp(acled_mya_quarters_subset)\n  acled_mya_quarter_ppp &lt;- acled_mya_quarter_ppp[mmr_admin1_owin]\n  acled_ppp_list[[as.character(quarter)]] &lt;- acled_mya_quarter_ppp\n  plot(acled_mya_quarter_ppp)\n}\n\n[1] \"2023-4Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\n\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 3761 symbols are shown in the symbol map\n\n\n[1] \"2023-3Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\n\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 3195 symbols are shown in the symbol map\n\n\n[1] \"2023-2Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 2725 symbols are shown in the symbol map\n\n\n[1] \"2023-1Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 3021 symbols are shown in the symbol map\n\n\n[1] \"2022-4Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 3400 symbols are shown in the symbol map\n\n\n[1] \"2022-3Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 3759 symbols are shown in the symbol map\n\n\n[1] \"2022-2Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 4111 symbols are shown in the symbol map\n\n\n[1] \"2022-1Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 4265 symbols are shown in the symbol map\n\n\n[1] \"2021-4Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 4452 symbols are shown in the symbol map\n\n\n[1] \"2021-3Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 3393 symbols are shown in the symbol map\n\n\n[1] \"2021-2Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 4737 symbols are shown in the symbol map\n\n\n[1] \"2021-1Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 3692 symbols are shown in the symbol map\n\n\n[1] \"2020-4Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 281 symbols are shown in the symbol map\n\n\n[1] \"2020-3Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 276 symbols are shown in the symbol map\n\n\n[1] \"2020-2Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 328 symbols are shown in the symbol map\n\n\n[1] \"2020-1Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 614 symbols are shown in the symbol map\n\n\n[1] \"2019-4Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 600 symbols are shown in the symbol map\n\n\n[1] \"2019-3Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 504 symbols are shown in the symbol map\n\n\n[1] \"2019-2Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 334 symbols are shown in the symbol map\n\n\n[1] \"2019-1Q\"\n\n\nWarning in as.ppp.sf(acled_mya_quarters_subset): only first attribute column is\nused for marks\nWarning in as.ppp.sf(acled_mya_quarters_subset): Too many types to display\nevery type as a different character\n\n\n\n\n\n\n\n\n\nWarning: Only 10 out of 377 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\n# Create all-encompassing ppp\nacled_mya_ppp &lt;- as.ppp(acled_mya_sf)\n\nWarning in as.ppp.sf(acled_mya_sf): only first attribute column is used for\nmarks\n\nacled_mya_ppp &lt;- acled_mya_ppp[mmr_admin1_owin]\nplot(acled_mya_ppp)\n\nWarning in default.charmap(ntypes, chars): Too many types to display every type\nas a different character\n\n\nWarning: Only 10 out of 47825 symbols are shown in the symbol map\n\n\n\n\n\n\n\n\nacled_mya_ppp\n\nMarked planar point pattern: 47825 points\nmarks are of storage type  'character'\nwindow: polygonal boundary\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n\n\n\n\nTH1.3.4.3 Handling duplicates\nFirst, we check if there are duplicated points in the ACLED ppp.\n\n# any(duplicated(acled_mya_ppp))\n# sum(multiplicity(acled_mya_ppp) &gt; 1)\n\n\n\nTH1.3.4.4 Combining point events object and owin\n\n# acled_mya_ppp = acled_mya_ppp[mmr_admin1_owin]\n# plot(acled_mya_ppp)"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#annex-a-spatial-temporal-distribution-of-armed-conflict-occurrences-in-myanmar-between-2019-and-2023",
    "href": "TakeHome/TakeHome1/take-home-1.html#annex-a-spatial-temporal-distribution-of-armed-conflict-occurrences-in-myanmar-between-2019-and-2023",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "Annex A: Spatial-temporal distribution of armed conflict occurrences in Myanmar between 2019 and 2023",
    "text": "Annex A: Spatial-temporal distribution of armed conflict occurrences in Myanmar between 2019 and 2023"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.4-interlude-a-brief-history-of-myanmars-ethnic-groups",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.4-interlude-a-brief-history-of-myanmars-ethnic-groups",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.4 Interlude: A brief history of Myanmar’s ethnic groups",
    "text": "TH1.4 Interlude: A brief history of Myanmar’s ethnic groups"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.5-first-order-sppa",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.5-first-order-sppa",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.5 First Order SPPA",
    "text": "TH1.5 First Order SPPA"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.5-first-order-sppa---kde",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.5-first-order-sppa---kde",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.5 First Order SPPA - KDE",
    "text": "TH1.5 First Order SPPA - KDE\nKernel density estimation (KDE) serves to compute the intensity of a point distribution. It has two general steps: first to compute the point intensity, followed by spatial interpolation using a kernel function. Using KDE, we can determine the general region of Myanmar with the highest incidence of armed conflict.\n\nTH1.5.1 Overall Fixed-Bandwidth KDE\n\n\nTH1.5.2 Overall adaptive-bandwidth KDE\n\n\nTH1.5.3 Quarterly fixed-bandwidth KDE\n\n\nTH1.5.4 Quarterly adaptive-bandwidth KDE"
  },
  {
    "objectID": "InClass/ICE5/in-class-5.html",
    "href": "InClass/ICE5/in-class-5.html",
    "title": "CE5: Geographically-weighted statistics with gwModel",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)"
  },
  {
    "objectID": "InClass/ICE5/in-class-5.html#ce5.1-loading-package",
    "href": "InClass/ICE5/in-class-5.html#ce5.1-loading-package",
    "title": "CE5: Geographically-weighted statistics with gwModel",
    "section": "",
    "text": "pacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse, GWmodel)"
  },
  {
    "objectID": "InClass/ICE5/in-class-5.html#ce5.1-loading-packages",
    "href": "InClass/ICE5/in-class-5.html#ce5.1-loading-packages",
    "title": "CE5: Geographically-weighted statistics with gwModel",
    "section": "",
    "text": "pacman::p_load(sf, spdep, tmap, tidyverse, knitr, GWmodel)"
  },
  {
    "objectID": "InClass/ICE5/in-class-5.html#ce5.2-preparing-data",
    "href": "InClass/ICE5/in-class-5.html#ce5.2-preparing-data",
    "title": "CE5: Geographically-weighted statistics with gwModel",
    "section": "CE5.2 Preparing data",
    "text": "CE5.2 Preparing data\n\nCE5.2.1 Importing Hunan data shapefile\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/InClass/ICE5/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nCE5.2.2 Importing Hunan 2012 Census Data\n\ndev_2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCE5.2.3 Relational Join\n\nhunan &lt;- left_join(hunan, dev_2012) %&gt;%\n  select(1:3, 7, 15, 16, 31, 32)\n\nJoining with `by = join_by(County)`\n\n  # Only selects fields we are interested in, in this case GDP per capita\n\n\n\nCE5.2.4 Save/load joined data\n\n# To save the need to regenerate the table later\nwrite_rds(hunan, \"data/rds/hunan_sf.rds\")\n\n\nhunan &lt;- read_rds(\"data/rds/hunan_sf.rds\")"
  },
  {
    "objectID": "InClass/ICE5/in-class-5.html#ce5.3-converting-to-spatialpolygondataframe",
    "href": "InClass/ICE5/in-class-5.html#ce5.3-converting-to-spatialpolygondataframe",
    "title": "CE5: Geographically-weighted statistics with gwModel",
    "section": "CE5.3 Converting to SpatialPolygonDataFrame",
    "text": "CE5.3 Converting to SpatialPolygonDataFrame\nGWmodel, being a relatively older package, requires spatial data to be represented as sp objects.\n\nhunan_sp &lt;- hunan %&gt;% as_Spatial()"
  },
  {
    "objectID": "InClass/ICE5/in-class-5.html#ce5.4-geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "href": "InClass/ICE5/in-class-5.html#ce5.4-geographically-weighted-summary-statistics-with-adaptive-bandwidth",
    "title": "CE5: Geographically-weighted statistics with gwModel",
    "section": "CE5.4 Geographically weighted summary statistics with adaptive bandwidth",
    "text": "CE5.4 Geographically weighted summary statistics with adaptive bandwidth\n\nCE5.4.1 AIC\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach=\"AIC\", adaptive=TRUE, kernel=\"bisquare\", longlat=T)\n\nAdaptive bandwidth (number of nearest neighbours): 62 AICc value: 1923.156 \nAdaptive bandwidth (number of nearest neighbours): 46 AICc value: 1920.469 \nAdaptive bandwidth (number of nearest neighbours): 36 AICc value: 1917.324 \nAdaptive bandwidth (number of nearest neighbours): 29 AICc value: 1916.661 \nAdaptive bandwidth (number of nearest neighbours): 26 AICc value: 1914.897 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \nAdaptive bandwidth (number of nearest neighbours): 22 AICc value: 1914.045 \n\nbw_AIC\n\n[1] 22\n\n# GDPPC ~ 1: Defines the independent variable\n\n\n\nCE5.4.2 Cross-validation\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach=\"CV\", adaptive=FALSE, kernel=\"bisquare\", longlat=T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\nbw_CV\n\n[1] 76.29126"
  },
  {
    "objectID": "InClass/ICE5/in-class-5.html#ce5.5-geographically-weighted-summary-statistics-with-fixed-bandwidth",
    "href": "InClass/ICE5/in-class-5.html#ce5.5-geographically-weighted-summary-statistics-with-fixed-bandwidth",
    "title": "CE5: Geographically-weighted statistics with gwModel",
    "section": "CE5.5 Geographically weighted summary statistics with fixed bandwidth",
    "text": "CE5.5 Geographically weighted summary statistics with fixed bandwidth\n\nCE5.5.1 AIC\n\nbw_AIC &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach=\"AIC\", adaptive=FALSE, kernel=\"bisquare\", longlat=T)\n\nFixed bandwidth: 357.4897 AICc value: 1927.631 \nFixed bandwidth: 220.985 AICc value: 1921.547 \nFixed bandwidth: 136.6204 AICc value: 1919.993 \nFixed bandwidth: 84.48025 AICc value: 1940.603 \nFixed bandwidth: 168.8448 AICc value: 1919.457 \nFixed bandwidth: 188.7606 AICc value: 1920.007 \nFixed bandwidth: 156.5362 AICc value: 1919.41 \nFixed bandwidth: 148.929 AICc value: 1919.527 \nFixed bandwidth: 161.2377 AICc value: 1919.392 \nFixed bandwidth: 164.1433 AICc value: 1919.403 \nFixed bandwidth: 159.4419 AICc value: 1919.393 \nFixed bandwidth: 162.3475 AICc value: 1919.394 \nFixed bandwidth: 160.5517 AICc value: 1919.391 \n\nbw_AIC\n\n[1] 160.5517\n\n# GDPPC ~ 1: Defines the independent variable\n\n\n\nCE5.5.2 Cross-validation\n\nbw_CV &lt;- bw.gwr(GDPPC ~ 1, data = hunan_sp, approach=\"CV\", adaptive=FALSE, kernel=\"bisquare\", longlat=T)\n\nFixed bandwidth: 357.4897 CV score: 16265191728 \nFixed bandwidth: 220.985 CV score: 14954930931 \nFixed bandwidth: 136.6204 CV score: 14134185837 \nFixed bandwidth: 84.48025 CV score: 13693362460 \nFixed bandwidth: 52.25585 CV score: Inf \nFixed bandwidth: 104.396 CV score: 13891052305 \nFixed bandwidth: 72.17162 CV score: 13577893677 \nFixed bandwidth: 64.56447 CV score: 14681160609 \nFixed bandwidth: 76.8731 CV score: 13444716890 \nFixed bandwidth: 79.77877 CV score: 13503296834 \nFixed bandwidth: 75.07729 CV score: 13452450771 \nFixed bandwidth: 77.98296 CV score: 13457916138 \nFixed bandwidth: 76.18716 CV score: 13442911302 \nFixed bandwidth: 75.76323 CV score: 13444600639 \nFixed bandwidth: 76.44916 CV score: 13442994078 \nFixed bandwidth: 76.02523 CV score: 13443285248 \nFixed bandwidth: 76.28724 CV score: 13442844774 \nFixed bandwidth: 76.34909 CV score: 13442864995 \nFixed bandwidth: 76.24901 CV score: 13442855596 \nFixed bandwidth: 76.31086 CV score: 13442847019 \nFixed bandwidth: 76.27264 CV score: 13442846793 \nFixed bandwidth: 76.29626 CV score: 13442844829 \nFixed bandwidth: 76.28166 CV score: 13442845238 \nFixed bandwidth: 76.29068 CV score: 13442844678 \nFixed bandwidth: 76.29281 CV score: 13442844691 \nFixed bandwidth: 76.28937 CV score: 13442844698 \nFixed bandwidth: 76.2915 CV score: 13442844676 \nFixed bandwidth: 76.292 CV score: 13442844679 \nFixed bandwidth: 76.29119 CV score: 13442844676 \nFixed bandwidth: 76.29099 CV score: 13442844676 \nFixed bandwidth: 76.29131 CV score: 13442844676 \nFixed bandwidth: 76.29138 CV score: 13442844676 \nFixed bandwidth: 76.29126 CV score: 13442844676 \nFixed bandwidth: 76.29123 CV score: 13442844676 \n\nbw_CV\n\n[1] 76.29126\n\n\n\n\nCE5.5.3 Computing geographically weighted summary statistics\n\ngwstat &lt;- gwss(data=hunan_sp, vars=\"GDPPC\", bw=bw_AIC, kernel=\"bisquare\", adaptive=TRUE, longlat=T)\n\n\nCE5.5.3.1 Preparing the output data\n\ngwstat_df &lt;- as.data.frame(gwstat$SDF)\n\ncbind() is then used to append the newly derived dataframe to hunan_sf.\n\nhunan_gstat &lt;- cbind(hunan, gwstat_df)"
  },
  {
    "objectID": "InClass/ICE5/in-class-5.html#ce5.6-visualising-geographically-weighted-summary-statistics",
    "href": "InClass/ICE5/in-class-5.html#ce5.6-visualising-geographically-weighted-summary-statistics",
    "title": "CE5: Geographically-weighted statistics with gwModel",
    "section": "CE5.6 Visualising geographically-weighted summary statistics",
    "text": "CE5.6 Visualising geographically-weighted summary statistics\n\ntm_shape(hunan_gstat) + tm_fill(\"GDPPC_LM\", n=5, style=\"quantile\") + tm_borders(alpha=0.5) + tm_layout(main.title=\"Distribution of geographically weighted mean\", main.title.position = \"center\", main.title.size = 1, legend.text.size = 0.5, legend.height = 1.5, legend.width = 1.5, frame = TRUE)"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.3-a-brief-summary-of-myanmar-and-the-myanmar-conflict",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.3-a-brief-summary-of-myanmar-and-the-myanmar-conflict",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.3 A brief summary of Myanmar and the Myanmar Conflict",
    "text": "TH1.3 A brief summary of Myanmar and the Myanmar Conflict\nWe have imported our R packages and loaded our datasets, but before we move on, it is useful to present a brief introduction to the country of Myanmar and the evolution of its longstanding conflict to the state it is today.\nThe second largest country in Southeast Asia at 676,578 square kilometres and an ASEAN member state, Myanmar features fertile tropical deltas in the south and the rugged Himalayan foothills to its north. It shares borders with China to the north and northeast, Laos and Thailand to the east and Southeast, and Bangladesh and India to the west and northwest. Despite having a 2800km coastline providing access to deep-sea ports and an abundance in natural resources including arable land, forests, minerals and natural gas, conflict-ridden Myanmar is considered a least developed country, with a GNP per capita of US$1144 (2011) (Myanmar Information Management Unit, n.d.) and a HDI of 0.6 (UNDP, 2024). Consequently, agriculture accounts for 36% of GDP and 60-70% of employment.\nMyanmar is organised into seven states, seven regions including its largest city Yangon, and one union territory - its capital, Naypyitaw, located at around the country’s geographic centre. The states - Chin, Kachin, Kayah, Kyain, Mon, Rakhine and Shan - are largely populated by the national ethnic communities, while most of the inhabitants of its regions - Ayeyarwady, Bago, Mandalay, Sagaing, Tanintharyi and largest city Yangon - are of the majority Bamar (Burmese) ethnicity. The following code chunk plots the states and regions of Myanmar into an interactive map.\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(mmr_admin1) + tm_polygons()\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\n\nCrucially, Myanmar is one of the world’s most ethnically diverse countries, with as many as 135 different ethnic groups boasting a rich tapestry of culture and religious history (Maizland, 2022). While this may paint a rosy picture of cultural beauty on the surface, this is far from reality in the country. While the majority Bamar enjoy a privileged position in society and have held of government and military positions, many of the country’s minority groups grapple with systemic discrimination, lack of economic opportunity and development, minimum representation in government, and abuses at the hands of the military.\nThe code chunk below visualises Myanmar’s ethnic breakdown in a pie chart, based on data from the US CIA World Factbook and presented by Maizland (2022).\n\n# Plot the composition of ethnic groups in Myanmar\nx &lt;- c(2, 2, 3, 4, 5, 7, 9, 68)\ny &lt;- c(\"Indian\", \"Mon\", \"Chinese\", \"Rakhine\", \"Other\", \"Karen\", \"Shan\", \"Bamar\")\n\ny &lt;- paste(y, x)\ny &lt;- paste(y, \"%\", sep=\"\")\n\npie(x, labels = y, main = \"Composition of Ethnic Groups in Myanmar (Maizland, 2022)\", col = c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"))\n\n\n\n\n\n\n\n# legend(\"topright\", y, cex = 0.8, fill = c(\"#999999\", \"#E69F00\", \"#56B4E9\", \"#009E73\", \"#F0E442\", \"#0072B2\", \"#D55E00\", \"#CC79A7\"))\n\nBecause of this disparity - and partially as a result of the British using a divide-and-conquer strategy during the colonial era - lengthy armed conflicts have ensued since Myanmar’s independence between the ethnic groups (comprising ethnic armed organisations and smaller militias) and the Tatmadaw, the military, creating what is perhaps the world’s longest continuing civil war (Rieffel, 2019). The different ethnic groups of Myanmar fight over many issues, from greater autonomy to control over natural resources. This did not stop even after the country underwent a democratic reform in the early 2010s - since 2017, the Tatmadaw had been mounting a brutal campaign against the ethnic Rohingya (Albert & Maizland, 2020). While the administration of since-deposed state chancellor Aung San Suu Kyi defended their actions, restricting press freedoms in the process, rights groups and UN officials fervently claim the Tatmadaw’s actions have amounted to genocide. The Tatmadaw has since unseated Aung San Suu Kyi in 2021 and re-established the military junta, significantly escalating tensions within the country."
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.4-data-wrangling",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.4-data-wrangling",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.4 Data wrangling",
    "text": "TH1.4 Data wrangling\n\nTH1.4.1 Coordinate system conversion\nThe EPSG area code for Myanmar is 4239, while the WGS 84-compatible code is 32647. Since we’re creating an owin object later, we need to first convert our coordinate system.\n\nacled_mya_sf &lt;- acled_mya_sf %&gt;% st_transform(crs = 32647)\nmmr_admin1 &lt;- mmr_admin1 %&gt;% st_transform(crs = 32647)\ntm_shape(mmr_admin1) + tm_polygons() + tm_shape(acled_mya_sf) + tm_dots(size = 0.05)\n\n\n\n\n\n\n\n\n\n\nTH1.4.2 Feature creation\nSince the data is timestamped, we are able to plot and compare the frequency of conflict events over time. Before we do, though, we need to standardise the date stamps, then compartmentalise them into their year, month and day components, so that we can perform spatial-temporal point patterns analysis (STPPA) later.\nAdditionally, the ACLED dataset splits the conflict incidents in Shan state into North, South and East, and incidents in the Bago region into East and West. We need to combine these into their representations in the polygon set.\n\nacled_mya_sf &lt;- acled_mya_sf %&gt;%\n    mutate(event_date = dmy(event_date)) %&gt;%\n    mutate(DayOfYear = yday(event_date)) %&gt;%\n    mutate(Month_num = format(event_date, \"%Y-%m\")) %&gt;%  # Year-Month format\n    mutate(Month_fac = factor(format(event_date, \"%B %Y\"))) %&gt;% # Full month\n    mutate(Quarter_num = ((year(event_date) - 2021) * 4) + quarter(event_date)) %&gt;% # Numbers quarters for STKDE\n    mutate(Quarter = paste(year(event_date), \"-\", quarter(event_date), \"Q\"))  %&gt;% # Quarter format\n    mutate(admin1 = case_when(\n      admin1 %in% c(\"Shan-North\", \"Shan-South\", \"Shan-East\") ~ \"Shan\",\n      admin1 %in% c(\"Bago-East\", \"Bago-West\") ~ \"Bago\",\n      TRUE ~ admin1\n    ))\n\n\n\n [1] \"Kachin\"      \"Shan\"        \"Magway\"      \"Sagaing\"     \"Chin\"       \n [6] \"Rakhine\"     \"Mandalay\"    \"Tanintharyi\" \"Kayah\"       \"Yangon\"     \n[11] \"Kayin\"       \"Mon\"         \"Ayeyarwady\"  \"Bago\"        \"Nay Pyi Taw\"\n\n\n\n\n [1] 15 14 13 12 11 10  9  8  7  6  5  4  3  2  1\n\n\n\n\n[1] 15\n\n\n [1] \"2024 - 3 Q\" \"2024 - 2 Q\" \"2024 - 1 Q\" \"2023 - 4 Q\" \"2023 - 3 Q\"\n [6] \"2023 - 2 Q\" \"2023 - 1 Q\" \"2022 - 4 Q\" \"2022 - 3 Q\" \"2022 - 2 Q\"\n[11] \"2022 - 1 Q\" \"2021 - 4 Q\" \"2021 - 3 Q\" \"2021 - 2 Q\" \"2021 - 1 Q\"\n\n\n\n# Plot points by quarter\ntm_shape(mmr_admin1) + tm_polygons() + tm_shape(acled_mya_sf) + tm_dots(size = 0.05) + tm_facets(by=\"Quarter_num\", free.coords=FALSE, drop.units = TRUE)\n\n\n\n\n\n\n\n\n\n\nSimple feature collection with 6 features and 34 fields\nGeometry type: POINT\nDimension:     XY\nBounding box:  xmin: 297846.6 ymin: 1920825 xmax: 389155.2 ymax: 2653913\nProjected CRS: WGS 84 / UTM zone 47N\n# A tibble: 6 × 35\n  event_id_cnty event_date  year time_precision disorder_type      event_type   \n  &lt;chr&gt;         &lt;date&gt;     &lt;dbl&gt;          &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;        \n1 MMR11022      2021-01-02  2021              1 Political violence Explosions/R…\n2 MMR10936      2021-01-02  2021              1 Political violence Battles      \n3 MMR10933      2021-01-01  2021              1 Political violence Battles      \n4 MMR10920      2021-01-01  2021              1 Political violence Violence aga…\n5 MMR10906      2021-01-01  2021              1 Political violence Battles      \n6 MMR10932      2021-01-01  2021              1 Political violence Battles      \n# ℹ 29 more variables: sub_event_type &lt;chr&gt;, actor1 &lt;chr&gt;, assoc_actor_1 &lt;chr&gt;,\n#   inter1 &lt;dbl&gt;, actor2 &lt;chr&gt;, assoc_actor_2 &lt;chr&gt;, inter2 &lt;dbl&gt;,\n#   interaction &lt;dbl&gt;, civilian_targeting &lt;chr&gt;, iso &lt;dbl&gt;, region &lt;chr&gt;,\n#   country &lt;chr&gt;, admin1 &lt;chr&gt;, admin2 &lt;chr&gt;, admin3 &lt;chr&gt;, location &lt;chr&gt;,\n#   geo_precision &lt;dbl&gt;, source &lt;chr&gt;, source_scale &lt;chr&gt;, notes &lt;chr&gt;,\n#   fatalities &lt;dbl&gt;, tags &lt;chr&gt;, timestamp &lt;dbl&gt;, geometry &lt;POINT [m]&gt;,\n#   DayOfYear &lt;dbl&gt;, Month_num &lt;chr&gt;, Month_fac &lt;fct&gt;, Quarter_num &lt;dbl&gt;, …\n\n\n\n\nTH1.4.3 Using owin to confine study area within Myanmar borders\nFinally, we need to create an owin object that will be combined with any ppp objects we create later for SPPA.\n\nmmr_admin1_owin &lt;- as.owin(mmr_admin1)\nplot(mmr_admin1_owin)\n\n\n\n\n\n\n\n# summary(mmr_admin1_owin)"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.5-performing-spatial-temporal-kde",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.5-performing-spatial-temporal-kde",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.5 Performing Spatial-Temporal KDE",
    "text": "TH1.5 Performing Spatial-Temporal KDE\nOur first order of business is to identify areas of consistently high conflict using spatial-temporal kernel density estimation (KDE). We can then zoom in on these areas for deeper research on why this is the case.\nAs always, we start by creating ppp objects out of our sf objects, and checking for duplicates.\n\nacled_mya_sf_quarters &lt;- acled_mya_sf %&gt;% select(Quarter_num)\nacled_mya_quarters_ppp &lt;- as.ppp(acled_mya_sf_quarters)\nany(duplicated(acled_mya_quarters_ppp))\n\n[1] TRUE\n\n\nSince there are duplicates, we need to handle them using jittering.\n\nacled_mya_quarters_ppp &lt;- rjitter(acled_mya_quarters_ppp, retry=TRUE, nsim=1, drop=TRUE)\nany(duplicated(acled_mya_quarters_ppp))\n\n[1] FALSE\n\n\nFinally, we join the owin object mapping the borders of Myanmar to the ppp object.\n\nacled_mya_quarters_ppp &lt;- acled_mya_quarters_ppp[mmr_admin1_owin]\nplot(acled_mya_quarters_ppp)\n\n\n\n\n\n\n\nsummary(acled_mya_quarters_ppp)\n\nMarked planar point pattern:  53551 points\nAverage intensity 7.996106e-08 points per square unit\n\nCoordinates are given to 15 decimal places\n\nmarks are numeric, of type 'double'\nSummary:\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  1.000   4.000   7.000   7.397  11.000  15.000 \n\nWindow: polygonal boundary\n3555 separate polygons (2977 holes)\n                    vertices         area relative.area\npolygon 1 (hole)           4 -1.17922e-06     -1.76e-18\npolygon 2 (hole)           4 -1.51784e-07     -2.27e-19\npolygon 3 (hole)          16 -3.19682e-05     -4.77e-17\npolygon 4 (hole)           4 -1.22376e-06     -1.83e-18\npolygon 5 (hole)           4 -2.82562e-06     -4.22e-18\npolygon 6 (hole)           4 -6.46982e-07     -9.66e-19\npolygon 7 (hole)           4 -1.71724e-07     -2.56e-19\npolygon 8 (hole)           8 -2.51690e-06     -3.76e-18\npolygon 9 (hole)           4 -7.57720e-08     -1.13e-19\npolygon 10 (hole)          4 -4.91084e-08     -7.33e-20\npolygon 11 (hole)          6 -1.39001e-06     -2.08e-18\npolygon 12 (hole)          3 -1.35988e-08     -2.03e-20\npolygon 13 (hole)          4 -6.46177e-09     -9.65e-21\npolygon 14 (hole)          6 -3.67433e-07     -5.49e-19\npolygon 15 (hole)          4 -6.96521e-09     -1.04e-20\npolygon 16 (hole)          7 -9.66998e-06     -1.44e-17\npolygon 17 (hole)          3 -2.89356e-10     -4.32e-22\npolygon 18 (hole)          3 -2.57036e-06     -3.84e-18\npolygon 19 (hole)          4 -2.15272e-09     -3.21e-21\npolygon 20 (hole)          4 -2.28390e-06     -3.41e-18\npolygon 21 (hole)          4 -1.99135e-06     -2.97e-18\npolygon 22 (hole)          4 -1.93357e-06     -2.89e-18\npolygon 23 (hole)          4 -6.97742e-07     -1.04e-18\npolygon 24 (hole)          8 -5.09105e-06     -7.60e-18\npolygon 25 (hole)          6 -7.26101e-08     -1.08e-19\npolygon 26 (hole)          4 -6.91841e-07     -1.03e-18\npolygon 27 (hole)          3 -7.31150e-11     -1.09e-22\npolygon 28 (hole)          8 -2.86981e-06     -4.29e-18\npolygon 29 (hole)          6 -9.22941e-07     -1.38e-18\npolygon 30 (hole)          6 -3.02897e-06     -4.52e-18\npolygon 31 (hole)          4 -8.89049e-08     -1.33e-19\npolygon 32 (hole)         11 -2.42073e-06     -3.61e-18\npolygon 33 (hole)          3 -4.23795e-13     -6.33e-25\npolygon 34 (hole)          4 -2.48176e-07     -3.71e-19\npolygon 35 (hole)          3 -1.85370e-08     -2.77e-20\npolygon 36 (hole)          4 -2.83385e-08     -4.23e-20\npolygon 37 (hole)          3 -4.91195e-10     -7.33e-22\npolygon 38 (hole)          6 -1.52398e-06     -2.28e-18\npolygon 39 (hole)          3 -6.44721e-07     -9.63e-19\npolygon 40 (hole)          4 -2.32264e-07     -3.47e-19\npolygon 41 (hole)          3 -6.61312e-08     -9.87e-20\npolygon 42 (hole)          3 -1.11892e-07     -1.67e-19\npolygon 43 (hole)          7 -3.16269e-08     -4.72e-20\npolygon 44 (hole)          4 -2.44134e-08     -3.65e-20\npolygon 45 (hole)          3 -3.50603e-08     -5.24e-20\npolygon 46 (hole)          4 -3.78666e-08     -5.65e-20\npolygon 47 (hole)          4 -4.96624e-10     -7.42e-22\npolygon 48 (hole)          4 -3.40331e-10     -5.08e-22\npolygon 49 (hole)          4 -1.45296e-08     -2.17e-20\npolygon 50 (hole)          6 -1.23032e-05     -1.84e-17\npolygon 51 (hole)          3 -9.08825e-08     -1.36e-19\npolygon 52 (hole)          4 -1.19443e-06     -1.78e-18\npolygon 53 (hole)          8 -2.05461e-06     -3.07e-18\npolygon 54 (hole)          8 -1.34895e-06     -2.01e-18\npolygon 55 (hole)         14 -1.01296e-05     -1.51e-17\npolygon 56 (hole)          4 -4.09782e-06     -6.12e-18\npolygon 57 (hole)          8 -5.16146e-07     -7.71e-19\npolygon 58 (hole)          8 -1.24437e-06     -1.86e-18\npolygon 59 (hole)          3 -2.71738e-10     -4.06e-22\npolygon 60 (hole)          4 -9.30785e-07     -1.39e-18\npolygon 61 (hole)          4 -5.71765e-06     -8.54e-18\npolygon 62 (hole)         16 -1.04764e-05     -1.56e-17\npolygon 63 (hole)          3 -6.05397e-10     -9.04e-22\npolygon 64 (hole)          4 -6.52246e-07     -9.74e-19\npolygon 65 (hole)          4 -2.80054e-07     -4.18e-19\npolygon 66 (hole)          6 -4.90726e-07     -7.33e-19\npolygon 67 (hole)         12 -5.92509e-06     -8.85e-18\npolygon 68 (hole)          6 -2.97467e-06     -4.44e-18\npolygon 69 (hole)         10 -1.52747e-06     -2.28e-18\npolygon 70 (hole)          4 -9.29454e-07     -1.39e-18\npolygon 71 (hole)          8 -6.23639e-06     -9.31e-18\npolygon 72 (hole)          5 -8.64266e-07     -1.29e-18\npolygon 73 (hole)          4 -4.81242e-08     -7.19e-20\npolygon 74 (hole)         16 -2.30660e-05     -3.44e-17\npolygon 75 (hole)          8 -5.25959e-06     -7.85e-18\npolygon 76 (hole)          5 -4.71377e-07     -7.04e-19\npolygon 77 (hole)          4 -1.51103e-07     -2.26e-19\npolygon 78 (hole)          3 -8.44522e-07     -1.26e-18\npolygon 79 (hole)          3 -3.82006e-10     -5.70e-22\npolygon 80                 3  0.00000e+00      0.00e+00\npolygon 81 (hole)          3 -8.99303e-11     -1.34e-22\npolygon 82 (hole)          4 -3.12397e-07     -4.66e-19\npolygon 83 (hole)          6 -2.90001e-06     -4.33e-18\npolygon 84 (hole)          3 -6.29455e-09     -9.40e-21\npolygon 85 (hole)          4 -1.40965e-08     -2.10e-20\npolygon 86 (hole)          4 -6.45745e-07     -9.64e-19\npolygon 87 (hole)          8 -6.44879e-07     -9.63e-19\npolygon 88 (hole)          3 -1.40894e-10     -2.10e-22\npolygon 89 (hole)          4 -1.28048e-06     -1.91e-18\npolygon 90 (hole)          4 -2.57033e-07     -3.84e-19\npolygon 91 (hole)          5 -9.51804e-07     -1.42e-18\npolygon 92 (hole)          3 -3.18705e-07     -4.76e-19\npolygon 93 (hole)         20 -1.49748e-05     -2.24e-17\npolygon 94 (hole)          4 -2.36338e-06     -3.53e-18\npolygon 95 (hole)         22 -5.29584e-05     -7.91e-17\npolygon 96 (hole)          6 -1.43118e-06     -2.14e-18\npolygon 97 (hole)          4 -2.75205e-06     -4.11e-18\npolygon 98 (hole)          5 -4.43529e-06     -6.62e-18\npolygon 99 (hole)          3 -5.24040e-07     -7.82e-19\npolygon 100 (hole)         3 -3.63106e-07     -5.42e-19\npolygon 101 (hole)         3 -7.97991e-09     -1.19e-20\npolygon 102 (hole)         4 -1.76305e-08     -2.63e-20\npolygon 103 (hole)         4 -6.17484e-08     -9.22e-20\npolygon 104 (hole)        12 -5.02736e-06     -7.51e-18\npolygon 105 (hole)         4 -1.17411e-06     -1.75e-18\npolygon 106 (hole)        18 -1.53693e-05     -2.29e-17\npolygon 107 (hole)         4 -1.45368e-07     -2.17e-19\npolygon 108 (hole)        19 -1.51599e-05     -2.26e-17\npolygon 109 (hole)         4 -2.89740e-02     -4.33e-14\npolygon 110 (hole)         5 -7.39370e-02     -1.10e-13\npolygon 111 (hole)        12 -8.54910e-06     -1.28e-17\npolygon 112 (hole)         6 -1.08246e-01     -1.62e-13\npolygon 113 (hole)        14 -1.24274e-05     -1.86e-17\npolygon 114 (hole)         4 -1.90050e-10     -2.84e-22\npolygon 115 (hole)         6 -5.60881e-06     -8.37e-18\npolygon 116 (hole)         4 -1.43170e-06     -2.14e-18\npolygon 117 (hole)        12 -3.49643e-06     -5.22e-18\npolygon 118 (hole)         6 -6.09677e-08     -9.10e-20\npolygon 119 (hole)         4 -7.45627e-07     -1.11e-18\npolygon 120 (hole)         6 -2.41126e-06     -3.60e-18\npolygon 121 (hole)         6 -1.45222e-07     -2.17e-19\npolygon 122 (hole)         8 -1.57620e-07     -2.35e-19\npolygon 123 (hole)         4 -2.06799e-07     -3.09e-19\npolygon 124 (hole)         4 -1.12630e-08     -1.68e-20\npolygon 125 (hole)         3 -8.75915e-12     -1.31e-23\npolygon 126 (hole)         3 -4.41734e-10     -6.60e-22\npolygon 127 (hole)         6 -1.52193e-07     -2.27e-19\npolygon 128 (hole)         3 -9.03696e-12     -1.35e-23\npolygon 129 (hole)         7 -1.07566e-07     -1.61e-19\npolygon 130 (hole)         4 -1.00064e-07     -1.49e-19\npolygon 131 (hole)         4 -6.10944e-10     -9.12e-22\npolygon 132 (hole)         4 -6.00905e-08     -8.97e-20\npolygon 133 (hole)         4 -4.63690e-08     -6.92e-20\npolygon 134 (hole)         8 -1.97860e-07     -2.95e-19\npolygon 135 (hole)         4 -1.59524e-08     -2.38e-20\npolygon 136 (hole)         4 -2.28390e-07     -3.41e-19\npolygon 137 (hole)         7 -1.93186e-06     -2.88e-18\npolygon 138 (hole)         4 -9.68302e-08     -1.45e-19\npolygon 139 (hole)         5 -4.64988e-08     -6.94e-20\npolygon 140 (hole)         5 -7.33204e-08     -1.09e-19\npolygon 141 (hole)         4 -1.16384e-07     -1.74e-19\npolygon 142 (hole)         4 -3.34594e-09     -5.00e-21\npolygon 143 (hole)        14 -8.43976e-07     -1.26e-18\npolygon 144                3  0.00000e+00      0.00e+00\npolygon 145 (hole)        10 -2.58404e-07     -3.86e-19\npolygon 146 (hole)         8 -4.37214e-07     -6.53e-19\npolygon 147 (hole)         4 -2.69646e-08     -4.03e-20\npolygon 148 (hole)        14 -7.91488e-07     -1.18e-18\npolygon 149 (hole)         4 -2.84188e-08     -4.24e-20\npolygon 150 (hole)         5 -2.68219e-09     -4.00e-21\npolygon 151 (hole)         3 -2.58426e-08     -3.86e-20\npolygon 152 (hole)         4 -9.45189e-08     -1.41e-19\npolygon 153 (hole)         6 -1.07212e-06     -1.60e-18\npolygon 154 (hole)         5 -8.02087e-08     -1.20e-19\npolygon 155 (hole)         4 -1.52812e-07     -2.28e-19\npolygon 156 (hole)         6 -1.67399e-07     -2.50e-19\npolygon 157 (hole)         4 -2.08047e-08     -3.11e-20\npolygon 158 (hole)         7 -3.57396e-07     -5.34e-19\npolygon 159 (hole)         3 -1.29130e-08     -1.93e-20\npolygon 160 (hole)         3 -8.06425e-08     -1.20e-19\npolygon 161 (hole)         4 -3.77433e-07     -5.64e-19\npolygon 162 (hole)         4 -1.00296e-07     -1.50e-19\npolygon 163 (hole)         3 -8.98589e-09     -1.34e-20\npolygon 164 (hole)         5 -1.34056e-07     -2.00e-19\npolygon 165 (hole)         4 -9.83445e-08     -1.47e-19\npolygon 166 (hole)         4 -2.00568e-07     -2.99e-19\npolygon 167 (hole)         4 -2.27760e-08     -3.40e-20\npolygon 168 (hole)         6 -1.74530e-07     -2.61e-19\npolygon 169 (hole)         7 -8.58409e-07     -1.28e-18\npolygon 170 (hole)         5 -2.57097e-06     -3.84e-18\npolygon 171                3  2.73718e-09      4.09e-21\npolygon 172 (hole)         5 -1.12534e-06     -1.68e-18\npolygon 173 (hole)         4 -5.29009e-07     -7.90e-19\npolygon 174 (hole)        14 -1.61457e-06     -2.41e-18\npolygon 175 (hole)         3 -3.71031e-08     -5.54e-20\npolygon 176 (hole)         4 -3.79353e-07     -5.66e-19\npolygon 177 (hole)         5 -1.19678e-07     -1.79e-19\npolygon 178 (hole)         4 -2.94190e-08     -4.39e-20\npolygon 179 (hole)         4 -2.78185e-07     -4.15e-19\npolygon 180 (hole)         4 -3.56031e-08     -5.32e-20\npolygon 181 (hole)         4 -9.29434e-09     -1.39e-20\npolygon 182 (hole)         5 -1.47329e-07     -2.20e-19\npolygon 183 (hole)         3 -2.03195e-08     -3.03e-20\npolygon 184 (hole)         5 -1.54881e-07     -2.31e-19\npolygon 185 (hole)         4 -4.82971e-10     -7.21e-22\npolygon 186 (hole)         5 -7.50213e-09     -1.12e-20\npolygon 187 (hole)         4 -1.59433e-08     -2.38e-20\npolygon 188 (hole)         4 -1.07874e-07     -1.61e-19\npolygon 189 (hole)        22 -1.16814e-05     -1.74e-17\npolygon 190 (hole)         3 -1.31628e-07     -1.97e-19\npolygon 191 (hole)         3 -1.19861e-09     -1.79e-21\npolygon 192                3  1.40809e-10      2.10e-22\npolygon 193 (hole)        18 -2.87101e-06     -4.29e-18\npolygon 194 (hole)         4 -5.47162e-08     -8.17e-20\npolygon 195 (hole)         3 -1.08984e-08     -1.63e-20\npolygon 196 (hole)         4 -2.26800e-07     -3.39e-19\npolygon 197 (hole)         4 -2.60332e-08     -3.89e-20\npolygon 198 (hole)         9 -3.03175e-06     -4.53e-18\npolygon 199 (hole)         3 -5.45915e-09     -8.15e-21\npolygon 200 (hole)         6 -5.72029e-07     -8.54e-19\npolygon 201 (hole)        13 -4.99957e-06     -7.47e-18\npolygon 202 (hole)        12 -1.67863e-05     -2.51e-17\npolygon 203 (hole)        13 -3.27066e-01     -4.88e-13\npolygon 204 (hole)         4 -2.29016e-09     -3.42e-21\npolygon 205 (hole)         5 -1.75108e-06     -2.61e-18\npolygon 206 (hole)        27 -2.16655e-05     -3.24e-17\npolygon 207 (hole)         4 -3.21153e-06     -4.80e-18\npolygon 208 (hole)         3 -1.82700e-08     -2.73e-20\npolygon 209 (hole)        10 -9.57521e-06     -1.43e-17\npolygon 210 (hole)         4 -1.73639e-07     -2.59e-19\npolygon 211 (hole)         4 -9.49080e-07     -1.42e-18\npolygon 212 (hole)         4 -4.13898e-07     -6.18e-19\npolygon 213 (hole)        10 -4.01841e-06     -6.00e-18\npolygon 214 (hole)         9 -3.25083e-06     -4.85e-18\npolygon 215 (hole)         4 -2.05272e-06     -3.07e-18\npolygon 216 (hole)        10 -6.71359e-06     -1.00e-17\npolygon 217 (hole)         8 -1.25283e-06     -1.87e-18\npolygon 218 (hole)         3 -6.37871e-08     -9.52e-20\npolygon 219 (hole)         7 -2.20958e-06     -3.30e-18\npolygon 220 (hole)         8 -1.11127e-06     -1.66e-18\npolygon 221 (hole)         4 -1.74725e-06     -2.61e-18\npolygon 222 (hole)         3 -4.43156e-07     -6.62e-19\npolygon 223 (hole)         5 -2.85377e-06     -4.26e-18\npolygon 224 (hole)         6 -1.17152e-06     -1.75e-18\npolygon 225 (hole)         4 -6.79930e-07     -1.02e-18\npolygon 226 (hole)         6 -1.03775e-06     -1.55e-18\npolygon 227 (hole)        11 -2.65253e-06     -3.96e-18\npolygon 228 (hole)         4 -2.80678e-06     -4.19e-18\npolygon 229 (hole)         6 -1.58031e-06     -2.36e-18\npolygon 230 (hole)        12 -5.22495e-06     -7.80e-18\npolygon 231 (hole)         6 -7.58316e-07     -1.13e-18\npolygon 232 (hole)         3 -8.68395e-11     -1.30e-22\npolygon 233 (hole)         6 -3.02978e-06     -4.52e-18\npolygon 234 (hole)         3 -4.73088e-08     -7.06e-20\npolygon 235 (hole)         6 -2.95733e-06     -4.42e-18\npolygon 236 (hole)         4 -1.54307e-07     -2.30e-19\npolygon 237 (hole)         3 -1.00078e-08     -1.49e-20\npolygon 238 (hole)         6 -7.31756e-07     -1.09e-18\npolygon 239 (hole)         3 -8.31105e-08     -1.24e-19\npolygon 240 (hole)         6 -1.21660e-06     -1.82e-18\npolygon 241 (hole)         4 -4.50645e-07     -6.73e-19\npolygon 242 (hole)         4 -8.05911e-07     -1.20e-18\npolygon 243 (hole)         4 -1.17474e-07     -1.75e-19\npolygon 244 (hole)         6 -8.07035e-07     -1.21e-18\npolygon 245 (hole)         4 -2.57062e-11     -3.84e-23\npolygon 246 (hole)        11 -3.55746e-06     -5.31e-18\npolygon 247 (hole)         4 -2.30195e-07     -3.44e-19\npolygon 248 (hole)         4 -4.05292e-09     -6.05e-21\npolygon 249 (hole)         6 -1.30161e-06     -1.94e-18\npolygon 250 (hole)         3 -9.27009e-09     -1.38e-20\npolygon 251 (hole)         4 -1.43838e-08     -2.15e-20\npolygon 252 (hole)         3 -4.13961e-07     -6.18e-19\npolygon 253 (hole)         4 -8.91297e-10     -1.33e-21\npolygon 254 (hole)         4 -6.87468e-08     -1.03e-19\npolygon 255 (hole)         4 -2.10653e-06     -3.15e-18\npolygon 256 (hole)         6 -1.63109e-06     -2.44e-18\npolygon 257 (hole)         4 -6.58467e-07     -9.83e-19\npolygon 258 (hole)         3 -1.54768e-07     -2.31e-19\npolygon 259 (hole)        18 -8.38859e-06     -1.25e-17\npolygon 260 (hole)         4 -8.28389e-11     -1.24e-22\npolygon 261 (hole)         4 -2.99172e-07     -4.47e-19\npolygon 262 (hole)         4 -5.85808e-08     -8.75e-20\npolygon 263 (hole)         4 -7.55475e-11     -1.13e-22\npolygon 264 (hole)         3 -3.52174e-07     -5.26e-19\npolygon 265 (hole)         6 -4.38405e-07     -6.55e-19\npolygon 266 (hole)         4 -5.23317e-07     -7.81e-19\npolygon 267 (hole)         4 -1.80397e-10     -2.69e-22\npolygon 268 (hole)         4 -5.04558e-08     -7.53e-20\npolygon 269 (hole)         6 -1.30117e-06     -1.94e-18\npolygon 270 (hole)         6 -1.43008e-06     -2.14e-18\npolygon 271 (hole)        10 -3.67094e-06     -5.48e-18\npolygon 272 (hole)         4 -4.48594e-08     -6.70e-20\npolygon 273 (hole)        10 -5.52927e-06     -8.26e-18\npolygon 274 (hole)         8 -3.88253e-06     -5.80e-18\npolygon 275 (hole)         4 -1.25417e-06     -1.87e-18\npolygon 276 (hole)         7 -2.01027e-06     -3.00e-18\npolygon 277 (hole)         4 -3.80010e-08     -5.67e-20\npolygon 278 (hole)         3 -5.61249e-08     -8.38e-20\npolygon 279 (hole)         4 -3.52769e-08     -5.27e-20\npolygon 280 (hole)         4 -6.43696e-07     -9.61e-19\npolygon 281 (hole)         4 -2.07381e-08     -3.10e-20\npolygon 282 (hole)         4 -1.69860e-06     -2.54e-18\npolygon 283 (hole)         6 -4.08828e-06     -6.10e-18\npolygon 284 (hole)         4 -1.84660e-07     -2.76e-19\npolygon 285 (hole)        10 -1.49409e-06     -2.23e-18\npolygon 286 (hole)         3 -8.69358e-07     -1.30e-18\npolygon 287 (hole)         3 -6.79461e-11     -1.01e-22\npolygon 288 (hole)         3 -3.55641e-07     -5.31e-19\npolygon 289 (hole)         3 -1.44619e-10     -2.16e-22\npolygon 290 (hole)        12 -3.78169e-06     -5.65e-18\npolygon 291 (hole)         4 -1.07268e-06     -1.60e-18\npolygon 292 (hole)         6 -2.11280e-07     -3.15e-19\npolygon 293 (hole)        10 -4.84998e-06     -7.24e-18\npolygon 294 (hole)         8 -3.13934e-06     -4.69e-18\npolygon 295 (hole)         3 -1.61476e-09     -2.41e-21\npolygon 296 (hole)        21 -1.58612e-05     -2.37e-17\npolygon 297 (hole)        10 -1.77996e-06     -2.66e-18\npolygon 298 (hole)         6 -2.57245e-07     -3.84e-19\npolygon 299 (hole)         5 -1.38412e-07     -2.07e-19\npolygon 300 (hole)        10 -5.95296e-06     -8.89e-18\npolygon 301 (hole)         9 -9.48127e-07     -1.42e-18\npolygon 302 (hole)         8 -8.49674e-06     -1.27e-17\npolygon 303 (hole)         4 -7.87867e-08     -1.18e-19\npolygon 304 (hole)         4 -5.26005e-07     -7.85e-19\npolygon 305 (hole)         3 -4.72282e-08     -7.05e-20\npolygon 306 (hole)         7 -1.83520e-06     -2.74e-18\npolygon 307 (hole)         7 -2.26806e-05     -3.39e-17\npolygon 308 (hole)         3 -1.30326e-08     -1.95e-20\npolygon 309 (hole)         3 -2.58013e-07     -3.85e-19\npolygon 310 (hole)         3 -3.21497e-06     -4.80e-18\npolygon 311 (hole)         4 -2.84071e-07     -4.24e-19\npolygon 312 (hole)         3 -1.31497e-12     -1.96e-24\npolygon 313 (hole)         4 -6.53285e-07     -9.75e-19\npolygon 314 (hole)         5 -1.08946e-09     -1.63e-21\npolygon 315 (hole)         4 -4.33947e-09     -6.48e-21\npolygon 316 (hole)         3 -2.44141e-07     -3.65e-19\npolygon 317 (hole)         6 -1.86637e-06     -2.79e-18\npolygon 318 (hole)         6 -5.04834e-07     -7.54e-19\npolygon 319 (hole)         6 -1.45755e-06     -2.18e-18\npolygon 320 (hole)        22 -1.23229e-05     -1.84e-17\npolygon 321 (hole)         8 -3.96507e-06     -5.92e-18\npolygon 322 (hole)         8 -3.48176e-07     -5.20e-19\npolygon 323 (hole)         3 -8.14734e-08     -1.22e-19\npolygon 324 (hole)         8 -1.85179e-06     -2.77e-18\npolygon 325 (hole)         8 -1.55650e-06     -2.32e-18\npolygon 326 (hole)        13 -6.24455e-06     -9.32e-18\npolygon 327 (hole)        16 -5.31554e-06     -7.94e-18\npolygon 328 (hole)         4 -6.92069e-08     -1.03e-19\npolygon 329 (hole)         4 -3.82693e-07     -5.71e-19\npolygon 330 (hole)         4 -5.54737e-07     -8.28e-19\npolygon 331 (hole)        16 -5.48170e-06     -8.19e-18\npolygon 332 (hole)         4 -1.31400e-08     -1.96e-20\npolygon 333 (hole)         8 -1.80531e-06     -2.70e-18\npolygon 334 (hole)         6 -1.63550e-07     -2.44e-19\npolygon 335 (hole)         4 -5.26585e-07     -7.86e-19\npolygon 336 (hole)         4 -1.54884e-07     -2.31e-19\npolygon 337 (hole)         6 -9.73839e-07     -1.45e-18\npolygon 338 (hole)        13 -4.09827e-06     -6.12e-18\npolygon 339 (hole)         4 -1.02765e-06     -1.53e-18\npolygon 340 (hole)        18 -6.88726e-06     -1.03e-17\npolygon 341 (hole)        10 -2.63104e-06     -3.93e-18\npolygon 342 (hole)         8 -2.72116e-06     -4.06e-18\npolygon 343 (hole)         4 -1.68671e-07     -2.52e-19\npolygon 344 (hole)        12 -3.23259e-06     -4.83e-18\npolygon 345 (hole)         6 -1.17038e-06     -1.75e-18\npolygon 346 (hole)         8 -3.37698e-06     -5.04e-18\npolygon 347 (hole)         4 -1.05355e-11     -1.57e-23\npolygon 348 (hole)         4 -1.52254e-09     -2.27e-21\npolygon 349 (hole)         4 -1.35663e-08     -2.03e-20\npolygon 350 (hole)         4 -3.67328e-08     -5.48e-20\npolygon 351 (hole)         4 -1.54101e-09     -2.30e-21\npolygon 352 (hole)         8 -1.13605e-06     -1.70e-18\npolygon 353 (hole)         4 -2.38757e-07     -3.57e-19\npolygon 354 (hole)        16 -2.41684e-06     -3.61e-18\npolygon 355 (hole)        39 -1.25544e-05     -1.87e-17\npolygon 356 (hole)         4 -1.99814e-08     -2.98e-20\npolygon 357 (hole)         8 -1.34242e-06     -2.00e-18\npolygon 358 (hole)         6 -7.63185e-07     -1.14e-18\npolygon 359 (hole)         4 -7.53921e-07     -1.13e-18\npolygon 360 (hole)         3 -4.37276e-09     -6.53e-21\npolygon 361 (hole)         8 -3.48924e-06     -5.21e-18\npolygon 362 (hole)         6 -1.13581e-06     -1.70e-18\npolygon 363 (hole)        40 -1.09783e-05     -1.64e-17\npolygon 364 (hole)         8 -1.87798e-06     -2.80e-18\npolygon 365 (hole)         6 -3.47210e-06     -5.18e-18\npolygon 366 (hole)        26 -1.15213e-05     -1.72e-17\npolygon 367 (hole)         3 -3.93519e-07     -5.88e-19\npolygon 368 (hole)         7 -2.38727e-06     -3.56e-18\npolygon 369 (hole)         8 -2.06048e-06     -3.08e-18\npolygon 370 (hole)         4 -1.56540e-06     -2.34e-18\npolygon 371 (hole)         5 -1.03251e-06     -1.54e-18\npolygon 372 (hole)         8 -1.11960e-06     -1.67e-18\npolygon 373 (hole)         6 -3.39517e-07     -5.07e-19\npolygon 374 (hole)        15 -5.58246e-06     -8.34e-18\npolygon 375 (hole)         3 -7.54222e-07     -1.13e-18\npolygon 376 (hole)         6 -6.10625e-07     -9.12e-19\npolygon 377 (hole)         6 -4.16709e-07     -6.22e-19\npolygon 378 (hole)         4 -7.78401e-07     -1.16e-18\npolygon 379 (hole)        12 -5.50958e-06     -8.23e-18\npolygon 380 (hole)         4 -7.27636e-08     -1.09e-19\npolygon 381 (hole)         6 -1.42155e-06     -2.12e-18\npolygon 382 (hole)        10 -1.60609e-06     -2.40e-18\npolygon 383 (hole)         4 -1.67043e-07     -2.49e-19\npolygon 384 (hole)        11 -6.26263e-06     -9.35e-18\npolygon 385 (hole)        12 -7.67542e-06     -1.15e-17\npolygon 386 (hole)         3 -2.45564e-07     -3.67e-19\npolygon 387 (hole)         4 -3.67944e-07     -5.49e-19\npolygon 388 (hole)         4 -2.89692e-07     -4.33e-19\npolygon 389 (hole)         4 -3.76234e-07     -5.62e-19\npolygon 390 (hole)         7 -5.78373e-06     -8.64e-18\npolygon 391 (hole)         4 -3.44773e-07     -5.15e-19\npolygon 392 (hole)        19 -2.15288e-06     -3.21e-18\npolygon 393 (hole)         4 -1.18289e-07     -1.77e-19\npolygon 394 (hole)         3 -5.13605e-07     -7.67e-19\npolygon 395 (hole)         4 -1.71917e-07     -2.57e-19\npolygon 396 (hole)        10 -9.61983e-06     -1.44e-17\npolygon 397 (hole)        10 -3.82411e-06     -5.71e-18\npolygon 398 (hole)         3 -8.05741e-08     -1.20e-19\npolygon 399 (hole)         4 -1.01022e-06     -1.51e-18\npolygon 400 (hole)         3 -1.91474e-11     -2.86e-23\npolygon 401 (hole)         4 -7.93468e-07     -1.18e-18\npolygon 402 (hole)         6 -5.42813e-07     -8.11e-19\npolygon 403 (hole)        22 -2.59674e-05     -3.88e-17\npolygon 404 (hole)         9 -1.41691e-05     -2.12e-17\npolygon 405 (hole)         7 -1.54774e-06     -2.31e-18\npolygon 406 (hole)        12 -1.03263e-05     -1.54e-17\npolygon 407 (hole)         4 -5.41035e-08     -8.08e-20\npolygon 408 (hole)         6 -2.04282e-06     -3.05e-18\npolygon 409 (hole)         9 -1.17809e-06     -1.76e-18\npolygon 410 (hole)        12 -7.72004e-06     -1.15e-17\npolygon 411 (hole)         3 -3.02414e-12     -4.52e-24\npolygon 412 (hole)        10 -1.83006e-06     -2.73e-18\npolygon 413 (hole)         4 -7.51067e-08     -1.12e-19\npolygon 414 (hole)        12 -4.62852e-06     -6.91e-18\npolygon 415 (hole)         3 -7.28660e-08     -1.09e-19\npolygon 416 (hole)        12 -4.05803e-06     -6.06e-18\npolygon 417 (hole)         7 -4.85696e-06     -7.25e-18\npolygon 418 (hole)         3 -7.59230e-07     -1.13e-18\npolygon 419 (hole)         5 -2.71519e-06     -4.05e-18\npolygon 420 (hole)         3 -1.71925e-06     -2.57e-18\npolygon 421 (hole)         6 -5.19131e-06     -7.75e-18\npolygon 422 (hole)         5 -2.28045e-06     -3.41e-18\npolygon 423 (hole)        10 -5.47958e-07     -8.18e-19\npolygon 424 (hole)         7 -7.38497e-06     -1.10e-17\npolygon 425 (hole)         4 -1.49686e-06     -2.24e-18\npolygon 426 (hole)         4 -5.57534e-07     -8.32e-19\npolygon 427 (hole)         3 -7.21303e-09     -1.08e-20\npolygon 428 (hole)        36 -9.98946e-06     -1.49e-17\npolygon 429 (hole)         4 -9.88173e-09     -1.48e-20\npolygon 430 (hole)        21 -3.12749e-05     -4.67e-17\npolygon 431 (hole)         6 -3.98805e-06     -5.95e-18\npolygon 432 (hole)         9 -1.90464e-06     -2.84e-18\npolygon 433 (hole)         8 -8.32697e-06     -1.24e-17\npolygon 434 (hole)        10 -5.56359e-06     -8.31e-18\npolygon 435 (hole)         3 -1.35521e-06     -2.02e-18\npolygon 436 (hole)         3 -3.11126e-07     -4.65e-19\npolygon 437 (hole)         4 -1.93201e-07     -2.88e-19\npolygon 438 (hole)         4 -2.54318e-06     -3.80e-18\npolygon 439 (hole)        16 -1.44270e-05     -2.15e-17\npolygon 440 (hole)         4 -1.41609e-07     -2.11e-19\npolygon 441 (hole)        12 -4.09743e-06     -6.12e-18\npolygon 442 (hole)         8 -1.57135e-06     -2.35e-18\npolygon 443 (hole)         4 -1.68776e-07     -2.52e-19\npolygon 444 (hole)         6 -1.99765e-06     -2.98e-18\npolygon 445 (hole)         6 -1.91744e-06     -2.86e-18\npolygon 446 (hole)         6 -1.90754e-06     -2.85e-18\npolygon 447 (hole)         6 -2.48305e-06     -3.71e-18\npolygon 448 (hole)        26 -3.01895e-05     -4.51e-17\npolygon 449 (hole)         4 -1.33556e-06     -1.99e-18\npolygon 450 (hole)        12 -1.07964e-05     -1.61e-17\npolygon 451 (hole)        19 -1.00111e-05     -1.49e-17\npolygon 452 (hole)        10 -1.34543e-06     -2.01e-18\npolygon 453 (hole)         4 -3.18526e-08     -4.76e-20\npolygon 454 (hole)        20 -3.76696e-06     -5.62e-18\npolygon 455 (hole)         8 -6.55378e-06     -9.79e-18\npolygon 456 (hole)        12 -5.89263e-06     -8.80e-18\npolygon 457 (hole)        23 -1.97073e-05     -2.94e-17\npolygon 458 (hole)         4 -9.55118e-07     -1.43e-18\npolygon 459 (hole)        12 -2.02628e-06     -3.03e-18\npolygon 460 (hole)         6 -2.44077e-06     -3.64e-18\npolygon 461 (hole)         4 -8.99374e-07     -1.34e-18\npolygon 462 (hole)         6 -4.02676e-06     -6.01e-18\npolygon 463 (hole)        10 -9.26810e-06     -1.38e-17\npolygon 464 (hole)         3 -1.31165e-11     -1.96e-23\npolygon 465 (hole)         6 -8.92634e-07     -1.33e-18\npolygon 466 (hole)        11 -7.19420e-06     -1.07e-17\npolygon 467 (hole)         4 -9.91452e-07     -1.48e-18\npolygon 468 (hole)        19 -1.62364e-05     -2.42e-17\npolygon 469 (hole)         6 -3.92848e-06     -5.87e-18\npolygon 470 (hole)        32 -2.81336e-05     -4.20e-17\npolygon 471 (hole)        16 -1.96856e-05     -2.94e-17\npolygon 472 (hole)         4 -5.09630e-07     -7.61e-19\npolygon 473 (hole)        17 -9.43900e-06     -1.41e-17\npolygon 474 (hole)         4 -8.64641e-07     -1.29e-18\npolygon 475 (hole)         3 -4.49792e-12     -6.72e-24\npolygon 476 (hole)         4 -1.27844e-06     -1.91e-18\npolygon 477 (hole)         6 -1.80469e-07     -2.69e-19\npolygon 478 (hole)         4 -1.04434e-07     -1.56e-19\npolygon 479 (hole)         4 -2.44529e-08     -3.65e-20\npolygon 480 (hole)         3 -4.09291e-12     -6.11e-24\npolygon 481                3  4.48081e-10      6.69e-22\npolygon 482 (hole)         3 -2.15225e-10     -3.21e-22\npolygon 483 (hole)         4 -8.72824e-07     -1.30e-18\npolygon 484 (hole)         4 -3.47505e-07     -5.19e-19\npolygon 485 (hole)         4 -1.84038e-06     -2.75e-18\npolygon 486 (hole)         3 -1.05492e-11     -1.58e-23\npolygon 487 (hole)         3 -1.38710e-07     -2.07e-19\npolygon 488 (hole)         7 -5.62382e-06     -8.40e-18\npolygon 489 (hole)         3 -1.50348e-07     -2.24e-19\npolygon 490 (hole)        40 -3.21663e-05     -4.80e-17\npolygon 491 (hole)        10 -5.80641e-06     -8.67e-18\npolygon 492 (hole)         7 -2.82331e-06     -4.22e-18\npolygon 493 (hole)         7 -6.20795e-06     -9.27e-18\npolygon 494 (hole)        10 -7.04963e-06     -1.05e-17\npolygon 495 (hole)         4 -1.95555e-06     -2.92e-18\npolygon 496 (hole)        16 -7.50984e-06     -1.12e-17\npolygon 497 (hole)         7 -4.40178e-07     -6.57e-19\npolygon 498 (hole)        10 -4.52628e-06     -6.76e-18\npolygon 499 (hole)        19 -7.71381e-06     -1.15e-17\npolygon 500 (hole)        16 -8.97205e-06     -1.34e-17\npolygon 501 (hole)         3 -6.37225e-10     -9.51e-22\npolygon 502 (hole)         6 -2.24910e-06     -3.36e-18\npolygon 503 (hole)         9 -2.18650e-06     -3.26e-18\npolygon 504 (hole)        12 -2.08237e-06     -3.11e-18\npolygon 505 (hole)         6 -1.76688e-06     -2.64e-18\npolygon 506 (hole)        20 -9.25321e-06     -1.38e-17\npolygon 507 (hole)        12 -2.00803e-06     -3.00e-18\npolygon 508 (hole)         8 -1.92434e-06     -2.87e-18\npolygon 509 (hole)        10 -2.57683e-06     -3.85e-18\npolygon 510 (hole)         6 -1.06924e-06     -1.60e-18\npolygon 511 (hole)        26 -1.66652e-05     -2.49e-17\npolygon 512 (hole)         4 -3.88535e-07     -5.80e-19\npolygon 513 (hole)        15 -3.79127e-06     -5.66e-18\npolygon 514 (hole)        10 -4.05429e-06     -6.05e-18\npolygon 515 (hole)         4 -2.04133e-07     -3.05e-19\npolygon 516 (hole)         6 -1.39013e-06     -2.08e-18\npolygon 517 (hole)         4 -1.21592e-07     -1.82e-19\npolygon 518 (hole)         6 -2.12920e-06     -3.18e-18\npolygon 519 (hole)         4 -9.76810e-09     -1.46e-20\npolygon 520 (hole)        18 -6.55930e-06     -9.79e-18\npolygon 521 (hole)        11 -2.22514e-06     -3.32e-18\npolygon 522 (hole)         4 -4.84253e-07     -7.23e-19\npolygon 523 (hole)         3 -5.57299e-08     -8.32e-20\npolygon 524 (hole)         3 -1.20399e-08     -1.80e-20\npolygon 525 (hole)         4 -3.24893e-07     -4.85e-19\npolygon 526 (hole)         4 -1.03541e-08     -1.55e-20\npolygon 527 (hole)        10 -1.75315e-06     -2.62e-18\npolygon 528 (hole)         9 -1.33734e-06     -2.00e-18\npolygon 529 (hole)         9 -8.38337e-07     -1.25e-18\npolygon 530 (hole)         7 -6.23885e-07     -9.32e-19\npolygon 531 (hole)         6 -2.62141e-06     -3.91e-18\npolygon 532 (hole)         4 -2.80306e-08     -4.19e-20\npolygon 533 (hole)         3 -3.90799e-08     -5.84e-20\npolygon 534 (hole)         3 -5.18751e-09     -7.75e-21\npolygon 535 (hole)         5 -3.36718e-06     -5.03e-18\npolygon 536 (hole)         4 -2.27211e-07     -3.39e-19\npolygon 537 (hole)         9 -8.96919e-07     -1.34e-18\npolygon 538 (hole)         4 -9.22478e-08     -1.38e-19\npolygon 539 (hole)         5 -2.81450e-08     -4.20e-20\npolygon 540 (hole)         4 -3.64948e-08     -5.45e-20\npolygon 541 (hole)        10 -4.17715e-06     -6.24e-18\npolygon 542 (hole)         4 -3.65585e-07     -5.46e-19\npolygon 543 (hole)         4 -6.45414e-07     -9.64e-19\npolygon 544 (hole)         3 -7.76383e-07     -1.16e-18\npolygon 545 (hole)         4 -3.38505e-08     -5.05e-20\npolygon 546 (hole)         4 -2.65357e-07     -3.96e-19\npolygon 547 (hole)         4 -1.60263e-07     -2.39e-19\npolygon 548 (hole)         6 -6.27574e-07     -9.37e-19\npolygon 549 (hole)         5 -2.76735e-06     -4.13e-18\npolygon 550 (hole)         5 -4.56093e-07     -6.81e-19\npolygon 551 (hole)         4 -4.76599e-06     -7.12e-18\npolygon 552 (hole)         4 -2.98815e-07     -4.46e-19\npolygon 553 (hole)         6 -8.97432e-07     -1.34e-18\npolygon 554 (hole)         5 -5.57552e-06     -8.33e-18\npolygon 555 (hole)         3 -1.54772e-07     -2.31e-19\npolygon 556 (hole)         3 -6.05573e-07     -9.04e-19\npolygon 557 (hole)         5 -3.37601e-06     -5.04e-18\npolygon 558 (hole)         6 -2.45701e-06     -3.67e-18\npolygon 559 (hole)         4 -3.52240e-09     -5.26e-21\npolygon 560 (hole)         5 -1.28069e-06     -1.91e-18\npolygon 561 (hole)         3 -2.06009e-08     -3.08e-20\npolygon 562 (hole)         4 -3.18981e-06     -4.76e-18\npolygon 563 (hole)         3 -9.49022e-08     -1.42e-19\npolygon 564 (hole)         3 -7.58867e-08     -1.13e-19\npolygon 565 (hole)         4 -4.33598e-07     -6.47e-19\npolygon 566 (hole)         4 -2.58341e-08     -3.86e-20\npolygon 567 (hole)         3 -2.81250e-09     -4.20e-21\npolygon 568 (hole)         4 -8.21822e-07     -1.23e-18\npolygon 569 (hole)         6 -9.66697e-07     -1.44e-18\npolygon 570 (hole)         6 -1.55890e-06     -2.33e-18\npolygon 571 (hole)         7 -4.08907e-06     -6.11e-18\npolygon 572 (hole)         3 -5.51929e-07     -8.24e-19\npolygon 573 (hole)         3 -3.00332e-07     -4.48e-19\npolygon 574 (hole)         4 -1.90988e-06     -2.85e-18\npolygon 575 (hole)         4 -5.75747e-07     -8.60e-19\npolygon 576 (hole)         4 -8.89384e-07     -1.33e-18\npolygon 577 (hole)         4 -8.97940e-07     -1.34e-18\npolygon 578 (hole)         3 -1.66733e-09     -2.49e-21\npolygon 579 (hole)         4 -1.52669e-06     -2.28e-18\npolygon 580 (hole)         3 -9.82376e-08     -1.47e-19\npolygon 581 (hole)         7 -4.20478e-07     -6.28e-19\npolygon 582 (hole)         4 -5.78404e-07     -8.64e-19\npolygon 583 (hole)         4 -1.12886e-07     -1.69e-19\npolygon 584 (hole)         4 -2.79586e-06     -4.17e-18\npolygon 585 (hole)         3 -6.11099e-07     -9.12e-19\npolygon 586 (hole)         4 -7.65090e-07     -1.14e-18\npolygon 587 (hole)         4 -4.65736e-07     -6.95e-19\npolygon 588 (hole)         3 -7.51030e-09     -1.12e-20\npolygon 589 (hole)         4 -3.92071e-08     -5.85e-20\npolygon 590 (hole)         4 -6.18955e-07     -9.24e-19\npolygon 591 (hole)         3 -3.08035e-07     -4.60e-19\npolygon 592 (hole)         6 -2.18374e-06     -3.26e-18\npolygon 593 (hole)         7 -1.32636e-06     -1.98e-18\npolygon 594 (hole)         8 -5.35877e-07     -8.00e-19\npolygon 595 (hole)         4 -2.71934e-07     -4.06e-19\npolygon 596 (hole)         4 -2.52827e-07     -3.78e-19\npolygon 597 (hole)         7 -4.76008e-07     -7.11e-19\npolygon 598 (hole)         4 -4.90880e-06     -7.33e-18\npolygon 599 (hole)         6 -9.66325e-07     -1.44e-18\npolygon 600 (hole)         8 -1.76023e-06     -2.63e-18\npolygon 601 (hole)         8 -4.32675e-07     -6.46e-19\npolygon 602 (hole)         4 -3.17498e-07     -4.74e-19\npolygon 603 (hole)         3 -5.95218e-09     -8.89e-21\npolygon 604 (hole)         6 -9.18734e-06     -1.37e-17\npolygon 605 (hole)         3 -1.59625e-09     -2.38e-21\npolygon 606 (hole)         3 -1.05422e-07     -1.57e-19\npolygon 607 (hole)         3 -3.32399e-06     -4.96e-18\npolygon 608 (hole)        16 -2.07485e-05     -3.10e-17\npolygon 609 (hole)        10 -6.15237e-06     -9.19e-18\npolygon 610 (hole)         7 -1.61478e-06     -2.41e-18\npolygon 611 (hole)         3 -6.16826e-07     -9.21e-19\npolygon 612 (hole)         9 -7.81839e-06     -1.17e-17\npolygon 613 (hole)         4 -1.72055e-06     -2.57e-18\npolygon 614 (hole)         4 -3.53368e-06     -5.28e-18\npolygon 615 (hole)        22 -3.22862e-05     -4.82e-17\npolygon 616 (hole)         7 -3.72870e-06     -5.57e-18\npolygon 617 (hole)         4 -3.67219e-07     -5.48e-19\npolygon 618 (hole)         7 -4.34664e-06     -6.49e-18\npolygon 619 (hole)        34 -2.22103e-05     -3.32e-17\npolygon 620 (hole)        36 -4.45744e-05     -6.66e-17\npolygon 621 (hole)         4 -3.62444e-10     -5.41e-22\npolygon 622 (hole)         4 -3.38637e-07     -5.06e-19\npolygon 623 (hole)        10 -1.20407e-05     -1.80e-17\npolygon 624 (hole)        18 -6.75442e-06     -1.01e-17\npolygon 625 (hole)         4 -2.58807e-06     -3.86e-18\npolygon 626 (hole)         4 -2.27048e-06     -3.39e-18\npolygon 627 (hole)         4 -9.15837e-07     -1.37e-18\npolygon 628 (hole)        20 -1.06801e-05     -1.59e-17\npolygon 629 (hole)        11 -2.28909e-05     -3.42e-17\npolygon 630 (hole)         5 -9.99451e-06     -1.49e-17\npolygon 631 (hole)         4 -1.47029e-07     -2.20e-19\npolygon 632 (hole)         7 -8.56059e-07     -1.28e-18\npolygon 633 (hole)         4 -1.56852e-07     -2.34e-19\npolygon 634 (hole)         6 -3.00288e-07     -4.48e-19\npolygon 635 (hole)         3 -3.93582e-08     -5.88e-20\npolygon 636 (hole)         4 -1.67592e-05     -2.50e-17\npolygon 637 (hole)         6 -1.89713e-05     -2.83e-17\npolygon 638 (hole)         7 -6.90502e-06     -1.03e-17\npolygon 639 (hole)        15 -1.51956e-05     -2.27e-17\npolygon 640 (hole)         3 -2.57281e-06     -3.84e-18\npolygon 641 (hole)         4 -2.47789e-06     -3.70e-18\npolygon 642 (hole)         4 -1.65301e-06     -2.47e-18\npolygon 643 (hole)        43 -1.42035e-04     -2.12e-16\npolygon 644 (hole)         5 -1.02734e-05     -1.53e-17\npolygon 645 (hole)         8 -1.11191e-05     -1.66e-17\npolygon 646 (hole)         6 -2.14781e-06     -3.21e-18\npolygon 647 (hole)         6 -3.78093e-06     -5.65e-18\npolygon 648 (hole)         4 -7.46113e-08     -1.11e-19\npolygon 649 (hole)        11 -2.69065e-06     -4.02e-18\npolygon 650 (hole)         5 -2.93049e-07     -4.38e-19\npolygon 651 (hole)        17 -7.83435e-06     -1.17e-17\npolygon 652 (hole)         3 -5.33410e-08     -7.96e-20\npolygon 653 (hole)        26 -8.78286e-06     -1.31e-17\npolygon 654 (hole)         4 -4.41637e-07     -6.59e-19\npolygon 655 (hole)        16 -9.74263e-06     -1.45e-17\npolygon 656 (hole)         4 -4.73661e-07     -7.07e-19\npolygon 657 (hole)        13 -6.55106e-06     -9.78e-18\npolygon 658 (hole)         9 -3.00258e-05     -4.48e-17\npolygon 659 (hole)         9 -1.12701e-05     -1.68e-17\npolygon 660 (hole)         3 -1.10177e-06     -1.65e-18\npolygon 661 (hole)        38 -3.54618e-05     -5.30e-17\npolygon 662 (hole)         8 -1.74404e-06     -2.60e-18\npolygon 663 (hole)         8 -2.56810e-06     -3.83e-18\npolygon 664 (hole)         5 -2.38830e-07     -3.57e-19\npolygon 665 (hole)         5 -7.21593e-07     -1.08e-18\npolygon 666 (hole)        19 -2.24084e-06     -3.35e-18\npolygon 667 (hole)         8 -1.64175e-06     -2.45e-18\npolygon 668 (hole)         5 -1.09412e-06     -1.63e-18\npolygon 669 (hole)         4 -1.77013e-07     -2.64e-19\npolygon 670 (hole)         4 -2.94344e-07     -4.40e-19\npolygon 671 (hole)         6 -1.55669e-06     -2.32e-18\npolygon 672 (hole)         6 -1.75930e-06     -2.63e-18\npolygon 673 (hole)         6 -2.68574e-06     -4.01e-18\npolygon 674 (hole)        10 -7.18257e-06     -1.07e-17\npolygon 675 (hole)         8 -2.46398e-06     -3.68e-18\npolygon 676 (hole)         4 -6.90305e-07     -1.03e-18\npolygon 677 (hole)         6 -6.59631e-07     -9.85e-19\npolygon 678 (hole)         7 -1.29369e-06     -1.93e-18\npolygon 679 (hole)         8 -1.85201e-06     -2.77e-18\npolygon 680 (hole)         6 -4.89105e-06     -7.30e-18\npolygon 681 (hole)         4 -1.65358e-07     -2.47e-19\npolygon 682 (hole)         6 -3.99927e-07     -5.97e-19\npolygon 683 (hole)         9 -1.87181e-06     -2.79e-18\npolygon 684 (hole)        24 -6.69228e-06     -9.99e-18\npolygon 685 (hole)         4 -5.46189e-07     -8.16e-19\npolygon 686 (hole)        20 -6.12444e-06     -9.14e-18\npolygon 687 (hole)        18 -6.77458e-06     -1.01e-17\npolygon 688 (hole)         4 -6.40146e-07     -9.56e-19\npolygon 689 (hole)        11 -8.53899e-06     -1.28e-17\npolygon 690 (hole)         7 -4.33857e-06     -6.48e-18\npolygon 691 (hole)         9 -4.29041e-06     -6.41e-18\npolygon 692 (hole)        16 -8.88575e-07     -1.33e-18\npolygon 693 (hole)        12 -3.03675e-06     -4.53e-18\npolygon 694 (hole)        16 -1.34003e-06     -2.00e-18\npolygon 695 (hole)        20 -7.64167e-06     -1.14e-17\npolygon 696 (hole)         8 -1.44680e-06     -2.16e-18\npolygon 697 (hole)         6 -6.17098e-08     -9.21e-20\npolygon 698 (hole)         8 -6.47538e-07     -9.67e-19\npolygon 699 (hole)        12 -3.43607e-06     -5.13e-18\npolygon 700 (hole)         8 -2.75374e-06     -4.11e-18\npolygon 701 (hole)        10 -2.17307e-06     -3.24e-18\npolygon 702 (hole)        11 -9.98722e-07     -1.49e-18\npolygon 703 (hole)        43 -2.73905e-05     -4.09e-17\npolygon 704 (hole)         4 -1.67997e-06     -2.51e-18\npolygon 705 (hole)        13 -1.96065e-05     -2.93e-17\npolygon 706 (hole)         4 -4.48786e-07     -6.70e-19\npolygon 707 (hole)        10 -1.55657e-05     -2.32e-17\npolygon 708 (hole)        20 -1.33138e-05     -1.99e-17\npolygon 709 (hole)         6 -3.30155e-06     -4.93e-18\npolygon 710 (hole)        12 -2.65112e-06     -3.96e-18\npolygon 711 (hole)        16 -8.46723e-06     -1.26e-17\npolygon 712 (hole)         3 -2.83566e-07     -4.23e-19\npolygon 713 (hole)         4 -5.43305e-06     -8.11e-18\npolygon 714 (hole)         8 -9.21185e-06     -1.38e-17\npolygon 715 (hole)        12 -5.26073e-06     -7.86e-18\npolygon 716 (hole)        12 -1.06597e-05     -1.59e-17\npolygon 717 (hole)         3 -1.72988e-08     -2.58e-20\npolygon 718 (hole)         4 -1.60286e-07     -2.39e-19\npolygon 719 (hole)         7 -3.56051e-07     -5.32e-19\npolygon 720 (hole)         7 -4.30376e-07     -6.43e-19\npolygon 721 (hole)         4 -3.21852e-07     -4.81e-19\npolygon 722 (hole)         4 -2.19817e-07     -3.28e-19\npolygon 723 (hole)        14 -2.74884e-06     -4.10e-18\npolygon 724 (hole)        12 -4.75410e-06     -7.10e-18\npolygon 725 (hole)        12 -5.52978e-06     -8.26e-18\npolygon 726 (hole)        16 -1.22529e-05     -1.83e-17\npolygon 727 (hole)        10 -6.51627e-06     -9.73e-18\npolygon 728 (hole)         8 -3.24725e-06     -4.85e-18\npolygon 729 (hole)         6 -5.21989e-07     -7.79e-19\npolygon 730 (hole)        14 -5.52052e-06     -8.24e-18\npolygon 731 (hole)        13 -2.17785e-06     -3.25e-18\npolygon 732 (hole)        24 -6.30517e-06     -9.41e-18\npolygon 733 (hole)        24 -2.25468e-05     -3.37e-17\npolygon 734 (hole)         9 -5.28741e-07     -7.90e-19\npolygon 735 (hole)        10 -1.21969e-05     -1.82e-17\npolygon 736 (hole)         4 -7.71142e-07     -1.15e-18\npolygon 737 (hole)         4 -6.01362e-08     -8.98e-20\npolygon 738 (hole)         4 -3.57061e-08     -5.33e-20\npolygon 739 (hole)        16 -1.29864e-05     -1.94e-17\npolygon 740 (hole)        10 -2.78467e-06     -4.16e-18\npolygon 741 (hole)        12 -4.16812e-06     -6.22e-18\npolygon 742 (hole)         4 -1.50563e-07     -2.25e-19\npolygon 743 (hole)        12 -3.34357e-06     -4.99e-18\npolygon 744 (hole)         3 -1.60812e-11     -2.40e-23\npolygon 745 (hole)        12 -8.18420e-07     -1.22e-18\npolygon 746 (hole)         3 -1.67128e-10     -2.50e-22\npolygon 747 (hole)         3 -1.51040e-09     -2.26e-21\npolygon 748 (hole)         5 -3.31089e-07     -4.94e-19\npolygon 749 (hole)         4 -8.01878e-10     -1.20e-21\npolygon 750                3  0.00000e+00      0.00e+00\npolygon 751 (hole)         3 -1.05233e-07     -1.57e-19\npolygon 752 (hole)         4 -2.40412e-09     -3.59e-21\npolygon 753 (hole)         6 -9.51520e-07     -1.42e-18\npolygon 754 (hole)        12 -5.13710e-06     -7.67e-18\npolygon 755 (hole)         3 -7.33440e-09     -1.10e-20\npolygon 756 (hole)         8 -1.30473e-06     -1.95e-18\npolygon 757 (hole)         6 -1.04629e-06     -1.56e-18\npolygon 758 (hole)        12 -1.60213e-06     -2.39e-18\npolygon 759 (hole)         3 -7.47102e-08     -1.12e-19\npolygon 760 (hole)         8 -1.70885e-06     -2.55e-18\npolygon 761 (hole)         6 -2.56715e-06     -3.83e-18\npolygon 762 (hole)         3 -4.58241e-09     -6.84e-21\npolygon 763 (hole)        18 -7.58721e-06     -1.13e-17\npolygon 764 (hole)         8 -7.88753e-07     -1.18e-18\npolygon 765 (hole)         8 -2.04205e-06     -3.05e-18\npolygon 766 (hole)         4 -6.76032e-08     -1.01e-19\npolygon 767 (hole)         3 -8.58648e-09     -1.28e-20\npolygon 768 (hole)         4 -5.45251e-09     -8.14e-21\npolygon 769 (hole)         4 -5.04991e-07     -7.54e-19\npolygon 770 (hole)         5 -2.79886e-06     -4.18e-18\npolygon 771 (hole)        14 -8.69488e-06     -1.30e-17\npolygon 772 (hole)        10 -4.59315e-07     -6.86e-19\npolygon 773 (hole)         4 -1.22972e-07     -1.84e-19\npolygon 774 (hole)         4 -2.19271e-06     -3.27e-18\npolygon 775 (hole)        12 -7.30245e-06     -1.09e-17\npolygon 776 (hole)         5 -6.55069e-07     -9.78e-19\npolygon 777 (hole)         6 -9.15106e-06     -1.37e-17\npolygon 778 (hole)        10 -1.42088e-05     -2.12e-17\npolygon 779 (hole)         7 -1.31024e-06     -1.96e-18\npolygon 780 (hole)         9 -1.43691e-05     -2.15e-17\npolygon 781 (hole)         4 -2.11024e-06     -3.15e-18\npolygon 782 (hole)         4 -6.92613e-08     -1.03e-19\npolygon 783 (hole)         7 -2.04849e-06     -3.06e-18\npolygon 784 (hole)        12 -1.02480e-05     -1.53e-17\npolygon 785 (hole)        16 -1.04982e-05     -1.57e-17\npolygon 786 (hole)         4 -5.77663e-07     -8.63e-19\npolygon 787 (hole)         5 -1.59645e-06     -2.38e-18\npolygon 788 (hole)         4 -2.15697e-06     -3.22e-18\npolygon 789 (hole)         4 -2.45081e-06     -3.66e-18\npolygon 790 (hole)         4 -2.74329e-07     -4.10e-19\npolygon 791 (hole)         4 -5.28048e-08     -7.88e-20\npolygon 792 (hole)        13 -1.99065e-06     -2.97e-18\npolygon 793 (hole)         4 -1.72089e-07     -2.57e-19\npolygon 794 (hole)         4 -5.36984e-08     -8.02e-20\npolygon 795 (hole)         4 -1.31200e-06     -1.96e-18\npolygon 796 (hole)         4 -7.67239e-07     -1.15e-18\npolygon 797 (hole)         4 -8.90784e-07     -1.33e-18\npolygon 798 (hole)         3 -1.94794e-11     -2.91e-23\npolygon 799 (hole)         4 -4.89519e-06     -7.31e-18\npolygon 800 (hole)         4 -7.54507e-07     -1.13e-18\npolygon 801 (hole)         4 -6.30508e-07     -9.41e-19\npolygon 802 (hole)         5 -2.41685e-06     -3.61e-18\npolygon 803 (hole)         9 -2.46170e-06     -3.68e-18\npolygon 804 (hole)         3 -5.88236e-09     -8.78e-21\npolygon 805 (hole)        19 -3.70522e-05     -5.53e-17\npolygon 806 (hole)         5 -6.50835e-07     -9.72e-19\npolygon 807 (hole)         8 -5.40750e-07     -8.07e-19\npolygon 808 (hole)         4 -7.57651e-08     -1.13e-19\npolygon 809 (hole)         3 -5.48740e-09     -8.19e-21\npolygon 810 (hole)         6 -7.07339e-06     -1.06e-17\npolygon 811 (hole)        11 -1.32791e-05     -1.98e-17\npolygon 812 (hole)         8 -1.00478e-06     -1.50e-18\npolygon 813 (hole)         9 -1.30672e-06     -1.95e-18\npolygon 814 (hole)        34 -2.52174e-05     -3.77e-17\npolygon 815 (hole)         6 -5.77420e-06     -8.62e-18\npolygon 816 (hole)        14 -1.00039e-05     -1.49e-17\npolygon 817 (hole)        14 -1.27903e-05     -1.91e-17\npolygon 818 (hole)         6 -2.89513e-06     -4.32e-18\npolygon 819 (hole)         4 -3.90195e-07     -5.83e-19\npolygon 820 (hole)         4 -1.66294e-06     -2.48e-18\npolygon 821 (hole)        22 -1.85115e-05     -2.76e-17\npolygon 822 (hole)         3 -3.12851e-07     -4.67e-19\npolygon 823 (hole)         3 -3.10142e-08     -4.63e-20\npolygon 824 (hole)         4 -3.08188e-07     -4.60e-19\npolygon 825 (hole)         4 -4.47973e-07     -6.69e-19\npolygon 826 (hole)         9 -1.04283e-05     -1.56e-17\npolygon 827 (hole)         8 -1.48416e-06     -2.22e-18\npolygon 828 (hole)        10 -5.58863e-06     -8.34e-18\npolygon 829 (hole)         3 -4.14133e-07     -6.18e-19\npolygon 830 (hole)        30 -3.47307e-05     -5.19e-17\npolygon 831 (hole)         4 -1.85245e-06     -2.77e-18\npolygon 832 (hole)         6 -5.63652e-07     -8.42e-19\npolygon 833 (hole)        13 -5.20425e-06     -7.77e-18\npolygon 834 (hole)         3 -1.86294e-06     -2.78e-18\npolygon 835 (hole)         4 -1.98260e-06     -2.96e-18\npolygon 836 (hole)        24 -1.30457e-05     -1.95e-17\npolygon 837 (hole)         3 -6.39260e-11     -9.55e-23\npolygon 838 (hole)         4 -1.85129e-06     -2.76e-18\npolygon 839 (hole)        24 -1.20845e-05     -1.80e-17\npolygon 840 (hole)        22 -1.76911e-05     -2.64e-17\npolygon 841 (hole)         4 -4.24110e-06     -6.33e-18\npolygon 842 (hole)         3 -1.67592e-07     -2.50e-19\npolygon 843 (hole)         4 -5.07095e-07     -7.57e-19\npolygon 844 (hole)        15 -1.93292e-05     -2.89e-17\npolygon 845 (hole)         3 -2.63499e-08     -3.93e-20\npolygon 846 (hole)         4 -9.59317e-07     -1.43e-18\npolygon 847 (hole)         9 -1.03907e-06     -1.55e-18\npolygon 848 (hole)         6 -9.10628e-07     -1.36e-18\npolygon 849 (hole)         4 -1.26556e-06     -1.89e-18\npolygon 850 (hole)         3 -6.32105e-08     -9.44e-20\npolygon 851 (hole)         8 -2.75227e-06     -4.11e-18\npolygon 852 (hole)         8 -5.04469e-06     -7.53e-18\npolygon 853 (hole)        12 -1.06652e-05     -1.59e-17\npolygon 854 (hole)         3 -2.55325e-10     -3.81e-22\npolygon 855 (hole)         3 -1.64351e-06     -2.45e-18\npolygon 856 (hole)         3 -7.21379e-07     -1.08e-18\npolygon 857 (hole)         4 -7.64394e-08     -1.14e-19\npolygon 858 (hole)         4 -9.59171e-07     -1.43e-18\npolygon 859 (hole)         3 -3.04001e-06     -4.54e-18\npolygon 860 (hole)         4 -4.17524e-07     -6.23e-19\npolygon 861 (hole)         3 -8.13487e-07     -1.21e-18\npolygon 862 (hole)         3 -1.88495e-13     -2.81e-25\npolygon 863 (hole)         5 -7.00021e-10     -1.05e-21\npolygon 864 (hole)         4 -1.17209e-06     -1.75e-18\npolygon 865 (hole)         4 -1.61030e-08     -2.40e-20\npolygon 866 (hole)         7 -1.64801e-05     -2.46e-17\npolygon 867 (hole)         4 -9.60361e-11     -1.43e-22\npolygon 868 (hole)         6 -7.04295e-06     -1.05e-17\npolygon 869 (hole)         4 -4.44230e-07     -6.63e-19\npolygon 870 (hole)         4 -3.66199e-07     -5.47e-19\npolygon 871 (hole)         3 -9.36087e-07     -1.40e-18\npolygon 872 (hole)         4 -4.67178e-06     -6.98e-18\npolygon 873 (hole)        11 -1.83842e-05     -2.75e-17\npolygon 874 (hole)        10 -4.45963e-06     -6.66e-18\npolygon 875 (hole)         6 -4.97999e-06     -7.44e-18\npolygon 876 (hole)         4 -5.18698e-07     -7.75e-19\npolygon 877 (hole)         3 -6.92946e-07     -1.03e-18\npolygon 878 (hole)         4 -1.36612e-06     -2.04e-18\npolygon 879 (hole)         4 -2.92987e-07     -4.37e-19\npolygon 880 (hole)         6 -5.28596e-06     -7.89e-18\npolygon 881 (hole)         5 -3.18954e-06     -4.76e-18\npolygon 882 (hole)        16 -2.17578e-06     -3.25e-18\npolygon 883 (hole)         4 -4.39401e-06     -6.56e-18\npolygon 884 (hole)         4 -3.53685e-07     -5.28e-19\npolygon 885 (hole)         4 -9.91210e-07     -1.48e-18\npolygon 886 (hole)         4 -4.40831e-10     -6.58e-22\npolygon 887 (hole)         3 -3.91156e-09     -5.84e-21\npolygon 888 (hole)         4 -5.85356e-08     -8.74e-20\npolygon 889 (hole)         4 -3.90887e-07     -5.84e-19\npolygon 890 (hole)         3 -2.53717e-08     -3.79e-20\npolygon 891               26  2.85778e+06      4.27e-06\npolygon 892 (hole)         7 -5.96459e-06     -8.91e-18\npolygon 893 (hole)         5 -1.11617e-06     -1.67e-18\npolygon 894 (hole)         4 -1.58962e-06     -2.37e-18\npolygon 895 (hole)         3 -6.47723e-09     -9.67e-21\npolygon 896 (hole)         5 -4.91126e-06     -7.33e-18\npolygon 897 (hole)         3 -2.82115e-12     -4.21e-24\npolygon 898 (hole)         3 -1.32283e-06     -1.98e-18\npolygon 899                3  2.61158e-10      3.90e-22\npolygon 900 (hole)         4 -3.44876e-07     -5.15e-19\npolygon 901 (hole)         3 -7.15065e-08     -1.07e-19\npolygon 902 (hole)         4 -1.00656e-08     -1.50e-20\npolygon 903 (hole)         3 -6.08303e-07     -9.08e-19\npolygon 904 (hole)         3 -2.22135e-07     -3.32e-19\npolygon 905 (hole)        11 -1.29690e-05     -1.94e-17\npolygon 906 (hole)         4 -8.08955e-07     -1.21e-18\npolygon 907 (hole)         3 -1.78443e-07     -2.66e-19\npolygon 908 (hole)         4 -4.37379e-06     -6.53e-18\npolygon 909 (hole)         8 -5.87752e-06     -8.78e-18\npolygon 910 (hole)        15 -2.27764e-05     -3.40e-17\npolygon 911 (hole)         3 -1.64688e-07     -2.46e-19\npolygon 912 (hole)         8 -8.57021e-06     -1.28e-17\npolygon 913 (hole)         8 -9.93116e-06     -1.48e-17\npolygon 914 (hole)         4 -2.22152e-06     -3.32e-18\npolygon 915 (hole)         4 -4.45747e-07     -6.66e-19\npolygon 916 (hole)         4 -4.03379e-07     -6.02e-19\npolygon 917 (hole)         4 -1.09729e-06     -1.64e-18\npolygon 918 (hole)         4 -4.90172e-07     -7.32e-19\npolygon 919 (hole)        15 -7.82538e-06     -1.17e-17\npolygon 920 (hole)         4 -3.05630e-06     -4.56e-18\npolygon 921 (hole)         3 -1.22893e-10     -1.84e-22\npolygon 922 (hole)         3 -1.78531e-07     -2.67e-19\npolygon 923 (hole)        29 -2.26091e-05     -3.38e-17\npolygon 924 (hole)         6 -1.63260e-06     -2.44e-18\npolygon 925 (hole)         3 -3.53577e-07     -5.28e-19\npolygon 926 (hole)         3 -6.61644e-07     -9.88e-19\npolygon 927 (hole)        11 -5.92633e-07     -8.85e-19\npolygon 928 (hole)         3 -1.60869e-07     -2.40e-19\npolygon 929 (hole)         6 -4.25227e-06     -6.35e-18\npolygon 930 (hole)        24 -1.72642e-05     -2.58e-17\npolygon 931 (hole)         5 -2.20502e-07     -3.29e-19\npolygon 932 (hole)         4 -1.12303e-06     -1.68e-18\npolygon 933 (hole)         6 -2.04297e-06     -3.05e-18\npolygon 934 (hole)         5 -4.03695e-06     -6.03e-18\npolygon 935 (hole)         7 -1.79877e-06     -2.69e-18\npolygon 936 (hole)         5 -1.11811e-10     -1.67e-22\npolygon 937 (hole)        11 -1.64428e-05     -2.46e-17\npolygon 938 (hole)         5 -1.04667e-06     -1.56e-18\npolygon 939 (hole)         4 -1.43538e-06     -2.14e-18\npolygon 940 (hole)         6 -1.36286e-06     -2.03e-18\npolygon 941 (hole)         4 -2.17697e-06     -3.25e-18\npolygon 942 (hole)         3 -3.90693e-07     -5.83e-19\npolygon 943 (hole)         6 -5.01011e-06     -7.48e-18\npolygon 944 (hole)         6 -4.83409e-06     -7.22e-18\npolygon 945 (hole)         3 -4.82888e-07     -7.21e-19\npolygon 946 (hole)         6 -5.29906e-06     -7.91e-18\npolygon 947 (hole)         3 -2.70309e-06     -4.04e-18\npolygon 948 (hole)        12 -2.05767e-05     -3.07e-17\npolygon 949 (hole)         5 -1.99859e-06     -2.98e-18\npolygon 950 (hole)        20 -2.45831e-05     -3.67e-17\npolygon 951 (hole)        14 -2.03544e-05     -3.04e-17\npolygon 952 (hole)         3 -2.87490e-07     -4.29e-19\npolygon 953 (hole)         5 -3.63819e-06     -5.43e-18\npolygon 954 (hole)         6 -7.40637e-07     -1.11e-18\npolygon 955 (hole)         4 -3.87159e-07     -5.78e-19\npolygon 956 (hole)         4 -1.66151e-06     -2.48e-18\npolygon 957 (hole)         6 -3.05068e-06     -4.56e-18\npolygon 958 (hole)        12 -1.48555e-05     -2.22e-17\npolygon 959 (hole)         4 -2.22976e-06     -3.33e-18\npolygon 960 (hole)         8 -6.64064e-06     -9.92e-18\npolygon 961 (hole)         4 -2.15967e-07     -3.22e-19\npolygon 962 (hole)         3 -7.42890e-07     -1.11e-18\npolygon 963 (hole)         4 -3.00191e-07     -4.48e-19\npolygon 964 (hole)         9 -3.62075e-07     -5.41e-19\npolygon 965 (hole)         8 -3.01321e-06     -4.50e-18\npolygon 966 (hole)         3 -3.48481e-07     -5.20e-19\npolygon 967 (hole)         5 -1.25831e-06     -1.88e-18\npolygon 968 (hole)        23 -7.27453e-06     -1.09e-17\npolygon 969 (hole)         4 -1.57642e-06     -2.35e-18\npolygon 970 (hole)        14 -9.19299e-06     -1.37e-17\npolygon 971 (hole)        16 -1.79450e-05     -2.68e-17\npolygon 972 (hole)         4 -8.16740e-09     -1.22e-20\npolygon 973 (hole)         3 -1.63614e-12     -2.44e-24\npolygon 974 (hole)         3 -3.94517e-09     -5.89e-21\npolygon 975 (hole)        10 -3.11867e-06     -4.66e-18\npolygon 976 (hole)         4 -1.02308e-06     -1.53e-18\npolygon 977 (hole)         4 -1.03133e-06     -1.54e-18\npolygon 978 (hole)         4 -8.70230e-07     -1.30e-18\npolygon 979 (hole)         3 -5.08006e-07     -7.59e-19\npolygon 980 (hole)        18 -1.47972e-05     -2.21e-17\npolygon 981 (hole)         4 -1.48789e-06     -2.22e-18\npolygon 982 (hole)         4 -2.04307e-06     -3.05e-18\npolygon 983 (hole)        18 -2.75250e-05     -4.11e-17\npolygon 984 (hole)         5 -5.99491e-06     -8.95e-18\npolygon 985 (hole)         3 -1.09648e-06     -1.64e-18\npolygon 986 (hole)         3 -1.59984e-07     -2.39e-19\npolygon 987 (hole)         4 -1.48988e-06     -2.22e-18\npolygon 988 (hole)         3 -1.60103e-07     -2.39e-19\npolygon 989 (hole)         3 -5.27938e-11     -7.88e-23\npolygon 990 (hole)         7 -1.57914e-06     -2.36e-18\npolygon 991 (hole)         7 -2.32130e-06     -3.47e-18\npolygon 992 (hole)         4 -1.82516e-07     -2.73e-19\npolygon 993 (hole)        10 -9.92723e-06     -1.48e-17\npolygon 994 (hole)         4 -4.64956e-08     -6.94e-20\npolygon 995 (hole)         6 -5.41605e-07     -8.09e-19\npolygon 996 (hole)        14 -6.63886e-07     -9.91e-19\npolygon 997 (hole)         8 -3.08030e-06     -4.60e-18\npolygon 998 (hole)        11 -3.57478e-06     -5.34e-18\npolygon 999 (hole)         4 -2.03798e-07     -3.04e-19\npolygon 1000 (hole)        7 -7.84638e-07     -1.17e-18\npolygon 1001 (hole)        6 -3.85565e-06     -5.76e-18\npolygon 1002 (hole)       15 -6.42409e-06     -9.59e-18\npolygon 1003 (hole)        4 -3.32368e-07     -4.96e-19\npolygon 1004 (hole)        4 -1.88769e-08     -2.82e-20\npolygon 1005 (hole)        4 -2.00520e-07     -2.99e-19\npolygon 1006 (hole)        3 -1.18046e-07     -1.76e-19\npolygon 1007 (hole)        8 -2.84542e-06     -4.25e-18\npolygon 1008 (hole)        8 -4.42521e-06     -6.61e-18\npolygon 1009 (hole)        4 -4.26203e-07     -6.36e-19\npolygon 1010 (hole)        3 -6.37843e-07     -9.52e-19\npolygon 1011 (hole)        5 -2.21462e-06     -3.31e-18\npolygon 1012 (hole)        4 -1.33402e-07     -1.99e-19\npolygon 1013 (hole)        3 -8.67980e-07     -1.30e-18\npolygon 1014 (hole)        6 -1.57252e-06     -2.35e-18\npolygon 1015 (hole)        3 -3.77207e-07     -5.63e-19\npolygon 1016 (hole)       14 -9.76015e-06     -1.46e-17\npolygon 1017 (hole)        3 -4.96964e-08     -7.42e-20\npolygon 1018 (hole)        6 -4.88962e-06     -7.30e-18\npolygon 1019 (hole)        7 -6.44682e-08     -9.63e-20\npolygon 1020 (hole)        4 -5.53087e-07     -8.26e-19\npolygon 1021 (hole)        3 -6.31546e-07     -9.43e-19\npolygon 1022 (hole)        4 -2.04558e-07     -3.05e-19\npolygon 1023 (hole)        3 -1.20001e-07     -1.79e-19\npolygon 1024 (hole)        4 -3.99068e-07     -5.96e-19\npolygon 1025 (hole)        3 -6.96598e-08     -1.04e-19\npolygon 1026 (hole)       14 -8.80954e-06     -1.32e-17\npolygon 1027 (hole)        4 -2.24556e-07     -3.35e-19\npolygon 1028 (hole)        4 -3.14953e-07     -4.70e-19\npolygon 1029 (hole)        6 -5.75421e-06     -8.59e-18\npolygon 1030 (hole)        9 -2.19271e-05     -3.27e-17\npolygon 1031 (hole)       15 -9.00510e-06     -1.34e-17\npolygon 1032 (hole)        3 -2.62200e-07     -3.92e-19\npolygon 1033 (hole)        4 -1.35217e-06     -2.02e-18\npolygon 1034 (hole)        6 -2.60366e-06     -3.89e-18\npolygon 1035 (hole)        5 -1.22881e-05     -1.83e-17\npolygon 1036 (hole)        3 -2.23247e-10     -3.33e-22\npolygon 1037 (hole)        4 -1.17525e-10     -1.75e-22\npolygon 1038 (hole)        3 -3.25202e-07     -4.86e-19\npolygon 1039 (hole)        4 -8.01372e-07     -1.20e-18\npolygon 1040 (hole)        4 -6.72027e-07     -1.00e-18\npolygon 1041 (hole)        4 -8.43417e-07     -1.26e-18\npolygon 1042 (hole)        3 -4.61945e-07     -6.90e-19\npolygon 1043 (hole)        4 -2.55155e-06     -3.81e-18\npolygon 1044 (hole)        6 -2.41174e-06     -3.60e-18\npolygon 1045 (hole)        5 -2.30613e-06     -3.44e-18\npolygon 1046 (hole)        4 -3.62129e-07     -5.41e-19\npolygon 1047 (hole)        5 -9.44626e-07     -1.41e-18\npolygon 1048 (hole)       17 -8.02571e-06     -1.20e-17\npolygon 1049 (hole)        3 -4.64224e-08     -6.93e-20\npolygon 1050 (hole)        4 -7.89939e-07     -1.18e-18\npolygon 1051 (hole)        9 -1.04802e-06     -1.56e-18\npolygon 1052               3  0.00000e+00      0.00e+00\npolygon 1053 (hole)        6 -2.90975e-06     -4.34e-18\npolygon 1054 (hole)        7 -1.58592e-05     -2.37e-17\npolygon 1055 (hole)        4 -2.94713e-07     -4.40e-19\npolygon 1056 (hole)        4 -1.26885e-06     -1.89e-18\npolygon 1057 (hole)        4 -4.36370e-07     -6.52e-19\npolygon 1058 (hole)        4 -3.25844e-06     -4.87e-18\npolygon 1059 (hole)        4 -4.71746e-07     -7.04e-19\npolygon 1060 (hole)        4 -4.38190e-07     -6.54e-19\npolygon 1061 (hole)        6 -1.02852e-06     -1.54e-18\npolygon 1062 (hole)        4 -1.13896e-06     -1.70e-18\npolygon 1063 (hole)        3 -1.02731e-07     -1.53e-19\npolygon 1064 (hole)       28 -1.62790e-05     -2.43e-17\npolygon 1065 (hole)        9 -2.86214e-06     -4.27e-18\npolygon 1066 (hole)        3 -3.86621e-07     -5.77e-19\npolygon 1067 (hole)        3 -1.94296e-07     -2.90e-19\npolygon 1068 (hole)        7 -1.73842e-06     -2.60e-18\npolygon 1069 (hole)        4 -5.33629e-07     -7.97e-19\npolygon 1070 (hole)        3 -5.77992e-08     -8.63e-20\npolygon 1071 (hole)        8 -2.90435e-06     -4.34e-18\npolygon 1072 (hole)        6 -6.68165e-06     -9.98e-18\npolygon 1073 (hole)        4 -2.62580e-07     -3.92e-19\npolygon 1074 (hole)        3 -1.40958e-07     -2.10e-19\npolygon 1075 (hole)        4 -3.40111e-07     -5.08e-19\npolygon 1076 (hole)        6 -6.50251e-06     -9.71e-18\npolygon 1077 (hole)        4 -2.72494e-07     -4.07e-19\npolygon 1078               3  3.84969e-11      5.75e-23\npolygon 1079 (hole)        3 -2.01419e-07     -3.01e-19\npolygon 1080 (hole)        3 -7.45888e-08     -1.11e-19\npolygon 1081 (hole)        3 -1.69937e-07     -2.54e-19\npolygon 1082 (hole)        7 -2.48519e-06     -3.71e-18\npolygon 1083 (hole)        3 -1.34889e-12     -2.01e-24\npolygon 1084 (hole)        4 -3.20418e-07     -4.78e-19\npolygon 1085 (hole)        7 -4.93298e-06     -7.37e-18\npolygon 1086 (hole)        6 -2.76374e-06     -4.13e-18\npolygon 1087 (hole)        3 -4.94831e-09     -7.39e-21\npolygon 1088 (hole)        3 -1.50987e-07     -2.25e-19\npolygon 1089 (hole)        6 -3.34929e-06     -5.00e-18\npolygon 1090 (hole)        4 -3.19557e-08     -4.77e-20\npolygon 1091 (hole)        6 -2.01693e-06     -3.01e-18\npolygon 1092 (hole)        3 -1.43680e-12     -2.15e-24\npolygon 1093 (hole)        4 -3.23951e-07     -4.84e-19\npolygon 1094 (hole)        6 -5.36840e-10     -8.02e-22\npolygon 1095 (hole)       15 -1.26600e-05     -1.89e-17\npolygon 1096 (hole)        3 -9.77071e-07     -1.46e-18\npolygon 1097 (hole)        3 -4.22433e-08     -6.31e-20\npolygon 1098 (hole)        4 -5.16259e-07     -7.71e-19\npolygon 1099 (hole)        4 -1.47720e-07     -2.21e-19\npolygon 1100 (hole)       10 -2.75166e-06     -4.11e-18\npolygon 1101 (hole)        4 -1.82686e-07     -2.73e-19\npolygon 1102 (hole)        7 -5.94904e-06     -8.88e-18\npolygon 1103 (hole)        3 -1.09796e-07     -1.64e-19\npolygon 1104 (hole)       10 -3.12800e-06     -4.67e-18\npolygon 1105 (hole)        4 -2.59993e-06     -3.88e-18\npolygon 1106 (hole)       12 -3.06453e-06     -4.58e-18\npolygon 1107 (hole)       12 -3.78550e-06     -5.65e-18\npolygon 1108 (hole)        6 -7.09957e-10     -1.06e-21\npolygon 1109 (hole)        3 -1.27186e-09     -1.90e-21\npolygon 1110              43  7.32477e+06      1.09e-05\npolygon 1111 (hole)        5 -5.48437e-06     -8.19e-18\npolygon 1112 (hole)       14 -4.44790e-06     -6.64e-18\npolygon 1113 (hole)        3 -1.30026e-06     -1.94e-18\npolygon 1114 (hole)        8 -1.46223e-06     -2.18e-18\npolygon 1115 (hole)        4 -4.67145e-07     -6.98e-19\npolygon 1116 (hole)        8 -6.37136e-06     -9.51e-18\npolygon 1117 (hole)       17 -3.25623e-05     -4.86e-17\npolygon 1118 (hole)        4 -3.15090e-06     -4.70e-18\npolygon 1119 (hole)        4 -1.67963e-06     -2.51e-18\npolygon 1120 (hole)       22 -2.59250e-05     -3.87e-17\npolygon 1121 (hole)        3 -7.16762e-07     -1.07e-18\npolygon 1122 (hole)       10 -1.19654e-05     -1.79e-17\npolygon 1123 (hole)        3 -3.68787e-08     -5.51e-20\npolygon 1124 (hole)        3 -1.09729e-08     -1.64e-20\npolygon 1125 (hole)        4 -2.17763e-06     -3.25e-18\npolygon 1126 (hole)        4 -4.29839e-07     -6.42e-19\npolygon 1127 (hole)        7 -1.20491e-06     -1.80e-18\npolygon 1128 (hole)        4 -7.12967e-07     -1.06e-18\npolygon 1129 (hole)        4 -2.03065e-06     -3.03e-18\npolygon 1130 (hole)        5 -3.55055e-07     -5.30e-19\npolygon 1131 (hole)       23 -1.97398e-05     -2.95e-17\npolygon 1132 (hole)        3 -4.10383e-08     -6.13e-20\npolygon 1133 (hole)        3 -6.65433e-09     -9.94e-21\npolygon 1134 (hole)        4 -1.10024e-07     -1.64e-19\npolygon 1135 (hole)        6 -8.83053e-06     -1.32e-17\npolygon 1136             103  1.86991e+07      2.79e-05\npolygon 1137 (hole)        8 -1.00086e-05     -1.49e-17\npolygon 1138 (hole)        4 -6.23238e-07     -9.31e-19\npolygon 1139 (hole)       22 -1.29332e-05     -1.93e-17\npolygon 1140 (hole)        4 -6.17006e-06     -9.21e-18\npolygon 1141 (hole)        3 -2.40251e-07     -3.59e-19\npolygon 1142 (hole)       11 -2.56068e-06     -3.82e-18\npolygon 1143 (hole)        8 -2.60548e-06     -3.89e-18\npolygon 1144 (hole)        4 -2.35185e-07     -3.51e-19\npolygon 1145 (hole)        6 -3.67142e-07     -5.48e-19\npolygon 1146 (hole)        5 -1.77476e-06     -2.65e-18\npolygon 1147 (hole)        4 -1.69793e-07     -2.54e-19\npolygon 1148 (hole)        6 -3.97525e-06     -5.94e-18\npolygon 1149 (hole)        9 -1.56450e-05     -2.34e-17\npolygon 1150 (hole)        5 -2.87263e-06     -4.29e-18\npolygon 1151 (hole)        6 -6.49094e-06     -9.69e-18\npolygon 1152 (hole)        3 -2.16654e-08     -3.24e-20\npolygon 1153 (hole)        3 -2.61093e-08     -3.90e-20\npolygon 1154 (hole)        8 -2.52718e-06     -3.77e-18\npolygon 1155 (hole)        4 -1.97862e-06     -2.95e-18\npolygon 1156 (hole)        4 -1.05456e-06     -1.57e-18\npolygon 1157 (hole)        4 -3.42565e-07     -5.12e-19\npolygon 1158 (hole)       13 -1.15432e-05     -1.72e-17\npolygon 1159 (hole)        3 -5.05599e-09     -7.55e-21\npolygon 1160              37  9.32316e+06      1.39e-05\npolygon 1161 (hole)        4 -5.78332e-07     -8.64e-19\npolygon 1162 (hole)        7 -4.90460e-06     -7.32e-18\npolygon 1163 (hole)        6 -2.77656e-07     -4.15e-19\npolygon 1164               3  0.00000e+00      0.00e+00\npolygon 1165 (hole)        4 -1.31877e-06     -1.97e-18\npolygon 1166 (hole)        5 -1.28966e-10     -1.93e-22\npolygon 1167 (hole)        3 -1.23421e-07     -1.84e-19\npolygon 1168 (hole)        8 -3.18610e-06     -4.76e-18\npolygon 1169 (hole)        6 -5.47974e-07     -8.18e-19\npolygon 1170 (hole)        3 -3.78911e-14     -5.66e-26\npolygon 1171 (hole)        9 -1.85948e-06     -2.78e-18\npolygon 1172 (hole)        4 -7.24111e-07     -1.08e-18\npolygon 1173 (hole)        4 -2.59043e-08     -3.87e-20\npolygon 1174 (hole)        3 -1.49186e-06     -2.23e-18\npolygon 1175 (hole)       10 -7.59355e-06     -1.13e-17\npolygon 1176 (hole)        3 -2.74447e-08     -4.10e-20\npolygon 1177 (hole)        5 -9.62222e-11     -1.44e-22\npolygon 1178 (hole)        3 -1.99064e-06     -2.97e-18\npolygon 1179 (hole)        5 -9.41661e-08     -1.41e-19\npolygon 1180 (hole)        9 -2.53515e-06     -3.79e-18\npolygon 1181 (hole)        4 -1.24371e-06     -1.86e-18\npolygon 1182 (hole)        3 -1.74329e-09     -2.60e-21\npolygon 1183 (hole)        4 -7.68729e-07     -1.15e-18\npolygon 1184 (hole)        4 -8.06015e-07     -1.20e-18\npolygon 1185 (hole)        8 -1.34515e-05     -2.01e-17\npolygon 1186             371  2.43869e+08      3.64e-04\npolygon 1187             297  2.84905e+08      4.25e-04\npolygon 1188 (hole)        3 -3.52869e-06     -5.27e-18\npolygon 1189 (hole)       20 -1.72659e-05     -2.58e-17\npolygon 1190 (hole)        3 -8.57454e-08     -1.28e-19\npolygon 1191 (hole)        8 -2.24071e-06     -3.35e-18\npolygon 1192 (hole)       18 -7.31578e-06     -1.09e-17\npolygon 1193 (hole)        4 -1.42541e-06     -2.13e-18\npolygon 1194 (hole)       22 -5.79419e-06     -8.65e-18\npolygon 1195 (hole)       21 -5.86078e-06     -8.75e-18\npolygon 1196 (hole)        4 -3.64930e-07     -5.45e-19\npolygon 1197 (hole)        3 -2.59333e-11     -3.87e-23\npolygon 1198 (hole)        8 -7.19306e-07     -1.07e-18\npolygon 1199 (hole)        3 -9.74499e-08     -1.46e-19\npolygon 1200 (hole)        4 -3.20603e-07     -4.79e-19\npolygon 1201 (hole)       14 -3.89488e-06     -5.82e-18\npolygon 1202              33  1.68222e+07      2.51e-05\npolygon 1203 (hole)       29 -2.31866e-05     -3.46e-17\npolygon 1204              33  4.47665e+05      6.68e-07\npolygon 1205              19  1.34593e+05      2.01e-07\npolygon 1206 (hole)       51 -2.16393e-05     -3.23e-17\npolygon 1207              39  1.36327e+06      2.04e-06\npolygon 1208             137  1.55547e+08      2.32e-04\npolygon 1209 (hole)       12 -1.18253e-06     -1.77e-18\npolygon 1210 (hole)        3 -8.80442e-09     -1.31e-20\npolygon 1211 (hole)        8 -6.00435e-07     -8.97e-19\npolygon 1212 (hole)        3 -7.71201e-08     -1.15e-19\npolygon 1213 (hole)        4 -3.84460e-06     -5.74e-18\npolygon 1214 (hole)        6 -7.26931e-06     -1.09e-17\npolygon 1215 (hole)        4 -8.47596e-07     -1.27e-18\npolygon 1216              36  8.76479e+06      1.31e-05\npolygon 1217 (hole)        4 -1.03089e-06     -1.54e-18\npolygon 1218 (hole)        4 -4.56983e-07     -6.82e-19\npolygon 1219 (hole)       10 -1.57059e-05     -2.35e-17\npolygon 1220              79  3.08116e+07      4.60e-05\npolygon 1221 (hole)       23 -5.88977e-06     -8.79e-18\npolygon 1222 (hole)        4 -5.65565e-07     -8.44e-19\npolygon 1223             388  2.25271e+08      3.36e-04\npolygon 1224 (hole)        5 -1.23644e-07     -1.85e-19\npolygon 1225 (hole)        4 -3.40694e-06     -5.09e-18\npolygon 1226 (hole)        8 -1.59581e-06     -2.38e-18\npolygon 1227 (hole)        3 -2.06111e-12     -3.08e-24\npolygon 1228 (hole)       14 -2.36318e-06     -3.53e-18\npolygon 1229 (hole)        4 -8.37521e-08     -1.25e-19\npolygon 1230 (hole)       10 -4.11917e-06     -6.15e-18\npolygon 1231 (hole)        3 -8.11432e-07     -1.21e-18\npolygon 1232 (hole)        4 -6.23658e-08     -9.31e-20\npolygon 1233 (hole)       11 -6.49645e-07     -9.70e-19\npolygon 1234 (hole)        3 -4.42215e-09     -6.60e-21\npolygon 1235 (hole)        6 -9.79736e-07     -1.46e-18\npolygon 1236 (hole)        4 -3.60342e-07     -5.38e-19\npolygon 1237 (hole)       14 -1.29743e-06     -1.94e-18\npolygon 1238             316  7.78512e+07      1.16e-04\npolygon 1239 (hole)        4 -2.20699e-07     -3.30e-19\npolygon 1240 (hole)       12 -1.62468e-06     -2.43e-18\npolygon 1241              13  1.09564e+05      1.64e-07\npolygon 1242              18  3.49727e+05      5.22e-07\npolygon 1243 (hole)        6 -5.15224e-07     -7.69e-19\npolygon 1244 (hole)        4 -2.11723e-08     -3.16e-20\npolygon 1245 (hole)       12 -2.64155e-06     -3.94e-18\npolygon 1246              31  1.23017e+06      1.84e-06\npolygon 1247              16  6.55537e+05      9.79e-07\npolygon 1248 (hole)        4 -4.06254e-06     -6.07e-18\npolygon 1249              24  8.49487e+05      1.27e-06\npolygon 1250 (hole)       10 -2.71371e-06     -4.05e-18\npolygon 1251 (hole)        5 -3.47634e-07     -5.19e-19\npolygon 1252 (hole)        4 -6.71077e-07     -1.00e-18\npolygon 1253 (hole)        3 -8.81299e-13     -1.32e-24\npolygon 1254 (hole)       16 -2.88295e-06     -4.30e-18\npolygon 1255 (hole)        4 -1.38208e-07     -2.06e-19\npolygon 1256              30  2.54436e+06      3.80e-06\npolygon 1257 (hole)        7 -1.62397e-06     -2.42e-18\npolygon 1258 (hole)        4 -6.56130e-07     -9.80e-19\npolygon 1259 (hole)        4 -3.07496e-09     -4.59e-21\npolygon 1260 (hole)       10 -2.13530e-06     -3.19e-18\npolygon 1261 (hole)       13 -4.14351e-06     -6.19e-18\npolygon 1262             336  4.15806e+07      6.21e-05\npolygon 1263 (hole)       24 -1.52579e-05     -2.28e-17\npolygon 1264 (hole)       17 -1.31766e-05     -1.97e-17\npolygon 1265 (hole)        6 -2.02351e-06     -3.02e-18\npolygon 1266 (hole)        8 -1.01065e-06     -1.51e-18\npolygon 1267 (hole)        8 -6.72294e-07     -1.00e-18\npolygon 1268 (hole)        4 -2.93181e-07     -4.38e-19\npolygon 1269 (hole)        4 -1.88875e-08     -2.82e-20\npolygon 1270 (hole)       16 -5.54898e-06     -8.29e-18\npolygon 1271 (hole)       11 -5.73284e-06     -8.56e-18\npolygon 1272 (hole)        4 -1.93265e-09     -2.89e-21\npolygon 1273 (hole)       15 -7.75368e-06     -1.16e-17\npolygon 1274 (hole)        3 -3.13390e-08     -4.68e-20\npolygon 1275 (hole)        3 -6.78219e-09     -1.01e-20\npolygon 1276 (hole)        6 -7.91939e-07     -1.18e-18\npolygon 1277 (hole)        5 -1.51254e-06     -2.26e-18\npolygon 1278 (hole)        4 -6.08172e-07     -9.08e-19\npolygon 1279 (hole)        3 -4.00018e-07     -5.97e-19\npolygon 1280 (hole)        4 -3.01903e-08     -4.51e-20\npolygon 1281 (hole)        6 -1.58500e-06     -2.37e-18\npolygon 1282             330  1.69190e+08      2.53e-04\npolygon 1283              47  1.08035e+07      1.61e-05\npolygon 1284 (hole)        6 -2.82316e-06     -4.22e-18\npolygon 1285              39  4.94369e+06      7.38e-06\npolygon 1286 (hole)        4 -8.99114e-07     -1.34e-18\npolygon 1287 (hole)        3 -1.33201e-07     -1.99e-19\npolygon 1288 (hole)        6 -3.92597e-06     -5.86e-18\npolygon 1289 (hole)        7 -3.98304e-07     -5.95e-19\npolygon 1290 (hole)        4 -2.36291e-08     -3.53e-20\npolygon 1291 (hole)        6 -8.48726e-07     -1.27e-18\npolygon 1292 (hole)        4 -4.78273e-13     -7.14e-25\npolygon 1293 (hole)        3 -1.83234e-07     -2.74e-19\npolygon 1294 (hole)       10 -1.73133e-06     -2.59e-18\npolygon 1295 (hole)        4 -1.05318e-07     -1.57e-19\npolygon 1296 (hole)        3 -1.41573e-08     -2.11e-20\npolygon 1297 (hole)        4 -1.60561e-07     -2.40e-19\npolygon 1298 (hole)        6 -2.14452e-06     -3.20e-18\npolygon 1299 (hole)        6 -2.92367e-06     -4.37e-18\npolygon 1300 (hole)        3 -1.87524e-12     -2.80e-24\npolygon 1301 (hole)        3 -1.07143e-07     -1.60e-19\npolygon 1302 (hole)       12 -3.59178e-07     -5.36e-19\npolygon 1303 (hole)        4 -1.55122e-06     -2.32e-18\npolygon 1304 (hole)        6 -5.49759e-07     -8.21e-19\npolygon 1305 (hole)        4 -1.73880e-06     -2.60e-18\npolygon 1306 (hole)        3 -1.26427e-07     -1.89e-19\npolygon 1307 (hole)        3 -9.79394e-10     -1.46e-21\npolygon 1308 (hole)       20 -1.95865e-05     -2.92e-17\npolygon 1309 (hole)        4 -6.11199e-07     -9.13e-19\npolygon 1310              23  2.72438e+06      4.07e-06\npolygon 1311 (hole)        9 -1.41894e-06     -2.12e-18\npolygon 1312 (hole)       10 -2.31262e-06     -3.45e-18\npolygon 1313 (hole)        8 -1.57906e-06     -2.36e-18\npolygon 1314 (hole)       15 -2.57958e-05     -3.85e-17\npolygon 1315 (hole)       10 -2.65498e-06     -3.96e-18\npolygon 1316 (hole)       12 -1.65474e-05     -2.47e-17\npolygon 1317 (hole)       14 -4.35752e-06     -6.51e-18\npolygon 1318 (hole)        3 -9.60485e-07     -1.43e-18\npolygon 1319 (hole)        4 -4.30008e-06     -6.42e-18\npolygon 1320 (hole)        3 -9.50720e-07     -1.42e-18\npolygon 1321              33  5.70263e+06      8.52e-06\npolygon 1322 (hole)        4 -1.11026e-07     -1.66e-19\npolygon 1323 (hole)       18 -3.35438e-06     -5.01e-18\npolygon 1324 (hole)        4 -8.99662e-08     -1.34e-19\npolygon 1325              90  4.20329e+07      6.28e-05\npolygon 1326 (hole)        7 -4.57836e-06     -6.84e-18\npolygon 1327 (hole)        6 -6.10846e-07     -9.12e-19\npolygon 1328 (hole)        4 -3.06663e-06     -4.58e-18\npolygon 1329              28  1.35341e+06      2.02e-06\npolygon 1330             225  1.08816e+08      1.62e-04\npolygon 1331 (hole)        4 -3.25111e-06     -4.85e-18\npolygon 1332 (hole)        7 -1.18871e-05     -1.77e-17\npolygon 1333 (hole)        4 -1.55924e-06     -2.33e-18\npolygon 1334 (hole)        6 -7.60023e-06     -1.13e-17\npolygon 1335 (hole)        4 -2.30025e-06     -3.43e-18\npolygon 1336 (hole)       11 -9.84822e-06     -1.47e-17\npolygon 1337 (hole)        5 -7.53674e-06     -1.13e-17\npolygon 1338              33  9.16670e+06      1.37e-05\npolygon 1339 (hole)        3 -2.41744e-08     -3.61e-20\npolygon 1340 (hole)        4 -2.51620e-06     -3.76e-18\npolygon 1341 (hole)       16 -1.27029e-05     -1.90e-17\npolygon 1342 (hole)       26 -1.72288e-05     -2.57e-17\npolygon 1343 (hole)       10 -2.36438e-06     -3.53e-18\npolygon 1344 (hole)        4 -3.34808e-06     -5.00e-18\npolygon 1345 (hole)        3 -9.14837e-09     -1.37e-20\npolygon 1346 (hole)        4 -1.19873e-06     -1.79e-18\npolygon 1347 (hole)        4 -4.92955e-07     -7.36e-19\npolygon 1348 (hole)        4 -2.32698e-06     -3.47e-18\npolygon 1349 (hole)        7 -2.16172e-05     -3.23e-17\npolygon 1350             192  7.02655e+07      1.05e-04\npolygon 1351 (hole)       26 -2.40792e-05     -3.60e-17\npolygon 1352 (hole)        7 -5.03281e-06     -7.51e-18\npolygon 1353 (hole)        7 -1.64468e-06     -2.46e-18\npolygon 1354 (hole)        8 -1.85171e-06     -2.76e-18\npolygon 1355              49  1.49245e+07      2.23e-05\npolygon 1356 (hole)       18 -9.02330e-06     -1.35e-17\npolygon 1357 (hole)       27 -5.41764e-06     -8.09e-18\npolygon 1358              98  1.79076e+07      2.67e-05\npolygon 1359 (hole)       13 -4.80257e-06     -7.17e-18\npolygon 1360 (hole)        4 -1.23210e-09     -1.84e-21\npolygon 1361 (hole)       10 -5.69750e-06     -8.51e-18\npolygon 1362 (hole)        4 -8.64197e-09     -1.29e-20\npolygon 1363 (hole)        4 -7.99628e-07     -1.19e-18\npolygon 1364 (hole)        4 -1.05581e-07     -1.58e-19\npolygon 1365 (hole)        4 -1.37479e-06     -2.05e-18\npolygon 1366 (hole)       15 -6.55499e-06     -9.79e-18\npolygon 1367 (hole)       16 -1.01732e-05     -1.52e-17\npolygon 1368 (hole)        4 -7.88985e-07     -1.18e-18\npolygon 1369 (hole)       16 -8.67609e-06     -1.30e-17\npolygon 1370 (hole)        5 -1.04547e-06     -1.56e-18\npolygon 1371 (hole)        6 -3.70115e-08     -5.53e-20\npolygon 1372 (hole)        4 -6.66500e-07     -9.95e-19\npolygon 1373 (hole)        5 -2.67465e-06     -3.99e-18\npolygon 1374 (hole)        6 -1.90428e-06     -2.84e-18\npolygon 1375 (hole)       13 -8.41304e-06     -1.26e-17\npolygon 1376 (hole)       13 -1.36015e-05     -2.03e-17\npolygon 1377 (hole)        4 -8.74539e-08     -1.31e-19\npolygon 1378 (hole)       30 -2.87850e-05     -4.30e-17\npolygon 1379 (hole)       11 -2.40885e-06     -3.60e-18\npolygon 1380 (hole)       13 -5.82211e-06     -8.69e-18\npolygon 1381 (hole)        4 -4.20571e-07     -6.28e-19\npolygon 1382 (hole)       10 -9.55963e-07     -1.43e-18\npolygon 1383 (hole)        5 -2.76738e-06     -4.13e-18\npolygon 1384 (hole)        8 -3.64075e-06     -5.44e-18\npolygon 1385 (hole)        4 -4.06980e-07     -6.08e-19\npolygon 1386 (hole)        4 -5.07468e-07     -7.58e-19\npolygon 1387 (hole)       16 -9.38904e-06     -1.40e-17\npolygon 1388 (hole)        4 -1.23601e-06     -1.85e-18\npolygon 1389               6  6.37552e+05      9.52e-07\npolygon 1390 (hole)        4 -9.73983e-07     -1.45e-18\npolygon 1391 (hole)        6 -1.42122e-06     -2.12e-18\npolygon 1392 (hole)        3 -3.51665e-08     -5.25e-20\npolygon 1393 (hole)        7 -3.01497e-06     -4.50e-18\npolygon 1394 (hole)        4 -2.90932e-07     -4.34e-19\npolygon 1395 (hole)       12 -8.34946e-06     -1.25e-17\npolygon 1396              49  1.01233e+07      1.51e-05\npolygon 1397 (hole)        3 -1.18683e-06     -1.77e-18\npolygon 1398 (hole)       14 -5.27823e-06     -7.88e-18\npolygon 1399 (hole)        6 -1.29239e-06     -1.93e-18\npolygon 1400 (hole)        6 -1.89882e-06     -2.84e-18\npolygon 1401 (hole)        8 -1.54910e-06     -2.31e-18\npolygon 1402 (hole)       44 -2.79284e-05     -4.17e-17\npolygon 1403 (hole)        4 -2.93319e-07     -4.38e-19\npolygon 1404 (hole)        4 -5.98880e-07     -8.94e-19\npolygon 1405 (hole)       17 -1.61884e-05     -2.42e-17\npolygon 1406 (hole)        4 -3.00830e-06     -4.49e-18\npolygon 1407 (hole)       10 -6.32218e-06     -9.44e-18\npolygon 1408 (hole)        6 -2.22110e-06     -3.32e-18\npolygon 1409 (hole)        4 -1.37311e-06     -2.05e-18\npolygon 1410 (hole)      116 -5.74188e-05     -8.57e-17\npolygon 1411 (hole)        4 -6.73023e-08     -1.00e-19\npolygon 1412 (hole)       11 -3.06108e-06     -4.57e-18\npolygon 1413 (hole)        4 -9.53593e-07     -1.42e-18\npolygon 1414 (hole)        4 -1.01867e-06     -1.52e-18\npolygon 1415 (hole)        6 -6.04033e-06     -9.02e-18\npolygon 1416 (hole)       10 -2.57535e-07     -3.85e-19\npolygon 1417 (hole)        3 -3.82545e-09     -5.71e-21\npolygon 1418 (hole)        5 -1.72474e-06     -2.58e-18\npolygon 1419 (hole)       20 -1.04546e-05     -1.56e-17\npolygon 1420             141  3.43053e+07      5.12e-05\npolygon 1421 (hole)       16 -2.77488e-06     -4.14e-18\npolygon 1422 (hole)        8 -5.86072e-06     -8.75e-18\npolygon 1423 (hole)        6 -3.30880e-06     -4.94e-18\npolygon 1424 (hole)        6 -6.07373e-06     -9.07e-18\npolygon 1425 (hole)        9 -2.99554e-06     -4.47e-18\npolygon 1426 (hole)        8 -1.67405e-06     -2.50e-18\npolygon 1427 (hole)       28 -6.15781e-06     -9.19e-18\npolygon 1428 (hole)        3 -3.88782e-08     -5.81e-20\npolygon 1429 (hole)        4 -3.27643e-07     -4.89e-19\npolygon 1430 (hole)        6 -2.82303e-06     -4.22e-18\npolygon 1431 (hole)       19 -1.25469e-05     -1.87e-17\npolygon 1432 (hole)        3 -2.77450e-08     -4.14e-20\npolygon 1433             195  3.24345e+07      4.84e-05\npolygon 1434              51  3.38313e+06      5.05e-06\npolygon 1435 (hole)        6 -1.02362e-06     -1.53e-18\npolygon 1436 (hole)       10 -2.99067e-06     -4.47e-18\npolygon 1437 (hole)       48 -3.28328e-05     -4.90e-17\npolygon 1438 (hole)       14 -1.26686e-05     -1.89e-17\npolygon 1439              34  2.01400e+06      3.01e-06\npolygon 1440 (hole)        4 -3.38471e-07     -5.05e-19\npolygon 1441 (hole)       12 -6.52316e-06     -9.74e-18\npolygon 1442 (hole)        3 -4.54695e-07     -6.79e-19\npolygon 1443              13  2.50435e+05      3.74e-07\npolygon 1444 (hole)        4 -4.28792e-07     -6.40e-19\npolygon 1445               9  9.04824e+04      1.35e-07\npolygon 1446 (hole)        6 -5.00839e-07     -7.48e-19\npolygon 1447 (hole)       16 -6.87328e-06     -1.03e-17\npolygon 1448 (hole)        3 -2.19555e-07     -3.28e-19\npolygon 1449 (hole)        4 -6.17909e-07     -9.23e-19\npolygon 1450 (hole)        7 -3.08205e-06     -4.60e-18\npolygon 1451 (hole)        6 -8.00906e-07     -1.20e-18\npolygon 1452 (hole)       44 -3.21771e-05     -4.80e-17\npolygon 1453 (hole)       12 -9.93527e-06     -1.48e-17\npolygon 1454 (hole)        4 -3.77730e-06     -5.64e-18\npolygon 1455 (hole)        4 -6.15912e-08     -9.20e-20\npolygon 1456 (hole)       21 -1.99790e-05     -2.98e-17\npolygon 1457              34  4.61794e+06      6.90e-06\npolygon 1458 (hole)        6 -3.95357e-06     -5.90e-18\npolygon 1459 (hole)        8 -3.20550e-06     -4.79e-18\npolygon 1460 (hole)        4 -1.13574e-06     -1.70e-18\npolygon 1461 (hole)        6 -4.01107e-06     -5.99e-18\npolygon 1462              17  4.58200e+05      6.84e-07\npolygon 1463              15  2.74776e+05      4.10e-07\npolygon 1464 (hole)        4 -2.17803e-06     -3.25e-18\npolygon 1465 (hole)        8 -3.10913e-06     -4.64e-18\npolygon 1466 (hole)        7 -1.03191e-06     -1.54e-18\npolygon 1467 (hole)        4 -4.56755e-07     -6.82e-19\npolygon 1468 (hole)       38 -2.28907e-05     -3.42e-17\npolygon 1469 (hole)       22 -2.02426e-05     -3.02e-17\npolygon 1470 (hole)        5 -7.03256e-06     -1.05e-17\npolygon 1471 (hole)        3 -4.53645e-06     -6.77e-18\npolygon 1472 (hole)        4 -2.57416e-06     -3.84e-18\npolygon 1473 (hole)        9 -3.17431e-06     -4.74e-18\npolygon 1474 (hole)        3 -8.14893e-07     -1.22e-18\npolygon 1475 (hole)        4 -2.92043e-07     -4.36e-19\npolygon 1476              21  5.34978e+05      7.99e-07\npolygon 1477              19  4.55347e+05      6.80e-07\npolygon 1478 (hole)       13 -3.65037e-06     -5.45e-18\npolygon 1479 (hole)       18 -5.91563e-06     -8.83e-18\npolygon 1480 (hole)       26 -2.22072e-05     -3.32e-17\npolygon 1481 (hole)        6 -4.11858e-06     -6.15e-18\npolygon 1482              71  3.42557e+06      5.11e-06\npolygon 1483 (hole)       10 -4.46830e-05     -6.67e-17\npolygon 1484 (hole)        3 -7.86478e-08     -1.17e-19\npolygon 1485 (hole)       10 -2.31548e-06     -3.46e-18\npolygon 1486 (hole)        8 -2.94599e-06     -4.40e-18\npolygon 1487 (hole)        3 -6.89871e-08     -1.03e-19\npolygon 1488 (hole)        4 -8.67038e-07     -1.29e-18\npolygon 1489 (hole)        7 -2.71749e-06     -4.06e-18\npolygon 1490 (hole)        4 -2.18103e-07     -3.26e-19\npolygon 1491 (hole)        8 -1.70822e-06     -2.55e-18\npolygon 1492 (hole)        7 -7.03541e-06     -1.05e-17\npolygon 1493 (hole)        9 -4.80516e-06     -7.17e-18\npolygon 1494              24  1.32420e+06      1.98e-06\npolygon 1495 (hole)        3 -2.86111e-07     -4.27e-19\npolygon 1496 (hole)        3 -2.78317e-07     -4.16e-19\npolygon 1497 (hole)        6 -1.83848e-06     -2.75e-18\npolygon 1498 (hole)       11 -6.96642e-06     -1.04e-17\npolygon 1499 (hole)        4 -3.39621e-07     -5.07e-19\npolygon 1500 (hole)        8 -9.82220e-07     -1.47e-18\npolygon 1501 (hole)        6 -1.98260e-06     -2.96e-18\npolygon 1502 (hole)       29 -4.25004e-05     -6.35e-17\npolygon 1503 (hole)        7 -4.40468e-06     -6.58e-18\npolygon 1504 (hole)        3 -1.88258e-07     -2.81e-19\npolygon 1505 (hole)       24 -2.40151e-05     -3.59e-17\npolygon 1506 (hole)       12 -1.45828e-05     -2.18e-17\npolygon 1507              15  3.26247e+05      4.87e-07\npolygon 1508 (hole)        8 -7.94382e-06     -1.19e-17\npolygon 1509              39  8.65790e+05      1.29e-06\npolygon 1510 (hole)        3 -7.78498e-08     -1.16e-19\npolygon 1511 (hole)        5 -4.56135e-06     -6.81e-18\npolygon 1512 (hole)       13 -4.85582e-06     -7.25e-18\npolygon 1513 (hole)        5 -1.96336e-06     -2.93e-18\npolygon 1514 (hole)        4 -3.15328e-06     -4.71e-18\npolygon 1515 (hole)        3 -4.51482e-07     -6.74e-19\npolygon 1516 (hole)        3 -1.07817e-06     -1.61e-18\npolygon 1517 (hole)       22 -1.73001e-05     -2.58e-17\npolygon 1518 (hole)        6 -6.52955e-06     -9.75e-18\npolygon 1519              43  1.41627e+06      2.11e-06\npolygon 1520 (hole)        6 -4.18463e-10     -6.25e-22\npolygon 1521 (hole)        8 -1.45698e-06     -2.18e-18\npolygon 1522 (hole)        5 -6.31841e-06     -9.43e-18\npolygon 1523              24  7.52068e+05      1.12e-06\npolygon 1524              96  1.32101e+07      1.97e-05\npolygon 1525 (hole)        4 -3.21780e-06     -4.80e-18\npolygon 1526 (hole)       22 -1.54606e-05     -2.31e-17\npolygon 1527              38  1.18003e+06      1.76e-06\npolygon 1528 (hole)        8 -4.32678e-06     -6.46e-18\npolygon 1529             429  5.99087e+08      8.95e-04\npolygon 1530 (hole)        4 -1.64135e-09     -2.45e-21\npolygon 1531 (hole)        4 -2.73107e-07     -4.08e-19\npolygon 1532 (hole)        4 -1.91370e-06     -2.86e-18\npolygon 1533 (hole)        4 -1.78855e-06     -2.67e-18\npolygon 1534 (hole)        4 -2.03383e-06     -3.04e-18\npolygon 1535 (hole)        4 -4.79569e-07     -7.16e-19\npolygon 1536              13  1.74105e+05      2.60e-07\npolygon 1537 (hole)        3 -3.72620e-09     -5.56e-21\npolygon 1538 (hole)        3 -7.54269e-07     -1.13e-18\npolygon 1539 (hole)        6 -1.22091e-06     -1.82e-18\npolygon 1540 (hole)        4 -6.55682e-07     -9.79e-19\npolygon 1541 (hole)        6 -1.41903e-06     -2.12e-18\npolygon 1542 (hole)        3 -2.08507e-07     -3.11e-19\npolygon 1543 (hole)       21 -5.68640e-06     -8.49e-18\npolygon 1544 (hole)        7 -4.14769e-06     -6.19e-18\npolygon 1545              19  2.52336e+05      3.77e-07\npolygon 1546              16  3.11495e+05      4.65e-07\npolygon 1547              11  9.11047e+04      1.36e-07\npolygon 1548              12  2.13470e+05      3.19e-07\npolygon 1549 (hole)        6 -3.42149e-07     -5.11e-19\npolygon 1550 (hole)        4 -1.13000e-06     -1.69e-18\npolygon 1551              17  5.82663e+05      8.70e-07\npolygon 1552 (hole)        7 -1.46618e-07     -2.19e-19\npolygon 1553 (hole)        4 -1.87323e-06     -2.80e-18\npolygon 1554 (hole)       22 -1.87611e-06     -2.80e-18\npolygon 1555 (hole)       18 -4.31626e-06     -6.44e-18\npolygon 1556 (hole)        8 -3.82791e-06     -5.72e-18\npolygon 1557 (hole)        8 -1.22826e-07     -1.83e-19\npolygon 1558 (hole)        6 -1.99743e-07     -2.98e-19\npolygon 1559 (hole)        6 -1.81367e-07     -2.71e-19\npolygon 1560 (hole)        6 -6.07369e-07     -9.07e-19\npolygon 1561 (hole)        6 -3.27160e-07     -4.89e-19\npolygon 1562 (hole)        4 -1.46273e-06     -2.18e-18\npolygon 1563              56  2.60440e+07      3.89e-05\npolygon 1564 (hole)        4 -2.49783e-08     -3.73e-20\npolygon 1565 (hole)       18 -2.72773e-06     -4.07e-18\npolygon 1566 (hole)       10 -1.60245e-05     -2.39e-17\npolygon 1567 (hole)        8 -3.87665e-06     -5.79e-18\npolygon 1568             107  4.91389e+06      7.34e-06\npolygon 1569 (hole)        4 -4.38590e-08     -6.55e-20\npolygon 1570 (hole)       23 -1.27065e-05     -1.90e-17\npolygon 1571 (hole)        4 -3.52441e-07     -5.26e-19\npolygon 1572 (hole)       14 -1.03893e-06     -1.55e-18\npolygon 1573 (hole)        4 -1.82700e-06     -2.73e-18\npolygon 1574 (hole)        4 -3.24845e-07     -4.85e-19\npolygon 1575 (hole)        4 -1.15005e-07     -1.72e-19\npolygon 1576 (hole)       17 -1.08039e-05     -1.61e-17\npolygon 1577 (hole)        3 -4.16747e-08     -6.22e-20\npolygon 1578 (hole)        7 -2.04281e-06     -3.05e-18\npolygon 1579 (hole)        7 -9.76038e-07     -1.46e-18\npolygon 1580 (hole)        4 -6.46463e-07     -9.65e-19\npolygon 1581 (hole)        6 -1.39092e-06     -2.08e-18\npolygon 1582 (hole)       14 -1.01022e-05     -1.51e-17\npolygon 1583 (hole)        8 -1.06753e-06     -1.59e-18\npolygon 1584 (hole)        5 -6.95110e-07     -1.04e-18\npolygon 1585 (hole)        6 -1.69667e-06     -2.53e-18\npolygon 1586 (hole)        6 -2.36309e-06     -3.53e-18\npolygon 1587 (hole)        4 -4.68481e-09     -7.00e-21\npolygon 1588 (hole)        4 -5.28613e-08     -7.89e-20\npolygon 1589 (hole)        4 -2.19566e-06     -3.28e-18\npolygon 1590 (hole)        4 -5.89715e-07     -8.81e-19\npolygon 1591 (hole)       10 -1.69640e-06     -2.53e-18\npolygon 1592 (hole)        6 -2.36204e-06     -3.53e-18\npolygon 1593 (hole)        8 -4.35762e-07     -6.51e-19\npolygon 1594 (hole)        4 -3.78991e-07     -5.66e-19\npolygon 1595 (hole)       11 -5.24079e-06     -7.83e-18\npolygon 1596 (hole)        4 -2.97757e-07     -4.45e-19\npolygon 1597 (hole)        6 -1.90442e-06     -2.84e-18\npolygon 1598 (hole)       12 -1.54359e-06     -2.30e-18\npolygon 1599 (hole)        4 -4.88715e-08     -7.30e-20\npolygon 1600 (hole)        6 -4.46422e-06     -6.67e-18\npolygon 1601 (hole)        4 -7.18182e-07     -1.07e-18\npolygon 1602              51  2.79076e+06      4.17e-06\npolygon 1603 (hole)        5 -1.30088e-06     -1.94e-18\npolygon 1604 (hole)        4 -3.44864e-09     -5.15e-21\npolygon 1605 (hole)        6 -4.08455e-07     -6.10e-19\npolygon 1606 (hole)       16 -1.17093e-05     -1.75e-17\npolygon 1607 (hole)        8 -1.88124e-06     -2.81e-18\npolygon 1608              89  1.61156e+07      2.41e-05\npolygon 1609 (hole)        4 -2.08345e-08     -3.11e-20\npolygon 1610 (hole)        8 -8.84457e-07     -1.32e-18\npolygon 1611 (hole)        6 -5.78902e-07     -8.64e-19\npolygon 1612 (hole)        3 -1.63520e-08     -2.44e-20\npolygon 1613 (hole)       24 -1.68721e-06     -2.52e-18\npolygon 1614 (hole)       44 -2.21857e-05     -3.31e-17\npolygon 1615              28  1.30499e+06      1.95e-06\npolygon 1616 (hole)        4 -5.63375e-07     -8.41e-19\npolygon 1617              11  1.27616e+05      1.91e-07\npolygon 1618 (hole)       14 -1.24709e-05     -1.86e-17\npolygon 1619 (hole)        4 -9.06970e-08     -1.35e-19\npolygon 1620 (hole)        3 -1.54971e-07     -2.31e-19\npolygon 1621 (hole)       12 -3.68707e-06     -5.51e-18\npolygon 1622 (hole)        7 -1.40269e-06     -2.09e-18\npolygon 1623 (hole)       14 -1.98158e-06     -2.96e-18\npolygon 1624 (hole)        6 -1.14775e-06     -1.71e-18\npolygon 1625              34  2.54199e+06      3.80e-06\npolygon 1626 (hole)        5 -4.92653e-07     -7.36e-19\npolygon 1627 (hole)        4 -6.94090e-08     -1.04e-19\npolygon 1628              27  1.72476e+06      2.58e-06\npolygon 1629 (hole)        5 -1.40448e-06     -2.10e-18\npolygon 1630 (hole)        7 -8.59950e-07     -1.28e-18\npolygon 1631 (hole)        3 -1.21743e-08     -1.82e-20\npolygon 1632 (hole)        4 -4.24830e-08     -6.34e-20\npolygon 1633 (hole)       10 -5.31444e-06     -7.94e-18\npolygon 1634 (hole)        4 -2.40976e-08     -3.60e-20\npolygon 1635 (hole)        6 -6.13864e-07     -9.17e-19\npolygon 1636 (hole)       14 -2.74358e-06     -4.10e-18\npolygon 1637              37  2.01882e+06      3.01e-06\npolygon 1638 (hole)        4 -3.44580e-07     -5.15e-19\npolygon 1639 (hole)        4 -5.85405e-07     -8.74e-19\npolygon 1640 (hole)        4 -2.98491e-07     -4.46e-19\npolygon 1641              23  1.65571e+06      2.47e-06\npolygon 1642 (hole)        4 -1.17689e-09     -1.76e-21\npolygon 1643 (hole)        4 -2.16214e-07     -3.23e-19\npolygon 1644 (hole)        4 -4.04928e-07     -6.05e-19\npolygon 1645 (hole)        5 -9.99138e-09     -1.49e-20\npolygon 1646 (hole)       10 -5.85947e-06     -8.75e-18\npolygon 1647 (hole)        6 -7.03787e-07     -1.05e-18\npolygon 1648 (hole)        4 -2.17558e-07     -3.25e-19\npolygon 1649 (hole)        4 -8.83660e-07     -1.32e-18\npolygon 1650 (hole)        8 -3.63328e-06     -5.43e-18\npolygon 1651 (hole)        5 -9.95934e-08     -1.49e-19\npolygon 1652 (hole)        8 -2.07837e-08     -3.10e-20\npolygon 1653 (hole)        4 -5.47865e-07     -8.18e-19\npolygon 1654 (hole)        6 -1.83399e-06     -2.74e-18\npolygon 1655 (hole)        4 -5.10743e-07     -7.63e-19\npolygon 1656 (hole)        6 -7.50815e-07     -1.12e-18\npolygon 1657 (hole)        4 -1.37158e-07     -2.05e-19\npolygon 1658 (hole)        4 -7.13833e-07     -1.07e-18\npolygon 1659 (hole)       16 -1.04407e-05     -1.56e-17\npolygon 1660 (hole)        4 -3.90398e-07     -5.83e-19\npolygon 1661 (hole)        4 -4.23935e-07     -6.33e-19\npolygon 1662 (hole)        4 -1.21166e-06     -1.81e-18\npolygon 1663 (hole)        3 -1.10293e-08     -1.65e-20\npolygon 1664 (hole)        4 -7.13134e-07     -1.06e-18\npolygon 1665 (hole)        3 -3.10439e-08     -4.64e-20\npolygon 1666 (hole)        4 -6.90386e-07     -1.03e-18\npolygon 1667 (hole)        3 -8.33411e-08     -1.24e-19\npolygon 1668 (hole)        4 -1.16037e-06     -1.73e-18\npolygon 1669 (hole)        4 -7.27735e-10     -1.09e-21\npolygon 1670 (hole)        8 -1.65989e-06     -2.48e-18\npolygon 1671 (hole)       16 -1.32050e-05     -1.97e-17\npolygon 1672 (hole)        4 -4.93692e-07     -7.37e-19\npolygon 1673 (hole)        4 -5.16743e-07     -7.72e-19\npolygon 1674 (hole)        3 -7.77350e-08     -1.16e-19\npolygon 1675 (hole)        4 -5.62314e-08     -8.40e-20\npolygon 1676 (hole)        4 -1.95564e-08     -2.92e-20\npolygon 1677 (hole)        3 -5.26487e-08     -7.86e-20\npolygon 1678 (hole)        4 -3.58834e-08     -5.36e-20\npolygon 1679 (hole)        4 -5.50151e-07     -8.21e-19\npolygon 1680 (hole)       14 -5.06833e-06     -7.57e-18\npolygon 1681 (hole)       22 -4.60302e-05     -6.87e-17\npolygon 1682 (hole)        4 -8.97690e-08     -1.34e-19\npolygon 1683              33  3.05816e+06      4.57e-06\npolygon 1684 (hole)        4 -5.38070e-08     -8.03e-20\npolygon 1685 (hole)       14 -4.93437e-06     -7.37e-18\npolygon 1686 (hole)        4 -4.76546e-07     -7.12e-19\npolygon 1687 (hole)        4 -5.02618e-07     -7.50e-19\npolygon 1688 (hole)        6 -5.13200e-06     -7.66e-18\npolygon 1689 (hole)        4 -8.36038e-07     -1.25e-18\npolygon 1690 (hole)        3 -5.36105e-12     -8.00e-24\npolygon 1691 (hole)        3 -2.71552e-08     -4.05e-20\npolygon 1692 (hole)        4 -3.60657e-09     -5.39e-21\npolygon 1693 (hole)        4 -1.33462e-06     -1.99e-18\npolygon 1694 (hole)       12 -4.86816e-05     -7.27e-17\npolygon 1695 (hole)        3 -1.34955e-07     -2.02e-19\npolygon 1696 (hole)        3 -2.12334e-07     -3.17e-19\npolygon 1697 (hole)        4 -4.20054e-09     -6.27e-21\npolygon 1698 (hole)        4 -5.33170e-07     -7.96e-19\npolygon 1699 (hole)       13 -5.30858e-06     -7.93e-18\npolygon 1700 (hole)        4 -8.06446e-08     -1.20e-19\npolygon 1701 (hole)        5 -3.68043e-07     -5.50e-19\npolygon 1702 (hole)        4 -2.33530e-07     -3.49e-19\npolygon 1703 (hole)        6 -1.39628e-06     -2.08e-18\npolygon 1704 (hole)        5 -1.06261e-06     -1.59e-18\npolygon 1705 (hole)        3 -4.46575e-08     -6.67e-20\npolygon 1706 (hole)        6 -1.13713e-08     -1.70e-20\npolygon 1707 (hole)        4 -8.74445e-09     -1.31e-20\npolygon 1708 (hole)        4 -2.67227e-07     -3.99e-19\npolygon 1709 (hole)        3 -1.84560e-08     -2.76e-20\npolygon 1710 (hole)        4 -1.60740e-06     -2.40e-18\npolygon 1711 (hole)        4 -3.53771e-07     -5.28e-19\npolygon 1712 (hole)        4 -3.46759e-07     -5.18e-19\npolygon 1713 (hole)        6 -9.05112e-07     -1.35e-18\npolygon 1714 (hole)        3 -1.56821e-08     -2.34e-20\npolygon 1715 (hole)        4 -4.47445e-08     -6.68e-20\npolygon 1716 (hole)        3 -6.29733e-08     -9.40e-20\npolygon 1717 (hole)        4 -1.63642e-06     -2.44e-18\npolygon 1718 (hole)        9 -1.75138e-06     -2.62e-18\npolygon 1719 (hole)        4 -2.87623e-07     -4.29e-19\npolygon 1720 (hole)        4 -8.67560e-11     -1.30e-22\npolygon 1721 (hole)        5 -1.31336e-06     -1.96e-18\npolygon 1722 (hole)        3 -3.04943e-07     -4.55e-19\npolygon 1723 (hole)        5 -2.68900e-06     -4.02e-18\npolygon 1724 (hole)        6 -6.90528e-07     -1.03e-18\npolygon 1725 (hole)       10 -1.92059e-06     -2.87e-18\npolygon 1726 (hole)        4 -2.00351e-07     -2.99e-19\npolygon 1727 (hole)        4 -2.86828e-07     -4.28e-19\npolygon 1728 (hole)        4 -7.73382e-07     -1.15e-18\npolygon 1729 (hole)        3 -1.11997e-08     -1.67e-20\npolygon 1730 (hole)        3 -9.20184e-08     -1.37e-19\npolygon 1731 (hole)        3 -1.32195e-07     -1.97e-19\npolygon 1732 (hole)        4 -3.29680e-07     -4.92e-19\npolygon 1733 (hole)        3 -2.80228e-08     -4.18e-20\npolygon 1734 (hole)        4 -2.99191e-07     -4.47e-19\npolygon 1735 (hole)        4 -2.05163e-07     -3.06e-19\npolygon 1736 (hole)       11 -1.40033e-05     -2.09e-17\npolygon 1737 (hole)        3 -3.24055e-07     -4.84e-19\npolygon 1738              14  3.23153e+05      4.83e-07\npolygon 1739 (hole)        4 -5.56091e-07     -8.30e-19\npolygon 1740              91  1.51209e+07      2.26e-05\npolygon 1741              12  2.42901e+05      3.63e-07\npolygon 1742 (hole)        8 -2.73012e-06     -4.08e-18\npolygon 1743 (hole)        3 -6.42965e-07     -9.60e-19\npolygon 1744 (hole)        4 -2.76407e-07     -4.13e-19\npolygon 1745 (hole)       26 -3.27735e-05     -4.89e-17\npolygon 1746 (hole)        3 -2.10943e-07     -3.15e-19\npolygon 1747 (hole)        8 -1.18263e-06     -1.77e-18\npolygon 1748 (hole)        9 -5.35231e-06     -7.99e-18\npolygon 1749 (hole)        5 -1.79697e-07     -2.68e-19\npolygon 1750 (hole)        6 -8.04294e-07     -1.20e-18\npolygon 1751 (hole)        3 -1.36326e-06     -2.04e-18\npolygon 1752 (hole)        4 -9.62895e-07     -1.44e-18\npolygon 1753 (hole)        4 -6.69034e-07     -9.99e-19\npolygon 1754 (hole)        3 -2.19453e-07     -3.28e-19\npolygon 1755 (hole)        5 -2.99322e-07     -4.47e-19\npolygon 1756 (hole)        8 -2.28509e-06     -3.41e-18\npolygon 1757 (hole)        4 -8.20274e-06     -1.22e-17\npolygon 1758 (hole)       11 -1.70474e-05     -2.55e-17\npolygon 1759 (hole)        3 -2.34922e-08     -3.51e-20\npolygon 1760 (hole)        4 -6.06276e-10     -9.05e-22\npolygon 1761 (hole)        5 -6.71399e-06     -1.00e-17\npolygon 1762 (hole)        5 -5.15199e-06     -7.69e-18\npolygon 1763 (hole)        3 -7.35162e-09     -1.10e-20\npolygon 1764 (hole)        3 -4.63827e-09     -6.93e-21\npolygon 1765 (hole)       12 -1.83303e-05     -2.74e-17\npolygon 1766 (hole)        3 -2.56734e-07     -3.83e-19\npolygon 1767 (hole)        4 -8.07600e-07     -1.21e-18\npolygon 1768 (hole)       26 -8.07401e-05     -1.21e-16\npolygon 1769 (hole)        4 -2.13280e-09     -3.18e-21\npolygon 1770 (hole)        7 -1.75631e-05     -2.62e-17\npolygon 1771 (hole)        5 -6.43614e-07     -9.61e-19\npolygon 1772              11  1.37889e+05      2.06e-07\npolygon 1773 (hole)        5 -5.08214e-07     -7.59e-19\npolygon 1774 (hole)        6 -2.73046e-06     -4.08e-18\npolygon 1775 (hole)        3 -2.19665e-08     -3.28e-20\npolygon 1776 (hole)       12 -4.56746e-06     -6.82e-18\npolygon 1777 (hole)       26 -3.51657e-05     -5.25e-17\npolygon 1778 (hole)        4 -7.78071e-07     -1.16e-18\npolygon 1779 (hole)       10 -4.26382e-06     -6.37e-18\npolygon 1780 (hole)        4 -7.81891e-07     -1.17e-18\npolygon 1781 (hole)        4 -2.17780e-07     -3.25e-19\npolygon 1782 (hole)        3 -5.33898e-09     -7.97e-21\npolygon 1783 (hole)        3 -2.25112e-08     -3.36e-20\npolygon 1784 (hole)       11 -4.16313e-06     -6.22e-18\npolygon 1785 (hole)        4 -1.65863e-08     -2.48e-20\npolygon 1786 (hole)        7 -4.09160e-06     -6.11e-18\npolygon 1787 (hole)        4 -1.10388e-06     -1.65e-18\npolygon 1788              58  2.29751e+07      3.43e-05\npolygon 1789 (hole)        7 -1.80837e-06     -2.70e-18\npolygon 1790 (hole)        4 -1.33063e-06     -1.99e-18\npolygon 1791 (hole)        6 -1.58632e-07     -2.37e-19\npolygon 1792 (hole)        9 -4.01274e-06     -5.99e-18\npolygon 1793 (hole)        4 -6.85939e-06     -1.02e-17\npolygon 1794 (hole)        3 -4.99275e-08     -7.46e-20\npolygon 1795              48  5.10265e+06      7.62e-06\npolygon 1796 (hole)        3 -6.23332e-08     -9.31e-20\npolygon 1797 (hole)        3 -1.69555e-07     -2.53e-19\npolygon 1798 (hole)        3 -2.32556e-08     -3.47e-20\npolygon 1799              22  1.30706e+06      1.95e-06\npolygon 1800 (hole)       13 -1.11426e-05     -1.66e-17\npolygon 1801 (hole)        4 -2.64657e-06     -3.95e-18\npolygon 1802 (hole)        9 -2.64074e-06     -3.94e-18\npolygon 1803 (hole)        5 -5.46390e-07     -8.16e-19\npolygon 1804 (hole)        4 -1.57487e-07     -2.35e-19\npolygon 1805 (hole)        3 -1.59808e-07     -2.39e-19\npolygon 1806 (hole)        3 -2.70704e-09     -4.04e-21\npolygon 1807              15  3.49480e+05      5.22e-07\npolygon 1808 (hole)        4 -5.66568e-07     -8.46e-19\npolygon 1809 (hole)        8 -1.11776e-05     -1.67e-17\npolygon 1810 (hole)       15 -2.05832e-05     -3.07e-17\npolygon 1811 (hole)        9 -3.23503e-06     -4.83e-18\npolygon 1812              17  1.57570e+06      2.35e-06\npolygon 1813 (hole)        4 -4.45505e-07     -6.65e-19\npolygon 1814 (hole)        4 -5.27258e-06     -7.87e-18\npolygon 1815 (hole)        6 -6.27130e-06     -9.36e-18\npolygon 1816 (hole)        4 -6.27149e-06     -9.36e-18\npolygon 1817 (hole)        6 -3.88162e-06     -5.80e-18\npolygon 1818 (hole)        6 -1.86717e-06     -2.79e-18\npolygon 1819 (hole)        4 -2.11130e-06     -3.15e-18\npolygon 1820 (hole)        3 -2.79157e-07     -4.17e-19\npolygon 1821 (hole)        9 -1.12712e-05     -1.68e-17\npolygon 1822 (hole)       14 -1.09777e-05     -1.64e-17\npolygon 1823 (hole)        3 -4.33570e-11     -6.47e-23\npolygon 1824 (hole)        3 -6.31536e-07     -9.43e-19\npolygon 1825 (hole)        5 -2.13138e-06     -3.18e-18\npolygon 1826 (hole)        4 -3.31303e-08     -4.95e-20\npolygon 1827 (hole)        4 -3.18416e-07     -4.75e-19\npolygon 1828 (hole)        3 -2.15696e-12     -3.22e-24\npolygon 1829 (hole)        6 -1.83220e-11     -2.74e-23\npolygon 1830 (hole)        7 -2.45238e-05     -3.66e-17\npolygon 1831 (hole)        4 -8.49859e-07     -1.27e-18\npolygon 1832 (hole)        5 -1.56820e-06     -2.34e-18\npolygon 1833 (hole)        4 -2.53338e-06     -3.78e-18\npolygon 1834 (hole)        4 -3.59630e-06     -5.37e-18\npolygon 1835 (hole)       10 -1.37731e-05     -2.06e-17\npolygon 1836 (hole)        8 -1.33011e-06     -1.99e-18\npolygon 1837 (hole)        3 -8.90672e-08     -1.33e-19\npolygon 1838 (hole)        5 -6.34059e-07     -9.47e-19\npolygon 1839 (hole)        4 -5.00802e-08     -7.48e-20\npolygon 1840 (hole)        3 -7.53308e-09     -1.12e-20\npolygon 1841 (hole)       18 -3.04655e-05     -4.55e-17\npolygon 1842 (hole)        4 -2.64560e-07     -3.95e-19\npolygon 1843 (hole)        4 -2.85284e-07     -4.26e-19\npolygon 1844 (hole)        3 -2.73112e-10     -4.08e-22\npolygon 1845 (hole)        6 -1.43732e-06     -2.15e-18\npolygon 1846 (hole)        5 -2.80662e-07     -4.19e-19\npolygon 1847 (hole)        4 -5.81052e-10     -8.68e-22\npolygon 1848 (hole)        4 -1.15507e-06     -1.72e-18\npolygon 1849 (hole)        7 -4.81395e-06     -7.19e-18\npolygon 1850 (hole)        3 -3.81212e-08     -5.69e-20\npolygon 1851 (hole)        8 -5.20229e-06     -7.77e-18\npolygon 1852 (hole)        4 -6.21730e-07     -9.28e-19\npolygon 1853 (hole)        4 -2.97528e-07     -4.44e-19\npolygon 1854 (hole)        4 -1.10667e-08     -1.65e-20\npolygon 1855 (hole)        6 -2.94240e-07     -4.39e-19\npolygon 1856 (hole)        4 -8.30125e-08     -1.24e-19\npolygon 1857 (hole)        6 -7.19520e-07     -1.07e-18\npolygon 1858 (hole)        4 -1.77073e-07     -2.64e-19\npolygon 1859 (hole)        3 -2.17674e-10     -3.25e-22\npolygon 1860 (hole)        4 -2.25466e-06     -3.37e-18\npolygon 1861 (hole)        6 -7.73253e-08     -1.15e-19\npolygon 1862 (hole)        4 -1.57357e-07     -2.35e-19\npolygon 1863 (hole)        5 -4.57468e-06     -6.83e-18\npolygon 1864 (hole)        8 -4.87707e-06     -7.28e-18\npolygon 1865 (hole)        4 -1.73318e-06     -2.59e-18\npolygon 1866 (hole)       10 -5.92931e-06     -8.85e-18\npolygon 1867 (hole)        3 -3.39743e-06     -5.07e-18\npolygon 1868 (hole)        5 -2.57467e-06     -3.84e-18\npolygon 1869               3  0.00000e+00      0.00e+00\npolygon 1870 (hole)       14 -1.90108e-06     -2.84e-18\npolygon 1871 (hole)        6 -7.61102e-07     -1.14e-18\npolygon 1872 (hole)        4 -5.32842e-07     -7.96e-19\npolygon 1873 (hole)        6 -1.13459e-06     -1.69e-18\npolygon 1874 (hole)        5 -1.11762e-06     -1.67e-18\npolygon 1875 (hole)        4 -1.47102e-07     -2.20e-19\npolygon 1876 (hole)        3 -1.28204e-08     -1.91e-20\npolygon 1877 (hole)        4 -4.11838e-07     -6.15e-19\npolygon 1878 (hole)        8 -1.40640e-06     -2.10e-18\npolygon 1879 (hole)        4 -1.19220e-07     -1.78e-19\npolygon 1880 (hole)       21 -6.24274e-06     -9.32e-18\npolygon 1881 (hole)        6 -1.02331e-06     -1.53e-18\npolygon 1882 (hole)        3 -6.32548e-07     -9.45e-19\npolygon 1883 (hole)        4 -1.74049e-07     -2.60e-19\npolygon 1884 (hole)        4 -6.72613e-07     -1.00e-18\npolygon 1885 (hole)        3 -1.26054e-07     -1.88e-19\npolygon 1886 (hole)        4 -1.56399e-07     -2.34e-19\npolygon 1887 (hole)        4 -1.07982e-06     -1.61e-18\npolygon 1888 (hole)        3 -1.75029e-10     -2.61e-22\npolygon 1889 (hole)        6 -1.21258e-06     -1.81e-18\npolygon 1890 (hole)        3 -2.18693e-10     -3.27e-22\npolygon 1891 (hole)        6 -1.98429e-06     -2.96e-18\npolygon 1892 (hole)        3 -7.44712e-08     -1.11e-19\npolygon 1893 (hole)        5 -1.73298e-07     -2.59e-19\npolygon 1894 (hole)        8 -1.11780e-06     -1.67e-18\npolygon 1895 (hole)        5 -2.92113e-07     -4.36e-19\npolygon 1896 (hole)        5 -4.17296e-07     -6.23e-19\npolygon 1897 (hole)        4 -8.74020e-08     -1.31e-19\npolygon 1898 (hole)       10 -4.80051e-06     -7.17e-18\npolygon 1899 (hole)        7 -3.92943e-06     -5.87e-18\npolygon 1900 (hole)        5 -6.39520e-08     -9.55e-20\npolygon 1901 (hole)        8 -2.97917e-06     -4.45e-18\npolygon 1902               3  7.90864e-13      1.18e-24\npolygon 1903 (hole)        3 -7.88717e-10     -1.18e-21\npolygon 1904 (hole)        7 -3.19924e-06     -4.78e-18\npolygon 1905 (hole)        3 -3.78263e-08     -5.65e-20\npolygon 1906 (hole)        4 -1.01393e-07     -1.51e-19\npolygon 1907 (hole)        6 -9.88893e-07     -1.48e-18\npolygon 1908 (hole)        4 -1.54280e-07     -2.30e-19\npolygon 1909 (hole)        6 -1.16613e-06     -1.74e-18\npolygon 1910 (hole)        4 -1.90529e-07     -2.84e-19\npolygon 1911 (hole)        5 -1.28177e-06     -1.91e-18\npolygon 1912 (hole)        7 -9.05878e-07     -1.35e-18\npolygon 1913 (hole)        6 -5.42790e-07     -8.10e-19\npolygon 1914 (hole)        7 -8.85090e-07     -1.32e-18\npolygon 1915 (hole)        4 -3.25811e-07     -4.86e-19\npolygon 1916 (hole)        4 -9.07403e-09     -1.35e-20\npolygon 1917 (hole)        8 -3.96105e-06     -5.91e-18\npolygon 1918 (hole)        3 -5.57654e-08     -8.33e-20\npolygon 1919 (hole)        8 -2.02385e-06     -3.02e-18\npolygon 1920 (hole)        4 -4.10371e-11     -6.13e-23\npolygon 1921 (hole)        4 -2.23459e-09     -3.34e-21\npolygon 1922 (hole)        4 -3.17182e-07     -4.74e-19\npolygon 1923 (hole)        6 -1.47194e-06     -2.20e-18\npolygon 1924 (hole)        7 -2.70870e-06     -4.04e-18\npolygon 1925 (hole)        3 -4.70586e-07     -7.03e-19\npolygon 1926              34  3.68725e+06      5.51e-06\npolygon 1927 (hole)        4 -2.48296e-06     -3.71e-18\npolygon 1928 (hole)        4 -2.95231e-06     -4.41e-18\npolygon 1929 (hole)        3 -8.03970e-08     -1.20e-19\npolygon 1930 (hole)        9 -6.25630e-06     -9.34e-18\npolygon 1931 (hole)        3 -2.04658e-07     -3.06e-19\npolygon 1932 (hole)        3 -2.71286e-08     -4.05e-20\npolygon 1933 (hole)        7 -5.33066e-06     -7.96e-18\npolygon 1934 (hole)        3 -3.77873e-09     -5.64e-21\npolygon 1935 (hole)        4 -4.50610e-07     -6.73e-19\npolygon 1936 (hole)        3 -1.06450e-06     -1.59e-18\npolygon 1937 (hole)        3 -5.75708e-06     -8.60e-18\npolygon 1938 (hole)        9 -3.72953e-06     -5.57e-18\npolygon 1939 (hole)        3 -3.46305e-07     -5.17e-19\npolygon 1940 (hole)        3 -2.24653e-07     -3.35e-19\npolygon 1941 (hole)       13 -1.13679e-05     -1.70e-17\npolygon 1942 (hole)        4 -3.04969e-07     -4.55e-19\npolygon 1943 (hole)        3 -1.30594e-08     -1.95e-20\npolygon 1944              34  5.21904e+06      7.79e-06\npolygon 1945 (hole)        7 -1.20248e-06     -1.80e-18\npolygon 1946 (hole)        7 -2.99564e-06     -4.47e-18\npolygon 1947 (hole)        8 -2.27618e-06     -3.40e-18\npolygon 1948 (hole)        4 -8.16830e-07     -1.22e-18\npolygon 1949 (hole)        3 -8.06707e-08     -1.20e-19\npolygon 1950 (hole)        4 -8.83594e-07     -1.32e-18\npolygon 1951 (hole)        4 -3.49086e-07     -5.21e-19\npolygon 1952 (hole)        3 -5.35261e-11     -7.99e-23\npolygon 1953 (hole)        4 -2.92210e-07     -4.36e-19\npolygon 1954 (hole)        4 -7.86447e-07     -1.17e-18\npolygon 1955 (hole)        4 -6.63060e-07     -9.90e-19\npolygon 1956 (hole)        6 -1.07789e-06     -1.61e-18\npolygon 1957 (hole)        4 -5.25771e-12     -7.85e-24\npolygon 1958 (hole)        4 -1.34866e-07     -2.01e-19\npolygon 1959 (hole)        8 -6.41469e-06     -9.58e-18\npolygon 1960 (hole)        4 -7.44965e-07     -1.11e-18\npolygon 1961              24  5.42734e+06      8.10e-06\npolygon 1962 (hole)        4 -3.75451e-07     -5.61e-19\npolygon 1963 (hole)        4 -4.44089e-07     -6.63e-19\npolygon 1964 (hole)        4 -6.92738e-06     -1.03e-17\npolygon 1965 (hole)        4 -1.38608e-06     -2.07e-18\npolygon 1966 (hole)       10 -3.04397e-06     -4.55e-18\npolygon 1967 (hole)       15 -4.51401e-05     -6.74e-17\npolygon 1968 (hole)        4 -3.82102e-06     -5.71e-18\npolygon 1969 (hole)        4 -4.82557e-08     -7.21e-20\npolygon 1970 (hole)        3 -1.56615e-06     -2.34e-18\npolygon 1971 (hole)        4 -2.81604e-07     -4.20e-19\npolygon 1972 (hole)        9 -7.13750e-06     -1.07e-17\npolygon 1973 (hole)        5 -1.16161e-05     -1.73e-17\npolygon 1974 (hole)        4 -4.23687e-08     -6.33e-20\npolygon 1975 (hole)        7 -5.75328e-06     -8.59e-18\npolygon 1976 (hole)        4 -7.88434e-08     -1.18e-19\npolygon 1977 (hole)        3 -7.85294e-08     -1.17e-19\npolygon 1978 (hole)        3 -1.69793e-08     -2.54e-20\npolygon 1979 (hole)        3 -5.42914e-07     -8.11e-19\npolygon 1980 (hole)        3 -6.51153e-07     -9.72e-19\npolygon 1981 (hole)        3 -1.44007e-06     -2.15e-18\npolygon 1982 (hole)        7 -8.09157e-07     -1.21e-18\npolygon 1983 (hole)        4 -6.98998e-07     -1.04e-18\npolygon 1984 (hole)        7 -3.44263e-07     -5.14e-19\npolygon 1985 (hole)        5 -3.15301e-07     -4.71e-19\npolygon 1986 (hole)       10 -1.92220e-06     -2.87e-18\npolygon 1987 (hole)        5 -6.25364e-07     -9.34e-19\npolygon 1988 (hole)        4 -4.68617e-09     -7.00e-21\npolygon 1989 (hole)        8 -9.34370e-07     -1.40e-18\npolygon 1990 (hole)        3 -2.63319e-10     -3.93e-22\npolygon 1991 (hole)       19 -1.21335e-05     -1.81e-17\npolygon 1992 (hole)        4 -6.83716e-07     -1.02e-18\npolygon 1993 (hole)       10 -1.81498e-05     -2.71e-17\npolygon 1994 (hole)        3 -9.85058e-08     -1.47e-19\npolygon 1995 (hole)        4 -8.01189e-09     -1.20e-20\npolygon 1996 (hole)        4 -4.21768e-07     -6.30e-19\npolygon 1997 (hole)        4 -1.38283e-07     -2.06e-19\npolygon 1998 (hole)        4 -5.22449e-07     -7.80e-19\npolygon 1999 (hole)        5 -4.09813e-06     -6.12e-18\npolygon 2000 (hole)        5 -2.18080e-06     -3.26e-18\npolygon 2001 (hole)        4 -1.61278e-07     -2.41e-19\npolygon 2002 (hole)        3 -3.01255e-07     -4.50e-19\npolygon 2003 (hole)        3 -2.00013e-08     -2.99e-20\npolygon 2004 (hole)        4 -5.49179e-07     -8.20e-19\npolygon 2005 (hole)        4 -7.24606e-09     -1.08e-20\npolygon 2006 (hole)        5 -2.94956e-07     -4.40e-19\npolygon 2007 (hole)        4 -3.38012e-08     -5.05e-20\npolygon 2008 (hole)        6 -5.04061e-07     -7.53e-19\npolygon 2009 (hole)        4 -1.96209e-06     -2.93e-18\npolygon 2010 (hole)        3 -1.01879e-07     -1.52e-19\npolygon 2011 (hole)        4 -1.76019e-07     -2.63e-19\npolygon 2012 (hole)        8 -2.45591e-06     -3.67e-18\npolygon 2013 (hole)        6 -6.04926e-07     -9.03e-19\npolygon 2014 (hole)        4 -8.28359e-07     -1.24e-18\npolygon 2015 (hole)        7 -7.54811e-06     -1.13e-17\npolygon 2016             422  4.66497e+08      6.97e-04\npolygon 2017 (hole)        4 -1.69285e-06     -2.53e-18\npolygon 2018 (hole)       15 -1.37891e-05     -2.06e-17\npolygon 2019 (hole)        3 -1.12114e-07     -1.67e-19\npolygon 2020 (hole)        4 -5.26294e-07     -7.86e-19\npolygon 2021 (hole)        8 -4.26164e-06     -6.36e-18\npolygon 2022 (hole)        3 -1.29708e-08     -1.94e-20\npolygon 2023 (hole)        5 -2.60038e-06     -3.88e-18\npolygon 2024 (hole)        4 -1.73366e-11     -2.59e-23\npolygon 2025 (hole)        5 -2.51174e-07     -3.75e-19\npolygon 2026 (hole)        3 -7.10799e-07     -1.06e-18\npolygon 2027 (hole)        4 -5.00120e-06     -7.47e-18\npolygon 2028 (hole)        4 -2.59465e-08     -3.87e-20\npolygon 2029 (hole)        3 -1.60619e-06     -2.40e-18\npolygon 2030 (hole)        3 -1.02278e-07     -1.53e-19\npolygon 2031 (hole)       14 -2.46813e-06     -3.69e-18\npolygon 2032 (hole)        3 -2.46492e-07     -3.68e-19\npolygon 2033 (hole)        3 -2.43835e-07     -3.64e-19\npolygon 2034 (hole)        4 -7.47139e-08     -1.12e-19\npolygon 2035 (hole)        4 -4.64820e-07     -6.94e-19\npolygon 2036 (hole)        9 -1.68186e-05     -2.51e-17\npolygon 2037 (hole)        3 -3.82957e-07     -5.72e-19\npolygon 2038 (hole)        4 -1.05052e-07     -1.57e-19\npolygon 2039 (hole)        3 -4.31120e-07     -6.44e-19\npolygon 2040 (hole)        5 -2.43377e-06     -3.63e-18\npolygon 2041 (hole)        5 -5.52177e-06     -8.24e-18\npolygon 2042 (hole)        4 -9.06788e-07     -1.35e-18\npolygon 2043 (hole)        3 -6.49923e-09     -9.70e-21\npolygon 2044 (hole)        8 -2.22540e-06     -3.32e-18\npolygon 2045 (hole)        4 -9.76475e-06     -1.46e-17\npolygon 2046 (hole)        3 -1.04451e-06     -1.56e-18\npolygon 2047 (hole)        4 -6.93267e-07     -1.04e-18\npolygon 2048 (hole)        3 -2.17536e-07     -3.25e-19\npolygon 2049 (hole)        4 -1.70220e-06     -2.54e-18\npolygon 2050 (hole)        3 -7.21990e-07     -1.08e-18\npolygon 2051 (hole)        9 -2.65177e-05     -3.96e-17\npolygon 2052 (hole)        4 -5.04179e-07     -7.53e-19\npolygon 2053 (hole)        4 -1.55992e-07     -2.33e-19\npolygon 2054             142  2.98767e+07      4.46e-05\npolygon 2055 (hole)        4 -8.39573e-08     -1.25e-19\npolygon 2056 (hole)        4 -1.74434e-06     -2.60e-18\npolygon 2057 (hole)        7 -6.44608e-06     -9.63e-18\npolygon 2058 (hole)        6 -5.03620e-06     -7.52e-18\npolygon 2059 (hole)       13 -2.48012e-05     -3.70e-17\npolygon 2060 (hole)        3 -2.64876e-07     -3.96e-19\npolygon 2061 (hole)        4 -7.68739e-07     -1.15e-18\npolygon 2062 (hole)        5 -5.68020e-06     -8.48e-18\npolygon 2063 (hole)        3 -5.13041e-07     -7.66e-19\npolygon 2064 (hole)        7 -5.71177e-06     -8.53e-18\npolygon 2065 (hole)        7 -3.71420e-06     -5.55e-18\npolygon 2066 (hole)        3 -4.35895e-09     -6.51e-21\npolygon 2067 (hole)        3 -8.76864e-07     -1.31e-18\npolygon 2068 (hole)        3 -1.71724e-08     -2.56e-20\npolygon 2069 (hole)        4 -5.38469e-07     -8.04e-19\npolygon 2070               3  2.20807e-13      3.30e-25\npolygon 2071 (hole)        9 -6.86726e-06     -1.03e-17\npolygon 2072 (hole)        7 -3.28723e-06     -4.91e-18\npolygon 2073 (hole)        4 -1.28046e-06     -1.91e-18\npolygon 2074 (hole)        4 -6.95615e-07     -1.04e-18\npolygon 2075 (hole)       12 -4.26089e-06     -6.36e-18\npolygon 2076 (hole)        4 -3.28508e-07     -4.91e-19\npolygon 2077 (hole)        3 -2.24959e-11     -3.36e-23\npolygon 2078 (hole)        4 -3.80264e-07     -5.68e-19\npolygon 2079 (hole)        5 -1.91389e-07     -2.86e-19\npolygon 2080 (hole)        5 -1.53721e-06     -2.30e-18\npolygon 2081             132  2.18707e+07      3.27e-05\npolygon 2082 (hole)        6 -1.60022e-07     -2.39e-19\npolygon 2083 (hole)        9 -3.02353e-06     -4.51e-18\npolygon 2084 (hole)        3 -1.22648e-09     -1.83e-21\npolygon 2085 (hole)        3 -3.29740e-12     -4.92e-24\npolygon 2086 (hole)        4 -6.03872e-10     -9.02e-22\npolygon 2087 (hole)        6 -5.71380e-07     -8.53e-19\npolygon 2088 (hole)        4 -1.04156e-07     -1.56e-19\npolygon 2089 (hole)        3 -2.12278e-07     -3.17e-19\npolygon 2090 (hole)        4 -4.15594e-07     -6.21e-19\npolygon 2091 (hole)        4 -6.49628e-07     -9.70e-19\npolygon 2092 (hole)        3 -2.34310e-10     -3.50e-22\npolygon 2093 (hole)        4 -2.36408e-06     -3.53e-18\npolygon 2094 (hole)        3 -1.27392e-07     -1.90e-19\npolygon 2095              19  5.88230e+05      8.78e-07\npolygon 2096              22  1.77611e+06      2.65e-06\npolygon 2097 (hole)        4 -6.42918e-04     -9.60e-16\npolygon 2098              40  4.09952e+06      6.12e-06\npolygon 2099 (hole)        3 -2.52078e-03     -3.76e-15\npolygon 2100 (hole)        3 -1.79689e-06     -2.68e-18\npolygon 2101 (hole)       18 -7.15276e-05     -1.07e-16\npolygon 2102              28  1.47685e+06      2.21e-06\npolygon 2103 (hole)        8 -8.93463e-02     -1.33e-13\npolygon 2104 (hole)        4 -3.84605e-07     -5.74e-19\npolygon 2105 (hole)       10 -2.92175e-06     -4.36e-18\npolygon 2106 (hole)        3 -4.05147e-09     -6.05e-21\npolygon 2107 (hole)        4 -7.00102e-08     -1.05e-19\npolygon 2108 (hole)        5 -8.60119e-07     -1.28e-18\npolygon 2109 (hole)        6 -3.80978e-06     -5.69e-18\npolygon 2110              67  9.99685e+06      1.49e-05\npolygon 2111 (hole)        4 -1.03949e-06     -1.55e-18\npolygon 2112 (hole)        5 -2.91434e-06     -4.35e-18\npolygon 2113 (hole)        3 -7.18397e-07     -1.07e-18\npolygon 2114 (hole)        6 -1.39936e-06     -2.09e-18\npolygon 2115 (hole)        8 -6.36344e-02     -9.50e-14\npolygon 2116 (hole)        6 -7.57977e-02     -1.13e-13\npolygon 2117 (hole)        3 -4.31917e-06     -6.45e-18\npolygon 2118 (hole)        4 -1.90194e-06     -2.84e-18\npolygon 2119 (hole)        4 -2.24224e-02     -3.35e-14\npolygon 2120 (hole)        5 -9.35663e-02     -1.40e-13\npolygon 2121 (hole)       13 -1.39251e-01     -2.08e-13\npolygon 2122 (hole)        7 -1.46533e-01     -2.19e-13\npolygon 2123 (hole)        6 -7.59070e-02     -1.13e-13\npolygon 2124 (hole)        7 -5.15914e-03     -7.70e-15\npolygon 2125 (hole)        4 -1.90641e-02     -2.85e-14\npolygon 2126 (hole)       21 -1.86624e-01     -2.79e-13\npolygon 2127 (hole)        6 -2.18823e-02     -3.27e-14\npolygon 2128 (hole)        3 -1.69684e-02     -2.53e-14\npolygon 2129 (hole)        8 -4.08363e-02     -6.10e-14\npolygon 2130 (hole)        3 -1.73631e-02     -2.59e-14\npolygon 2131 (hole)        5 -1.41820e-02     -2.12e-14\npolygon 2132 (hole)       10 -6.15227e-02     -9.19e-14\npolygon 2133 (hole)        4 -2.78853e-02     -4.16e-14\npolygon 2134 (hole)        4 -1.19272e-03     -1.78e-15\npolygon 2135 (hole)        8 -6.15579e-02     -9.19e-14\npolygon 2136 (hole)        4 -7.46409e-04     -1.11e-15\npolygon 2137 (hole)        4 -1.05431e-02     -1.57e-14\npolygon 2138 (hole)        4 -8.25150e-03     -1.23e-14\npolygon 2139 (hole)        6 -3.60199e-06     -5.38e-18\npolygon 2140 (hole)        5 -2.09549e-06     -3.13e-18\npolygon 2141 (hole)       10 -7.09078e-06     -1.06e-17\npolygon 2142 (hole)        9 -3.77501e-07     -5.64e-19\npolygon 2143 (hole)        3 -5.11518e-07     -7.64e-19\npolygon 2144 (hole)        4 -3.78585e-08     -5.65e-20\npolygon 2145 (hole)        3 -2.59990e-02     -3.88e-14\npolygon 2146 (hole)        4 -1.96870e-02     -2.94e-14\npolygon 2147 (hole)        3 -4.55390e-07     -6.80e-19\npolygon 2148 (hole)        6 -9.09753e-03     -1.36e-14\npolygon 2149 (hole)        4 -1.83409e-06     -2.74e-18\npolygon 2150 (hole)        3 -1.66969e-07     -2.49e-19\npolygon 2151 (hole)        3 -4.01451e-05     -5.99e-17\npolygon 2152 (hole)        9 -2.41806e-02     -3.61e-14\npolygon 2153 (hole)        6 -1.10855e-02     -1.66e-14\npolygon 2154 (hole)        3 -6.54186e-08     -9.77e-20\npolygon 2155 (hole)        4 -6.36389e-06     -9.50e-18\npolygon 2156 (hole)        4 -4.86960e-08     -7.27e-20\npolygon 2157 (hole)        4 -2.05561e-06     -3.07e-18\npolygon 2158 (hole)        3 -7.64008e-09     -1.14e-20\npolygon 2159 (hole)        4 -6.02970e-07     -9.00e-19\npolygon 2160 (hole)        4 -2.92540e-07     -4.37e-19\npolygon 2161               3  0.00000e+00      0.00e+00\npolygon 2162 (hole)       12 -1.49534e-06     -2.23e-18\npolygon 2163 (hole)        7 -9.38954e-06     -1.40e-17\npolygon 2164 (hole)        7 -5.73306e-02     -8.56e-14\npolygon 2165 (hole)        4 -1.34343e-07     -2.01e-19\npolygon 2166 (hole)        4 -4.68446e-07     -6.99e-19\npolygon 2167 (hole)        4 -4.26733e-02     -6.37e-14\npolygon 2168 (hole)        8 -3.37463e-06     -5.04e-18\npolygon 2169 (hole)        6 -1.57810e-06     -2.36e-18\npolygon 2170 (hole)        4 -1.38595e-06     -2.07e-18\npolygon 2171 (hole)        4 -2.50695e-09     -3.74e-21\npolygon 2172 (hole)        3 -1.35315e-08     -2.02e-20\npolygon 2173 (hole)        3 -9.56323e-03     -1.43e-14\npolygon 2174 (hole)        3 -6.33450e-07     -9.46e-19\npolygon 2175 (hole)        4 -7.12425e-07     -1.06e-18\npolygon 2176 (hole)        6 -7.41009e-03     -1.11e-14\npolygon 2177 (hole)        3 -4.71206e-07     -7.04e-19\npolygon 2178 (hole)        5 -7.41968e-07     -1.11e-18\npolygon 2179 (hole)        7 -1.51404e-06     -2.26e-18\npolygon 2180 (hole)        3 -1.01038e-07     -1.51e-19\npolygon 2181 (hole)        8 -1.54048e-01     -2.30e-13\npolygon 2182 (hole)        5 -3.39011e-06     -5.06e-18\npolygon 2183 (hole)        4 -1.79444e-07     -2.68e-19\npolygon 2184 (hole)        4 -1.01916e-07     -1.52e-19\npolygon 2185 (hole)        5 -1.67978e-06     -2.51e-18\npolygon 2186 (hole)        3 -2.99097e-08     -4.47e-20\npolygon 2187 (hole)       14 -1.04855e-06     -1.57e-18\npolygon 2188 (hole)        5 -9.77385e-07     -1.46e-18\npolygon 2189 (hole)        4 -6.05021e-08     -9.03e-20\npolygon 2190 (hole)        3 -1.05617e-02     -1.58e-14\npolygon 2191 (hole)        3 -1.29808e-08     -1.94e-20\npolygon 2192 (hole)        4 -2.82867e-07     -4.22e-19\npolygon 2193              25  4.82266e+05      7.20e-07\npolygon 2194 (hole)        6 -3.72419e-02     -5.56e-14\npolygon 2195 (hole)        8 -3.08351e-02     -4.60e-14\npolygon 2196 (hole)        7 -4.08889e-02     -6.11e-14\npolygon 2197 (hole)        3 -1.86764e-10     -2.79e-22\npolygon 2198 (hole)        4 -6.69685e-03     -1.00e-14\npolygon 2199 (hole)        4 -1.15923e-02     -1.73e-14\npolygon 2200 (hole)        6 -3.11062e-03     -4.64e-15\npolygon 2201 (hole)       12 -1.45672e-01     -2.18e-13\npolygon 2202 (hole)        3 -1.27666e-07     -1.91e-19\npolygon 2203 (hole)        4 -8.78676e-09     -1.31e-20\npolygon 2204 (hole)       18 -2.22540e-05     -3.32e-17\npolygon 2205 (hole)        4 -8.20702e-07     -1.23e-18\npolygon 2206 (hole)        3 -8.21758e-10     -1.23e-21\npolygon 2207 (hole)        4 -5.64735e-02     -8.43e-14\npolygon 2208 (hole)        8 -5.98509e-06     -8.94e-18\npolygon 2209 (hole)       23 -4.21367e-05     -6.29e-17\npolygon 2210 (hole)        4 -6.04233e-06     -9.02e-18\npolygon 2211 (hole)        3 -1.01598e-06     -1.52e-18\npolygon 2212 (hole)        3 -1.11161e-02     -1.66e-14\npolygon 2213 (hole)        4 -8.31680e-07     -1.24e-18\npolygon 2214 (hole)        5 -3.52144e-06     -5.26e-18\npolygon 2215 (hole)       11 -6.45407e-02     -9.64e-14\npolygon 2216 (hole)        8 -5.54170e-06     -8.27e-18\npolygon 2217 (hole)        4 -2.59927e-02     -3.88e-14\npolygon 2218 (hole)        8 -8.20152e-06     -1.22e-17\npolygon 2219 (hole)        4 -3.56192e-07     -5.32e-19\npolygon 2220 (hole)       28 -3.14027e-05     -4.69e-17\npolygon 2221 (hole)        6 -5.28056e-07     -7.88e-19\npolygon 2222 (hole)        3 -5.66072e-08     -8.45e-20\npolygon 2223 (hole)        5 -1.00901e-02     -1.51e-14\npolygon 2224 (hole)       30 -9.61047e-06     -1.44e-17\npolygon 2225 (hole)       12 -1.03526e-01     -1.55e-13\npolygon 2226 (hole)        4 -1.06402e-06     -1.59e-18\npolygon 2227 (hole)        9 -2.47071e-06     -3.69e-18\npolygon 2228 (hole)        8 -9.91238e-06     -1.48e-17\npolygon 2229 (hole)        3 -1.57906e-07     -2.36e-19\npolygon 2230 (hole)        6 -5.99495e-06     -8.95e-18\npolygon 2231 (hole)        4 -2.68076e-06     -4.00e-18\npolygon 2232 (hole)        4 -1.73764e-06     -2.59e-18\npolygon 2233 (hole)        6 -4.21775e-07     -6.30e-19\npolygon 2234 (hole)       20 -8.40914e-02     -1.26e-13\npolygon 2235 (hole)       10 -5.36188e-06     -8.01e-18\npolygon 2236 (hole)        6 -2.47728e-06     -3.70e-18\npolygon 2237 (hole)        5 -4.89811e-08     -7.31e-20\npolygon 2238 (hole)        4 -4.35520e-07     -6.50e-19\npolygon 2239 (hole)        3 -1.00561e-06     -1.50e-18\npolygon 2240 (hole)       18 -7.56039e-06     -1.13e-17\npolygon 2241 (hole)        6 -7.35348e-06     -1.10e-17\npolygon 2242 (hole)        5 -2.57731e-07     -3.85e-19\npolygon 2243 (hole)       29 -2.47987e-05     -3.70e-17\npolygon 2244 (hole)        6 -5.04624e-06     -7.53e-18\npolygon 2245 (hole)        6 -2.69437e-06     -4.02e-18\npolygon 2246 (hole)        8 -3.05527e-06     -4.56e-18\npolygon 2247 (hole)        6 -1.76078e-06     -2.63e-18\npolygon 2248 (hole)        9 -4.78506e-02     -7.14e-14\npolygon 2249 (hole)        3 -8.27525e-08     -1.24e-19\npolygon 2250 (hole)        3 -4.28106e-07     -6.39e-19\npolygon 2251 (hole)        6 -1.19058e-05     -1.78e-17\npolygon 2252 (hole)        3 -5.14628e-08     -7.68e-20\npolygon 2253 (hole)        4 -1.57810e-04     -2.36e-16\npolygon 2254 (hole)        6 -9.18635e-06     -1.37e-17\npolygon 2255 (hole)        4 -6.73218e-03     -1.01e-14\npolygon 2256 (hole)        9 -1.29124e-05     -1.93e-17\npolygon 2257 (hole)        5 -2.61896e-06     -3.91e-18\npolygon 2258 (hole)        4 -1.48299e-07     -2.21e-19\npolygon 2259              16  4.14093e+05      6.18e-07\npolygon 2260 (hole)        3 -9.48943e-07     -1.42e-18\npolygon 2261 (hole)        3 -7.85491e-07     -1.17e-18\npolygon 2262 (hole)        4 -6.18440e-07     -9.23e-19\npolygon 2263 (hole)        8 -5.54818e-06     -8.28e-18\npolygon 2264 (hole)       10 -1.17641e-05     -1.76e-17\npolygon 2265 (hole)        4 -5.95135e-07     -8.89e-19\npolygon 2266 (hole)        3 -7.78656e-08     -1.16e-19\npolygon 2267 (hole)        8 -5.87062e-06     -8.77e-18\npolygon 2268 (hole)        4 -1.33330e-06     -1.99e-18\npolygon 2269 (hole)        6 -1.02486e-06     -1.53e-18\npolygon 2270 (hole)       14 -2.91314e-05     -4.35e-17\npolygon 2271 (hole)       18 -1.96184e-05     -2.93e-17\npolygon 2272 (hole)        7 -1.78414e-06     -2.66e-18\npolygon 2273 (hole)       10 -5.01021e-06     -7.48e-18\npolygon 2274 (hole)        9 -1.89555e-06     -2.83e-18\npolygon 2275 (hole)        4 -1.02471e-06     -1.53e-18\npolygon 2276 (hole)        4 -5.32915e-07     -7.96e-19\npolygon 2277 (hole)        4 -7.83688e-07     -1.17e-18\npolygon 2278 (hole)        4 -3.12453e-06     -4.67e-18\npolygon 2279 (hole)        4 -5.36628e-03     -8.01e-15\npolygon 2280 (hole)        3 -8.82083e-04     -1.32e-15\npolygon 2281 (hole)        3 -1.42602e-02     -2.13e-14\npolygon 2282 (hole)        5 -3.17574e-06     -4.74e-18\npolygon 2283 (hole)        3 -1.39382e-13     -2.08e-25\npolygon 2284 (hole)        3 -2.12834e-10     -3.18e-22\npolygon 2285 (hole)        4 -4.37230e-03     -6.53e-15\npolygon 2286 (hole)        4 -1.36348e-02     -2.04e-14\npolygon 2287 (hole)        4 -3.84223e-02     -5.74e-14\npolygon 2288 (hole)        3 -2.20269e-10     -3.29e-22\npolygon 2289 (hole)        3 -6.14988e-12     -9.18e-24\npolygon 2290 (hole)        3 -7.55761e-03     -1.13e-14\npolygon 2291 (hole)       10 -1.02237e-05     -1.53e-17\npolygon 2292 (hole)        5 -4.50829e-07     -6.73e-19\npolygon 2293 (hole)        3 -3.20234e-07     -4.78e-19\npolygon 2294 (hole)       12 -1.71171e-05     -2.56e-17\npolygon 2295 (hole)        4 -8.03830e-03     -1.20e-14\npolygon 2296 (hole)        4 -3.71804e-09     -5.55e-21\npolygon 2297 (hole)       14 -2.61174e-05     -3.90e-17\npolygon 2298 (hole)        9 -2.53645e-02     -3.79e-14\npolygon 2299 (hole)        3 -3.35341e-08     -5.01e-20\npolygon 2300 (hole)        5 -5.31894e-02     -7.94e-14\npolygon 2301 (hole)        5 -6.16073e-08     -9.20e-20\npolygon 2302 (hole)        4 -1.15582e-02     -1.73e-14\npolygon 2303 (hole)        3 -2.16455e-03     -3.23e-15\npolygon 2304 (hole)        6 -4.67283e-02     -6.98e-14\npolygon 2305 (hole)        4 -3.80001e-07     -5.67e-19\npolygon 2306 (hole)        3 -4.78090e-08     -7.14e-20\npolygon 2307 (hole)        4 -4.34510e-07     -6.49e-19\npolygon 2308 (hole)        3 -1.85398e-07     -2.77e-19\npolygon 2309 (hole)        3 -2.87031e-03     -4.29e-15\npolygon 2310 (hole)        5 -2.49134e-08     -3.72e-20\npolygon 2311 (hole)        6 -7.95643e-07     -1.19e-18\npolygon 2312 (hole)        8 -5.42898e-06     -8.11e-18\npolygon 2313 (hole)        4 -5.42399e-02     -8.10e-14\npolygon 2314 (hole)        3 -4.75063e-03     -7.09e-15\npolygon 2315 (hole)        4 -3.44954e-02     -5.15e-14\npolygon 2316 (hole)       16 -8.32281e-06     -1.24e-17\npolygon 2317 (hole)        4 -4.63562e-07     -6.92e-19\npolygon 2318 (hole)        3 -5.74400e-03     -8.58e-15\npolygon 2319 (hole)        4 -4.76976e-09     -7.12e-21\npolygon 2320 (hole)        3 -2.47398e-13     -3.69e-25\npolygon 2321 (hole)        3 -1.45890e-03     -2.18e-15\npolygon 2322 (hole)       60 -1.21557e-04     -1.82e-16\npolygon 2323               3  0.00000e+00      0.00e+00\npolygon 2324 (hole)        4 -8.16295e-08     -1.22e-19\npolygon 2325 (hole)        6 -7.72840e-07     -1.15e-18\npolygon 2326 (hole)        4 -2.01252e-02     -3.01e-14\npolygon 2327 (hole)        4 -1.01152e-07     -1.51e-19\npolygon 2328 (hole)        6 -1.34176e-06     -2.00e-18\npolygon 2329 (hole)        6 -1.06947e-07     -1.60e-19\npolygon 2330 (hole)        3 -1.22081e-07     -1.82e-19\npolygon 2331 (hole)        4 -2.58759e-02     -3.86e-14\npolygon 2332 (hole)        7 -1.14651e-06     -1.71e-18\npolygon 2333 (hole)       10 -9.35195e-02     -1.40e-13\npolygon 2334 (hole)        3 -4.61430e-07     -6.89e-19\npolygon 2335 (hole)        4 -7.98706e-07     -1.19e-18\npolygon 2336 (hole)        3 -1.09293e-06     -1.63e-18\npolygon 2337 (hole)        6 -7.33464e-02     -1.10e-13\npolygon 2338 (hole)        3 -1.64006e-07     -2.45e-19\npolygon 2339 (hole)        3 -6.62731e-03     -9.90e-15\npolygon 2340 (hole)        6 -9.99205e-08     -1.49e-19\npolygon 2341 (hole)        4 -1.30906e-03     -1.95e-15\npolygon 2342 (hole)        7 -3.28624e-06     -4.91e-18\npolygon 2343               4  7.42222e-11      1.11e-22\npolygon 2344 (hole)        9 -6.94527e-06     -1.04e-17\npolygon 2345 (hole)        5 -9.92050e-03     -1.48e-14\npolygon 2346 (hole)        4 -9.97759e-07     -1.49e-18\npolygon 2347 (hole)        4 -9.31965e-03     -1.39e-14\npolygon 2348 (hole)        3 -2.29050e-07     -3.42e-19\npolygon 2349 (hole)        4 -7.16173e-06     -1.07e-17\npolygon 2350 (hole)        4 -2.73827e-02     -4.09e-14\npolygon 2351 (hole)        4 -1.09830e-07     -1.64e-19\npolygon 2352 (hole)        6 -2.07477e-06     -3.10e-18\npolygon 2353 (hole)        5 -3.08857e-07     -4.61e-19\npolygon 2354 (hole)        3 -1.55741e-06     -2.33e-18\npolygon 2355 (hole)       31 -4.35364e-05     -6.50e-17\npolygon 2356 (hole)        3 -1.15057e-02     -1.72e-14\npolygon 2357 (hole)        4 -3.27832e-08     -4.90e-20\npolygon 2358 (hole)        3 -1.88027e-08     -2.81e-20\npolygon 2359 (hole)        6 -1.83247e-06     -2.74e-18\npolygon 2360 (hole)        6 -8.77895e-02     -1.31e-13\npolygon 2361 (hole)        7 -2.49873e-06     -3.73e-18\npolygon 2362 (hole)        3 -7.17366e-07     -1.07e-18\npolygon 2363 (hole)       10 -9.54495e-06     -1.43e-17\npolygon 2364              26  3.03928e+06      4.54e-06\npolygon 2365 (hole)       12 -1.76530e-02     -2.64e-14\npolygon 2366 (hole)        6 -8.99151e-02     -1.34e-13\npolygon 2367 (hole)        6 -1.05801e-06     -1.58e-18\npolygon 2368 (hole)       21 -2.06889e-05     -3.09e-17\npolygon 2369 (hole)        4 -4.56220e-07     -6.81e-19\npolygon 2370 (hole)        5 -5.14858e-02     -7.69e-14\npolygon 2371 (hole)        4 -1.67308e-06     -2.50e-18\npolygon 2372 (hole)        3 -1.43546e-03     -2.14e-15\npolygon 2373 (hole)       22 -1.80547e-05     -2.70e-17\npolygon 2374 (hole)        4 -1.74107e-08     -2.60e-20\npolygon 2375 (hole)        3 -1.25515e-07     -1.87e-19\npolygon 2376 (hole)        6 -6.18043e-06     -9.23e-18\npolygon 2377 (hole)        4 -3.03801e-07     -4.54e-19\npolygon 2378 (hole)        6 -1.02159e-06     -1.53e-18\npolygon 2379 (hole)        8 -2.02876e-06     -3.03e-18\npolygon 2380 (hole)        8 -1.69866e-01     -2.54e-13\npolygon 2381 (hole)        4 -1.36177e-06     -2.03e-18\npolygon 2382 (hole)        8 -7.11268e-06     -1.06e-17\npolygon 2383 (hole)       14 -3.82760e-06     -5.72e-18\npolygon 2384 (hole)        4 -2.35677e-06     -3.52e-18\npolygon 2385 (hole)        3 -1.51419e-07     -2.26e-19\npolygon 2386 (hole)       16 -3.46141e-05     -5.17e-17\npolygon 2387 (hole)        9 -1.03675e-01     -1.55e-13\npolygon 2388 (hole)        6 -2.18370e-06     -3.26e-18\npolygon 2389 (hole)       11 -4.86649e-06     -7.27e-18\npolygon 2390 (hole)        5 -8.20744e-02     -1.23e-13\npolygon 2391 (hole)        4 -3.79155e-07     -5.66e-19\npolygon 2392 (hole)       28 -7.78123e-01     -1.16e-12\npolygon 2393 (hole)        3 -2.68393e-07     -4.01e-19\npolygon 2394 (hole)        4 -1.42174e-09     -2.12e-21\npolygon 2395 (hole)        3 -3.99165e-08     -5.96e-20\npolygon 2396 (hole)        4 -1.91195e-13     -2.85e-25\npolygon 2397 (hole)        4 -9.42612e-08     -1.41e-19\npolygon 2398 (hole)        7 -6.89272e-06     -1.03e-17\npolygon 2399 (hole)        3 -6.93058e-12     -1.03e-23\npolygon 2400 (hole)        4 -1.74499e-07     -2.61e-19\npolygon 2401 (hole)        3 -2.12142e-08     -3.17e-20\npolygon 2402 (hole)       42 -8.67486e-05     -1.30e-16\npolygon 2403 (hole)        4 -2.21895e-08     -3.31e-20\npolygon 2404 (hole)        3 -1.56351e-07     -2.33e-19\npolygon 2405 (hole)        4 -3.84292e-02     -5.74e-14\npolygon 2406 (hole)        3 -3.18587e-09     -4.76e-21\npolygon 2407 (hole)        3 -1.01893e-06     -1.52e-18\npolygon 2408 (hole)        3 -6.39753e-03     -9.55e-15\npolygon 2409 (hole)        4 -5.95131e-02     -8.89e-14\npolygon 2410 (hole)        4 -1.29410e-07     -1.93e-19\npolygon 2411 (hole)        4 -2.73737e-07     -4.09e-19\npolygon 2412 (hole)        3 -1.48909e-02     -2.22e-14\npolygon 2413 (hole)        4 -7.02051e-02     -1.05e-13\npolygon 2414 (hole)        4 -3.46193e-08     -5.17e-20\npolygon 2415 (hole)        9 -2.86407e-01     -4.28e-13\npolygon 2416 (hole)        5 -1.16314e-06     -1.74e-18\npolygon 2417 (hole)        6 -4.00973e-06     -5.99e-18\npolygon 2418 (hole)       16 -4.43785e-05     -6.63e-17\npolygon 2419 (hole)        8 -4.44582e-06     -6.64e-18\npolygon 2420 (hole)        4 -2.34017e-07     -3.49e-19\npolygon 2421 (hole)        3 -1.59007e-06     -2.37e-18\npolygon 2422 (hole)        3 -2.03249e-07     -3.03e-19\npolygon 2423 (hole)        5 -6.67829e-06     -9.97e-18\npolygon 2424 (hole)        4 -1.27598e-07     -1.91e-19\npolygon 2425 (hole)        5 -2.99429e-07     -4.47e-19\npolygon 2426 (hole)       10 -1.99499e-05     -2.98e-17\npolygon 2427              14  1.53563e+05      2.29e-07\npolygon 2428 (hole)        4 -1.28677e-07     -1.92e-19\npolygon 2429 (hole)        3 -1.09066e-06     -1.63e-18\npolygon 2430 (hole)        4 -4.35427e-07     -6.50e-19\npolygon 2431 (hole)        5 -4.01475e-07     -5.99e-19\npolygon 2432 (hole)       10 -3.23006e-06     -4.82e-18\npolygon 2433 (hole)        6 -2.28366e-07     -3.41e-19\npolygon 2434 (hole)        4 -4.86543e-07     -7.26e-19\npolygon 2435 (hole)        4 -8.79983e-09     -1.31e-20\npolygon 2436 (hole)        6 -6.03221e-06     -9.01e-18\npolygon 2437 (hole)        6 -7.17094e-06     -1.07e-17\npolygon 2438 (hole)        4 -4.89122e-08     -7.30e-20\npolygon 2439 (hole)        8 -6.88778e-07     -1.03e-18\npolygon 2440 (hole)        3 -7.91360e-10     -1.18e-21\npolygon 2441 (hole)        5 -1.95097e-07     -2.91e-19\npolygon 2442 (hole)        4 -1.94886e-07     -2.91e-19\npolygon 2443 (hole)        4 -5.21246e-07     -7.78e-19\npolygon 2444 (hole)       19 -4.74938e-05     -7.09e-17\npolygon 2445 (hole)        3 -5.79729e-07     -8.66e-19\npolygon 2446 (hole)        6 -6.34161e-06     -9.47e-18\npolygon 2447 (hole)        5 -3.32720e-02     -4.97e-14\npolygon 2448 (hole)        4 -1.48720e-08     -2.22e-20\npolygon 2449 (hole)        6 -1.14569e-06     -1.71e-18\npolygon 2450 (hole)       15 -1.98328e-01     -2.96e-13\npolygon 2451 (hole)        3 -4.92079e-08     -7.35e-20\npolygon 2452 (hole)        5 -1.31468e-06     -1.96e-18\npolygon 2453 (hole)        5 -4.16895e-08     -6.22e-20\npolygon 2454 (hole)        6 -5.60994e-08     -8.38e-20\npolygon 2455 (hole)        4 -4.28929e-07     -6.40e-19\npolygon 2456 (hole)        4 -4.04858e-07     -6.05e-19\npolygon 2457 (hole)        3 -3.83836e-11     -5.73e-23\npolygon 2458 (hole)        8 -1.28289e-06     -1.92e-18\npolygon 2459 (hole)        4 -2.03496e-08     -3.04e-20\npolygon 2460 (hole)        4 -1.31286e-07     -1.96e-19\npolygon 2461 (hole)       23 -6.12091e-05     -9.14e-17\npolygon 2462 (hole)        4 -2.19484e-09     -3.28e-21\npolygon 2463 (hole)        4 -9.79970e-10     -1.46e-21\npolygon 2464 (hole)        3 -9.11371e-08     -1.36e-19\npolygon 2465 (hole)        3 -1.32947e-07     -1.99e-19\npolygon 2466 (hole)        6 -5.97562e-07     -8.92e-19\npolygon 2467 (hole)        3 -4.30863e-08     -6.43e-20\npolygon 2468 (hole)        4 -9.80746e-08     -1.46e-19\npolygon 2469 (hole)        5 -5.53950e-08     -8.27e-20\npolygon 2470 (hole)        7 -1.59619e-06     -2.38e-18\npolygon 2471 (hole)        4 -3.34799e-07     -5.00e-19\npolygon 2472 (hole)        3 -2.27202e-11     -3.39e-23\npolygon 2473 (hole)        6 -1.63296e-06     -2.44e-18\npolygon 2474 (hole)        6 -1.18203e-06     -1.76e-18\npolygon 2475 (hole)        7 -5.25325e-06     -7.84e-18\npolygon 2476 (hole)        3 -5.38218e-08     -8.04e-20\npolygon 2477 (hole)        4 -5.38038e-07     -8.03e-19\npolygon 2478 (hole)        6 -5.49779e-07     -8.21e-19\npolygon 2479 (hole)        3 -2.10037e-11     -3.14e-23\npolygon 2480 (hole)        4 -4.37273e-08     -6.53e-20\npolygon 2481 (hole)        6 -2.27632e-02     -3.40e-14\npolygon 2482 (hole)        4 -1.60641e-06     -2.40e-18\npolygon 2483 (hole)        3 -1.19044e-02     -1.78e-14\npolygon 2484 (hole)       10 -2.69221e-06     -4.02e-18\npolygon 2485 (hole)        6 -1.15784e-06     -1.73e-18\npolygon 2486 (hole)        6 -5.27572e-07     -7.88e-19\npolygon 2487 (hole)        7 -3.84976e-06     -5.75e-18\npolygon 2488 (hole)        6 -2.63715e-06     -3.94e-18\npolygon 2489 (hole)        8 -1.06138e-05     -1.58e-17\npolygon 2490 (hole)        3 -6.96187e-12     -1.04e-23\npolygon 2491 (hole)        3 -1.58801e-07     -2.37e-19\npolygon 2492 (hole)        4 -8.49704e-08     -1.27e-19\npolygon 2493 (hole)        4 -3.42483e-07     -5.11e-19\npolygon 2494 (hole)        3 -4.58008e-07     -6.84e-19\npolygon 2495 (hole)        9 -4.53619e-06     -6.77e-18\npolygon 2496 (hole)        6 -2.12504e-07     -3.17e-19\npolygon 2497 (hole)        4 -2.98938e-07     -4.46e-19\npolygon 2498 (hole)        5 -1.21578e-06     -1.82e-18\npolygon 2499 (hole)        4 -1.92580e-06     -2.88e-18\npolygon 2500 (hole)        4 -2.10998e-07     -3.15e-19\npolygon 2501 (hole)        6 -4.29808e-07     -6.42e-19\npolygon 2502 (hole)        7 -6.54698e-06     -9.78e-18\npolygon 2503 (hole)        5 -2.80654e-07     -4.19e-19\npolygon 2504 (hole)        7 -1.81404e-05     -2.71e-17\npolygon 2505 (hole)       11 -3.73921e-06     -5.58e-18\npolygon 2506 (hole)        9 -1.47173e-06     -2.20e-18\npolygon 2507 (hole)        9 -4.26694e-06     -6.37e-18\npolygon 2508 (hole)       13 -1.40633e-02     -2.10e-14\npolygon 2509 (hole)        4 -9.21069e-07     -1.38e-18\npolygon 2510 (hole)       11 -2.27006e-06     -3.39e-18\npolygon 2511 (hole)        4 -4.48256e-07     -6.69e-19\npolygon 2512 (hole)        3 -9.56982e-09     -1.43e-20\npolygon 2513 (hole)        4 -4.46900e-07     -6.67e-19\npolygon 2514 (hole)        6 -2.76240e-02     -4.12e-14\npolygon 2515 (hole)        3 -3.74159e-02     -5.59e-14\npolygon 2516 (hole)        3 -2.72933e-02     -4.08e-14\npolygon 2517 (hole)        3 -1.16808e-02     -1.74e-14\npolygon 2518 (hole)       10 -4.10712e-03     -6.13e-15\npolygon 2519 (hole)       10 -9.86353e-06     -1.47e-17\npolygon 2520 (hole)       10 -1.67989e-06     -2.51e-18\npolygon 2521 (hole)        4 -9.91732e-02     -1.48e-13\npolygon 2522 (hole)       29 -5.84355e-05     -8.73e-17\npolygon 2523 (hole)        4 -5.97857e-06     -8.93e-18\npolygon 2524 (hole)        3 -2.56908e-08     -3.84e-20\npolygon 2525 (hole)       13 -5.16283e-06     -7.71e-18\npolygon 2526 (hole)        3 -3.48567e-08     -5.20e-20\npolygon 2527 (hole)        3 -1.56057e-07     -2.33e-19\npolygon 2528 (hole)        5 -3.13410e-07     -4.68e-19\npolygon 2529 (hole)        4 -9.18613e-07     -1.37e-18\npolygon 2530 (hole)        3 -2.15505e-06     -3.22e-18\npolygon 2531 (hole)        3 -1.81043e-08     -2.70e-20\npolygon 2532 (hole)        4 -7.89918e-02     -1.18e-13\npolygon 2533 (hole)        9 -2.70918e-05     -4.05e-17\npolygon 2534 (hole)        3 -1.07902e-03     -1.61e-15\npolygon 2535 (hole)        3 -8.74114e-04     -1.31e-15\npolygon 2536 (hole)        3 -3.75811e-08     -5.61e-20\npolygon 2537 (hole)        5 -1.38118e-06     -2.06e-18\npolygon 2538 (hole)       10 -2.09344e-05     -3.13e-17\npolygon 2539 (hole)        4 -1.15257e-06     -1.72e-18\npolygon 2540 (hole)        3 -7.12225e-08     -1.06e-19\npolygon 2541 (hole)        3 -2.96726e-07     -4.43e-19\npolygon 2542 (hole)       10 -5.59448e-02     -8.35e-14\npolygon 2543 (hole)        4 -1.59959e-08     -2.39e-20\npolygon 2544 (hole)        8 -5.58056e-06     -8.33e-18\npolygon 2545 (hole)        6 -6.80814e-07     -1.02e-18\npolygon 2546 (hole)       20 -3.06842e-05     -4.58e-17\npolygon 2547 (hole)        7 -2.13964e-05     -3.19e-17\npolygon 2548 (hole)       11 -1.11827e-05     -1.67e-17\npolygon 2549 (hole)        4 -2.13156e-05     -3.18e-17\npolygon 2550 (hole)        3 -1.84183e-08     -2.75e-20\npolygon 2551 (hole)        5 -4.32139e-07     -6.45e-19\npolygon 2552 (hole)       10 -1.05174e-05     -1.57e-17\npolygon 2553 (hole)        4 -3.15454e-06     -4.71e-18\npolygon 2554 (hole)        4 -4.61106e-08     -6.89e-20\npolygon 2555 (hole)        7 -2.12793e-06     -3.18e-18\npolygon 2556 (hole)        4 -2.12390e-07     -3.17e-19\npolygon 2557 (hole)        5 -7.52951e-06     -1.12e-17\npolygon 2558 (hole)        8 -1.76365e-06     -2.63e-18\npolygon 2559 (hole)        3 -1.70045e-11     -2.54e-23\npolygon 2560 (hole)        5 -1.95134e-07     -2.91e-19\npolygon 2561 (hole)       13 -1.43289e-05     -2.14e-17\npolygon 2562 (hole)        4 -1.65674e-06     -2.47e-18\npolygon 2563 (hole)        8 -9.79398e-07     -1.46e-18\npolygon 2564 (hole)        4 -1.74825e-06     -2.61e-18\npolygon 2565 (hole)        4 -1.94604e-06     -2.91e-18\npolygon 2566 (hole)        8 -7.65404e-06     -1.14e-17\npolygon 2567 (hole)        3 -4.32641e-07     -6.46e-19\npolygon 2568              19  5.08538e+05      7.59e-07\npolygon 2569 (hole)        6 -3.61785e-06     -5.40e-18\npolygon 2570 (hole)        7 -5.16775e-06     -7.72e-18\npolygon 2571 (hole)        6 -1.56320e-06     -2.33e-18\npolygon 2572 (hole)        6 -7.78003e-06     -1.16e-17\npolygon 2573 (hole)        3 -5.53252e-07     -8.26e-19\npolygon 2574 (hole)        8 -5.08598e-06     -7.59e-18\npolygon 2575 (hole)        5 -4.83185e-06     -7.21e-18\npolygon 2576 (hole)        6 -1.45583e-02     -2.17e-14\npolygon 2577              16  1.80565e+05      2.70e-07\npolygon 2578 (hole)        3 -1.58832e-08     -2.37e-20\npolygon 2579 (hole)        3 -1.07630e-06     -1.61e-18\npolygon 2580              26  9.75091e+05      1.46e-06\npolygon 2581 (hole)        4 -1.31328e-06     -1.96e-18\npolygon 2582 (hole)        4 -1.90718e-03     -2.85e-15\npolygon 2583 (hole)        7 -7.17369e-06     -1.07e-17\npolygon 2584 (hole)        7 -1.90588e-06     -2.85e-18\npolygon 2585 (hole)        5 -1.62634e-06     -2.43e-18\npolygon 2586 (hole)        7 -5.75219e-06     -8.59e-18\npolygon 2587 (hole)        6 -3.47421e-06     -5.19e-18\npolygon 2588 (hole)        4 -7.35304e-08     -1.10e-19\npolygon 2589 (hole)       13 -1.23833e-05     -1.85e-17\npolygon 2590 (hole)        6 -1.06451e-05     -1.59e-17\npolygon 2591 (hole)        3 -3.61751e-10     -5.40e-22\npolygon 2592 (hole)        8 -1.20501e-06     -1.80e-18\npolygon 2593 (hole)       12 -3.54873e-06     -5.30e-18\npolygon 2594 (hole)        5 -9.07099e-07     -1.35e-18\npolygon 2595 (hole)        4 -1.07687e-07     -1.61e-19\npolygon 2596 (hole)        6 -9.12655e-06     -1.36e-17\npolygon 2597               3  1.47054e-11      2.20e-23\npolygon 2598 (hole)       16 -2.32365e-06     -3.47e-18\npolygon 2599 (hole)        3 -7.26239e-03     -1.08e-14\npolygon 2600 (hole)        7 -9.81301e-06     -1.47e-17\npolygon 2601 (hole)        3 -6.77695e-10     -1.01e-21\npolygon 2602 (hole)        4 -5.87183e-07     -8.77e-19\npolygon 2603 (hole)        3 -2.80799e-02     -4.19e-14\npolygon 2604 (hole)        7 -5.31797e-03     -7.94e-15\npolygon 2605 (hole)        5 -4.47715e-09     -6.69e-21\npolygon 2606 (hole)        8 -9.25352e-06     -1.38e-17\npolygon 2607 (hole)        4 -3.60431e-07     -5.38e-19\npolygon 2608 (hole)       11 -1.50187e-05     -2.24e-17\npolygon 2609 (hole)        7 -1.63258e-06     -2.44e-18\npolygon 2610 (hole)        8 -9.48669e-06     -1.42e-17\npolygon 2611 (hole)       11 -9.73981e-06     -1.45e-17\npolygon 2612 (hole)        4 -1.02049e-07     -1.52e-19\npolygon 2613 (hole)        5 -5.68710e-07     -8.49e-19\npolygon 2614 (hole)        4 -8.92337e-06     -1.33e-17\npolygon 2615 (hole)        3 -8.15809e-11     -1.22e-22\npolygon 2616 (hole)        6 -5.28842e-06     -7.90e-18\npolygon 2617 (hole)        5 -7.76167e-07     -1.16e-18\npolygon 2618 (hole)        7 -8.38899e-06     -1.25e-17\npolygon 2619 (hole)        4 -1.21498e-07     -1.81e-19\npolygon 2620 (hole)       33 -6.46533e-05     -9.65e-17\npolygon 2621 (hole)        4 -1.65043e-11     -2.46e-23\npolygon 2622 (hole)        3 -6.43313e-07     -9.61e-19\npolygon 2623 (hole)        3 -1.45532e-02     -2.17e-14\npolygon 2624 (hole)        6 -2.85727e-06     -4.27e-18\npolygon 2625 (hole)        4 -2.82801e-07     -4.22e-19\npolygon 2626 (hole)        8 -7.81354e-07     -1.17e-18\npolygon 2627 (hole)       13 -7.98578e-06     -1.19e-17\npolygon 2628 (hole)        4 -6.13839e-08     -9.17e-20\npolygon 2629 (hole)        5 -8.64019e-08     -1.29e-19\npolygon 2630 (hole)        3 -8.07318e-08     -1.21e-19\npolygon 2631 (hole)        4 -6.75369e-07     -1.01e-18\npolygon 2632 (hole)        3 -2.28792e-02     -3.42e-14\npolygon 2633 (hole)       24 -4.44393e-05     -6.64e-17\npolygon 2634 (hole)        3 -8.83453e-10     -1.32e-21\npolygon 2635 (hole)        4 -1.67958e-06     -2.51e-18\npolygon 2636 (hole)        4 -8.89442e-07     -1.33e-18\npolygon 2637 (hole)        4 -9.00791e-07     -1.35e-18\npolygon 2638 (hole)        3 -1.34341e-11     -2.01e-23\npolygon 2639 (hole)        4 -1.59141e-06     -2.38e-18\npolygon 2640 (hole)       21 -3.60033e-05     -5.38e-17\npolygon 2641 (hole)        4 -8.98025e-08     -1.34e-19\npolygon 2642 (hole)        4 -5.60583e-07     -8.37e-19\npolygon 2643 (hole)        4 -2.85938e-06     -4.27e-18\npolygon 2644 (hole)        5 -1.72617e-02     -2.58e-14\npolygon 2645 (hole)        3 -4.96797e-03     -7.42e-15\npolygon 2646 (hole)        6 -1.85788e-02     -2.77e-14\npolygon 2647 (hole)        4 -8.61206e-03     -1.29e-14\npolygon 2648 (hole)        7 -2.02548e-06     -3.02e-18\npolygon 2649 (hole)        3 -1.66630e-03     -2.49e-15\npolygon 2650 (hole)        3 -3.56709e-03     -5.33e-15\npolygon 2651 (hole)       10 -1.31120e-02     -1.96e-14\npolygon 2652 (hole)        3 -1.35148e-06     -2.02e-18\npolygon 2653 (hole)        6 -4.33085e-07     -6.47e-19\npolygon 2654 (hole)        4 -9.56624e-08     -1.43e-19\npolygon 2655 (hole)        8 -1.33452e-05     -1.99e-17\npolygon 2656 (hole)        3 -1.06301e-09     -1.59e-21\npolygon 2657 (hole)       10 -1.02237e-05     -1.53e-17\npolygon 2658 (hole)        4 -1.74458e-06     -2.60e-18\npolygon 2659 (hole)        3 -3.77828e-08     -5.64e-20\npolygon 2660 (hole)        3 -3.11105e-07     -4.65e-19\npolygon 2661 (hole)        7 -1.30518e-06     -1.95e-18\npolygon 2662 (hole)        6 -4.60116e-06     -6.87e-18\npolygon 2663 (hole)        4 -2.10022e-07     -3.14e-19\npolygon 2664 (hole)        4 -3.20566e-08     -4.79e-20\npolygon 2665 (hole)        4 -3.45893e-08     -5.16e-20\npolygon 2666 (hole)        7 -1.53471e-06     -2.29e-18\npolygon 2667 (hole)       25 -3.64681e-06     -5.45e-18\npolygon 2668 (hole)        8 -3.92770e-07     -5.86e-19\npolygon 2669 (hole)        4 -1.91016e-07     -2.85e-19\npolygon 2670 (hole)        4 -3.07804e-07     -4.60e-19\npolygon 2671 (hole)        8 -4.33354e-07     -6.47e-19\npolygon 2672 (hole)        5 -5.74716e-07     -8.58e-19\npolygon 2673 (hole)        3 -1.03719e-07     -1.55e-19\npolygon 2674 (hole)        3 -7.72839e-09     -1.15e-20\npolygon 2675 (hole)        4 -7.71708e-07     -1.15e-18\npolygon 2676 (hole)        4 -6.96229e-08     -1.04e-19\npolygon 2677 (hole)       10 -2.69957e-06     -4.03e-18\npolygon 2678 (hole)       21 -4.53206e-06     -6.77e-18\npolygon 2679 (hole)        4 -3.63692e-07     -5.43e-19\npolygon 2680 (hole)        8 -4.27852e-06     -6.39e-18\npolygon 2681 (hole)        3 -1.42404e-09     -2.13e-21\npolygon 2682 (hole)       12 -1.28708e-06     -1.92e-18\npolygon 2683 (hole)        4 -6.19988e-07     -9.26e-19\npolygon 2684 (hole)        8 -1.56870e-05     -2.34e-17\npolygon 2685 (hole)        5 -1.12265e-05     -1.68e-17\npolygon 2686 (hole)        5 -4.74519e-07     -7.09e-19\npolygon 2687 (hole)        3 -8.38530e-08     -1.25e-19\npolygon 2688 (hole)        4 -8.10514e-07     -1.21e-18\npolygon 2689 (hole)        6 -1.56555e-06     -2.34e-18\npolygon 2690 (hole)        4 -5.70802e-07     -8.52e-19\npolygon 2691 (hole)        8 -2.18995e-06     -3.27e-18\npolygon 2692 (hole)        5 -4.48081e-08     -6.69e-20\npolygon 2693 (hole)        4 -4.66125e-07     -6.96e-19\npolygon 2694 (hole)        3 -3.58820e-09     -5.36e-21\npolygon 2695 (hole)        7 -4.51404e-06     -6.74e-18\npolygon 2696 (hole)        5 -2.08256e-07     -3.11e-19\npolygon 2697 (hole)        4 -1.69919e-10     -2.54e-22\npolygon 2698 (hole)        4 -8.94228e-09     -1.34e-20\npolygon 2699 (hole)        4 -1.40653e-07     -2.10e-19\npolygon 2700 (hole)        8 -1.28003e-06     -1.91e-18\npolygon 2701 (hole)        3 -4.50808e-11     -6.73e-23\npolygon 2702 (hole)        8 -1.27602e-05     -1.91e-17\npolygon 2703 (hole)        8 -2.77035e-06     -4.14e-18\npolygon 2704 (hole)        3 -1.35749e-06     -2.03e-18\npolygon 2705 (hole)        5 -7.47957e-06     -1.12e-17\npolygon 2706 (hole)       11 -3.65081e-06     -5.45e-18\npolygon 2707 (hole)       10 -3.21208e-06     -4.80e-18\npolygon 2708 (hole)        7 -4.83493e-07     -7.22e-19\npolygon 2709 (hole)       10 -2.60273e-06     -3.89e-18\npolygon 2710 (hole)        3 -1.74435e-07     -2.60e-19\npolygon 2711 (hole)        7 -3.54602e-06     -5.29e-18\npolygon 2712 (hole)        3 -1.43658e-08     -2.15e-20\npolygon 2713 (hole)        7 -5.61451e-06     -8.38e-18\npolygon 2714 (hole)       14 -2.82609e-06     -4.22e-18\npolygon 2715 (hole)       10 -1.66881e-05     -2.49e-17\npolygon 2716 (hole)        4 -2.40869e-07     -3.60e-19\npolygon 2717 (hole)       19 -6.13564e-06     -9.16e-18\npolygon 2718 (hole)        6 -7.26266e-06     -1.08e-17\npolygon 2719 (hole)       32 -8.46988e-05     -1.26e-16\npolygon 2720 (hole)        5 -5.82655e-07     -8.70e-19\npolygon 2721 (hole)        8 -2.68128e-06     -4.00e-18\npolygon 2722 (hole)       15 -6.55635e-06     -9.79e-18\npolygon 2723 (hole)       12 -5.77137e-06     -8.62e-18\npolygon 2724 (hole)        4 -7.33285e-07     -1.09e-18\npolygon 2725 (hole)        3 -2.39229e-08     -3.57e-20\npolygon 2726 (hole)       16 -9.46751e-06     -1.41e-17\npolygon 2727 (hole)       14 -8.44455e-06     -1.26e-17\npolygon 2728 (hole)        4 -1.05937e-06     -1.58e-18\npolygon 2729 (hole)        8 -3.29755e-07     -4.92e-19\npolygon 2730 (hole)        4 -3.66402e-06     -5.47e-18\npolygon 2731 (hole)        4 -1.07888e-06     -1.61e-18\npolygon 2732 (hole)        7 -1.49763e-06     -2.24e-18\npolygon 2733 (hole)        3 -1.28527e-07     -1.92e-19\npolygon 2734 (hole)       12 -7.08585e-07     -1.06e-18\npolygon 2735 (hole)        8 -2.39026e-06     -3.57e-18\npolygon 2736 (hole)        7 -6.28998e-07     -9.39e-19\npolygon 2737 (hole)        4 -1.48952e-06     -2.22e-18\npolygon 2738 (hole)       16 -4.15919e-06     -6.21e-18\npolygon 2739 (hole)       34 -1.71338e-05     -2.56e-17\npolygon 2740 (hole)        4 -1.63533e-06     -2.44e-18\npolygon 2741 (hole)        4 -2.17974e-07     -3.25e-19\npolygon 2742 (hole)        8 -5.79581e-06     -8.65e-18\npolygon 2743 (hole)        3 -6.63547e-08     -9.91e-20\npolygon 2744 (hole)        8 -6.30877e-07     -9.42e-19\npolygon 2745 (hole)        4 -1.22777e-06     -1.83e-18\npolygon 2746 (hole)        3 -3.71645e-09     -5.55e-21\npolygon 2747 (hole)        6 -1.48809e-06     -2.22e-18\npolygon 2748 (hole)        8 -1.39025e-06     -2.08e-18\npolygon 2749 (hole)        6 -1.74681e-06     -2.61e-18\npolygon 2750 (hole)       11 -5.05686e-06     -7.55e-18\npolygon 2751 (hole)       15 -9.75367e-06     -1.46e-17\npolygon 2752 (hole)        6 -9.49033e-07     -1.42e-18\npolygon 2753 (hole)        4 -4.34250e-07     -6.48e-19\npolygon 2754 (hole)       14 -1.06614e-06     -1.59e-18\npolygon 2755               3  0.00000e+00      0.00e+00\npolygon 2756 (hole)        6 -4.55277e-07     -6.80e-19\npolygon 2757 (hole)        4 -5.59661e-07     -8.36e-19\npolygon 2758 (hole)        6 -1.16690e-07     -1.74e-19\npolygon 2759 (hole)        8 -5.06501e-07     -7.56e-19\npolygon 2760 (hole)        6 -1.50149e-06     -2.24e-18\npolygon 2761 (hole)        9 -2.30168e-06     -3.44e-18\npolygon 2762 (hole)        4 -6.45567e-07     -9.64e-19\npolygon 2763 (hole)       11 -1.84860e-06     -2.76e-18\npolygon 2764 (hole)        4 -4.65480e-07     -6.95e-19\npolygon 2765 (hole)        3 -4.98575e-09     -7.44e-21\npolygon 2766 (hole)       30 -1.29726e-05     -1.94e-17\npolygon 2767 (hole)        3 -1.27049e-07     -1.90e-19\npolygon 2768 (hole)       10 -5.10962e-06     -7.63e-18\npolygon 2769 (hole)        3 -3.22220e-09     -4.81e-21\npolygon 2770 (hole)        3 -2.49870e-08     -3.73e-20\npolygon 2771 (hole)       10 -2.29265e-06     -3.42e-18\npolygon 2772 (hole)        4 -2.68307e-07     -4.01e-19\npolygon 2773 (hole)        5 -4.90757e-07     -7.33e-19\npolygon 2774 (hole)       50 -2.64916e-05     -3.96e-17\npolygon 2775 (hole)        4 -8.77056e-07     -1.31e-18\npolygon 2776 (hole)       10 -6.86850e-07     -1.03e-18\npolygon 2777 (hole)        6 -2.66668e-06     -3.98e-18\npolygon 2778 (hole)       14 -1.47976e-06     -2.21e-18\npolygon 2779 (hole)        6 -2.24397e-06     -3.35e-18\npolygon 2780 (hole)        4 -2.50989e-06     -3.75e-18\npolygon 2781 (hole)        4 -1.10271e-07     -1.65e-19\npolygon 2782 (hole)        5 -1.71933e-06     -2.57e-18\npolygon 2783 (hole)        4 -2.01831e-06     -3.01e-18\npolygon 2784 (hole)        5 -1.73111e-07     -2.58e-19\npolygon 2785 (hole)       10 -1.93711e-06     -2.89e-18\npolygon 2786 (hole)        4 -5.17126e-08     -7.72e-20\npolygon 2787 (hole)        4 -1.73096e-06     -2.58e-18\npolygon 2788 (hole)       10 -3.87688e-06     -5.79e-18\npolygon 2789 (hole)        6 -2.21490e-06     -3.31e-18\npolygon 2790 (hole)        6 -8.97703e-07     -1.34e-18\npolygon 2791 (hole)        6 -1.63609e-06     -2.44e-18\npolygon 2792 (hole)        6 -2.09339e-06     -3.13e-18\npolygon 2793 (hole)       25 -1.88970e-05     -2.82e-17\npolygon 2794 (hole)       12 -4.48821e-06     -6.70e-18\npolygon 2795 (hole)        6 -9.80352e-07     -1.46e-18\npolygon 2796 (hole)        4 -7.39046e-08     -1.10e-19\npolygon 2797 (hole)        4 -1.38245e-08     -2.06e-20\npolygon 2798 (hole)       12 -2.22048e-06     -3.32e-18\npolygon 2799 (hole)        4 -3.51142e-07     -5.24e-19\npolygon 2800 (hole)       17 -4.99387e-06     -7.46e-18\npolygon 2801 (hole)        4 -1.38206e-07     -2.06e-19\npolygon 2802 (hole)       10 -4.06130e-07     -6.06e-19\npolygon 2803 (hole)        4 -2.40911e-07     -3.60e-19\npolygon 2804 (hole)       51 -1.00490e-05     -1.50e-17\npolygon 2805 (hole)        3 -1.77845e-07     -2.66e-19\npolygon 2806 (hole)       14 -6.81459e-06     -1.02e-17\npolygon 2807 (hole)       12 -4.68440e-06     -6.99e-18\npolygon 2808 (hole)        5 -5.12776e-07     -7.66e-19\npolygon 2809 (hole)        7 -6.33486e-07     -9.46e-19\npolygon 2810 (hole)        5 -4.23206e-07     -6.32e-19\npolygon 2811 (hole)        4 -1.68997e-07     -2.52e-19\npolygon 2812 (hole)       10 -5.22706e-06     -7.80e-18\npolygon 2813 (hole)        4 -6.33443e-07     -9.46e-19\npolygon 2814 (hole)        4 -1.62263e-07     -2.42e-19\npolygon 2815 (hole)       12 -4.19155e-06     -6.26e-18\npolygon 2816              19  2.15295e+05      3.21e-07\npolygon 2817 (hole)        7 -5.39354e-07     -8.05e-19\npolygon 2818 (hole)        4 -5.34541e-08     -7.98e-20\npolygon 2819 (hole)       29 -1.00200e-05     -1.50e-17\npolygon 2820 (hole)        6 -3.86679e-07     -5.77e-19\npolygon 2821 (hole)       10 -1.64656e-06     -2.46e-18\npolygon 2822 (hole)        6 -2.08436e-07     -3.11e-19\npolygon 2823 (hole)       13 -1.44312e-06     -2.15e-18\npolygon 2824 (hole)        6 -6.48605e-07     -9.68e-19\npolygon 2825 (hole)        6 -6.30489e-07     -9.41e-19\npolygon 2826 (hole)        3 -4.41471e-08     -6.59e-20\npolygon 2827 (hole)       20 -3.01848e-06     -4.51e-18\npolygon 2828 (hole)       10 -7.06261e-07     -1.05e-18\npolygon 2829 (hole)        5 -1.07332e-07     -1.60e-19\npolygon 2830 (hole)       12 -2.51235e-06     -3.75e-18\npolygon 2831 (hole)        3 -1.09230e-07     -1.63e-19\npolygon 2832 (hole)        4 -1.16148e-07     -1.73e-19\npolygon 2833 (hole)        8 -1.46898e-06     -2.19e-18\npolygon 2834 (hole)       31 -4.78968e-06     -7.15e-18\npolygon 2835 (hole)        9 -3.44274e-06     -5.14e-18\npolygon 2836 (hole)       13 -2.04389e-05     -3.05e-17\npolygon 2837 (hole)       14 -2.02081e-05     -3.02e-17\npolygon 2838 (hole)        4 -7.21752e-07     -1.08e-18\npolygon 2839 (hole)        5 -1.92895e-06     -2.88e-18\npolygon 2840 (hole)       11 -8.82465e-06     -1.32e-17\npolygon 2841 (hole)        7 -1.63492e-06     -2.44e-18\npolygon 2842 (hole)        8 -6.55256e-07     -9.78e-19\npolygon 2843 (hole)        5 -4.61426e-07     -6.89e-19\npolygon 2844 (hole)        3 -4.86698e-08     -7.27e-20\npolygon 2845 (hole)        5 -4.32951e-08     -6.46e-20\npolygon 2846 (hole)       13 -1.78357e-06     -2.66e-18\npolygon 2847 (hole)        5 -1.01484e-06     -1.52e-18\npolygon 2848 (hole)        9 -5.04962e-07     -7.54e-19\npolygon 2849 (hole)       14 -1.44657e-06     -2.16e-18\npolygon 2850 (hole)        4 -4.25409e-07     -6.35e-19\npolygon 2851 (hole)        4 -1.51406e-06     -2.26e-18\npolygon 2852 (hole)        7 -3.17111e-06     -4.74e-18\npolygon 2853 (hole)       17 -1.38583e-05     -2.07e-17\npolygon 2854 (hole)        5 -1.06313e-06     -1.59e-18\npolygon 2855 (hole)        8 -2.18189e-06     -3.26e-18\npolygon 2856 (hole)        6 -1.71148e-07     -2.56e-19\npolygon 2857 (hole)        8 -4.87991e-07     -7.29e-19\npolygon 2858 (hole)        9 -4.25949e-07     -6.36e-19\npolygon 2859 (hole)        6 -7.05408e-06     -1.05e-17\npolygon 2860 (hole)       14 -2.99877e-05     -4.48e-17\npolygon 2861 (hole)       10 -1.19796e-05     -1.79e-17\npolygon 2862 (hole)       17 -3.81199e-05     -5.69e-17\npolygon 2863 (hole)        9 -6.24807e-06     -9.33e-18\npolygon 2864 (hole)        3 -2.21670e-08     -3.31e-20\npolygon 2865 (hole)        7 -1.26269e-06     -1.89e-18\npolygon 2866 (hole)        3 -2.73689e-07     -4.09e-19\npolygon 2867 (hole)        4 -4.88945e-07     -7.30e-19\npolygon 2868 (hole)        8 -1.10428e-05     -1.65e-17\npolygon 2869 (hole)        7 -4.39022e-06     -6.56e-18\npolygon 2870 (hole)        5 -1.16748e-06     -1.74e-18\npolygon 2871 (hole)        3 -7.28232e-08     -1.09e-19\npolygon 2872 (hole)        4 -3.38675e-07     -5.06e-19\npolygon 2873 (hole)        5 -1.61736e-06     -2.42e-18\npolygon 2874 (hole)        6 -1.27166e-06     -1.90e-18\npolygon 2875 (hole)        3 -5.00856e-08     -7.48e-20\npolygon 2876 (hole)        9 -7.53212e-06     -1.12e-17\npolygon 2877 (hole)        5 -2.41989e-06     -3.61e-18\npolygon 2878 (hole)        6 -4.39938e-07     -6.57e-19\npolygon 2879 (hole)        6 -2.73478e-06     -4.08e-18\npolygon 2880 (hole)        8 -6.27417e-06     -9.37e-18\npolygon 2881 (hole)        3 -3.32579e-07     -4.97e-19\npolygon 2882 (hole)        8 -9.50574e-06     -1.42e-17\npolygon 2883 (hole)       34 -2.55436e-05     -3.81e-17\npolygon 2884 (hole)        3 -2.77071e-06     -4.14e-18\npolygon 2885 (hole)        6 -8.38765e-06     -1.25e-17\npolygon 2886 (hole)       31 -4.97007e-05     -7.42e-17\npolygon 2887              16  3.50061e+05      5.23e-07\npolygon 2888 (hole)        6 -6.08264e-06     -9.08e-18\npolygon 2889 (hole)       13 -5.96071e-06     -8.90e-18\npolygon 2890 (hole)       23 -5.32578e-06     -7.95e-18\npolygon 2891 (hole)        4 -9.01200e-07     -1.35e-18\npolygon 2892 (hole)        3 -1.27697e-06     -1.91e-18\npolygon 2893 (hole)        3 -4.91375e-07     -7.34e-19\npolygon 2894 (hole)        4 -9.28230e-07     -1.39e-18\npolygon 2895 (hole)        7 -5.06681e-06     -7.57e-18\npolygon 2896 (hole)       10 -6.09722e-06     -9.10e-18\npolygon 2897 (hole)       11 -3.98095e-06     -5.94e-18\npolygon 2898 (hole)        3 -4.74198e-09     -7.08e-21\npolygon 2899 (hole)        6 -4.45010e-06     -6.64e-18\npolygon 2900 (hole)        4 -1.09328e-06     -1.63e-18\npolygon 2901 (hole)       28 -3.37389e-05     -5.04e-17\npolygon 2902 (hole)        5 -7.83002e-07     -1.17e-18\npolygon 2903 (hole)        4 -3.07809e-08     -4.60e-20\npolygon 2904 (hole)        7 -6.53156e-07     -9.75e-19\npolygon 2905 (hole)        4 -8.24580e-08     -1.23e-19\npolygon 2906 (hole)        4 -2.40591e-06     -3.59e-18\npolygon 2907 (hole)       15 -2.93651e-05     -4.38e-17\npolygon 2908 (hole)        7 -1.29803e-05     -1.94e-17\npolygon 2909 (hole)        7 -8.37636e-06     -1.25e-17\npolygon 2910 (hole)        3 -1.05752e-08     -1.58e-20\npolygon 2911 (hole)       16 -1.07268e-05     -1.60e-17\npolygon 2912 (hole)       11 -2.12302e-05     -3.17e-17\npolygon 2913 (hole)        3 -1.78834e+02     -2.67e-10\npolygon 2914 (hole)       13 -9.55329e-06     -1.43e-17\npolygon 2915 (hole)        6 -9.35033e-06     -1.40e-17\npolygon 2916 (hole)        5 -4.04103e-06     -6.03e-18\npolygon 2917 (hole)        4 -8.66743e-07     -1.29e-18\npolygon 2918 (hole)        3 -3.22713e-09     -4.82e-21\npolygon 2919 (hole)        3 -1.03567e-06     -1.55e-18\npolygon 2920 (hole)       21 -4.94601e-06     -7.39e-18\npolygon 2921 (hole)       10 -3.76192e-06     -5.62e-18\npolygon 2922 (hole)        6 -5.31745e-07     -7.94e-19\npolygon 2923 (hole)       15 -1.09628e-05     -1.64e-17\npolygon 2924 (hole)        4 -8.57688e-07     -1.28e-18\npolygon 2925 (hole)        8 -2.06106e-06     -3.08e-18\npolygon 2926 (hole)        4 -8.67878e-07     -1.30e-18\npolygon 2927              14  2.11571e+05      3.16e-07\npolygon 2928 (hole)       14 -4.17234e-06     -6.23e-18\npolygon 2929 (hole)        3 -5.14394e-07     -7.68e-19\npolygon 2930 (hole)        5 -5.21585e-07     -7.79e-19\npolygon 2931 (hole)       15 -4.29269e-06     -6.41e-18\npolygon 2932 (hole)        8 -1.40085e-06     -2.09e-18\npolygon 2933 (hole)       14 -2.07309e-06     -3.10e-18\npolygon 2934 (hole)       17 -2.28653e-06     -3.41e-18\npolygon 2935 (hole)       10 -4.38843e-06     -6.55e-18\npolygon 2936 (hole)        3 -1.41922e-06     -2.12e-18\npolygon 2937 (hole)       12 -3.12076e-06     -4.66e-18\npolygon 2938 (hole)        4 -8.63952e-08     -1.29e-19\npolygon 2939 (hole)        4 -4.11085e-08     -6.14e-20\npolygon 2940 (hole)       10 -8.55483e-06     -1.28e-17\npolygon 2941 (hole)        4 -9.60467e-07     -1.43e-18\npolygon 2942 (hole)       12 -3.98128e-06     -5.94e-18\npolygon 2943 (hole)        4 -3.02319e-06     -4.51e-18\npolygon 2944              11  1.59536e+05      2.38e-07\npolygon 2945             111  7.35028e+07      1.10e-04\npolygon 2946              54  9.35305e+06      1.40e-05\npolygon 2947              19  6.34649e+05      9.48e-07\npolygon 2948              10  3.74827e+04      5.60e-08\npolygon 2949              13  1.37100e+05      2.05e-07\npolygon 2950              31  4.47193e+06      6.68e-06\npolygon 2951              19  1.23742e+06      1.85e-06\npolygon 2952              20  1.79201e+06      2.68e-06\npolygon 2953              16  2.19464e+05      3.28e-07\npolygon 2954              11  7.94092e+04      1.19e-07\npolygon 2955              14  1.45779e+05      2.18e-07\npolygon 2956              31  6.24672e+05      9.33e-07\npolygon 2957              11  2.29288e+04      3.42e-08\npolygon 2958              18  2.10998e+05      3.15e-07\npolygon 2959              26  2.52571e+06      3.77e-06\npolygon 2960              16  5.77783e+05      8.63e-07\npolygon 2961              26  8.87985e+05      1.33e-06\npolygon 2962              13  1.10557e+05      1.65e-07\npolygon 2963              21  9.55338e+05      1.43e-06\npolygon 2964              32  2.18189e+06      3.26e-06\npolygon 2965              18  7.64830e+05      1.14e-06\npolygon 2966              34  1.71336e+06      2.56e-06\npolygon 2967             115  9.29594e+05      1.39e-06\npolygon 2968              68  2.06761e+05      3.09e-07\npolygon 2969              40  4.87851e+06      7.28e-06\npolygon 2970              10  7.43137e+04      1.11e-07\npolygon 2971              17  5.95020e+05      8.88e-07\npolygon 2972              21  4.02132e+05      6.00e-07\npolygon 2973              21  1.09635e+06      1.64e-06\npolygon 2974              14  1.15356e+05      1.72e-07\npolygon 2975              20  3.13610e+05      4.68e-07\npolygon 2976             275  3.92648e+08      5.86e-04\npolygon 2977              16  2.19612e+05      3.28e-07\npolygon 2978              13  2.64858e+05      3.95e-07\npolygon 2979              23  1.25549e+06      1.87e-06\npolygon 2980               9  1.79312e+05      2.68e-07\npolygon 2981              15  2.93132e+05      4.38e-07\npolygon 2982              15  5.29892e+05      7.91e-07\npolygon 2983              23  4.95351e+05      7.40e-07\npolygon 2984              14  4.41976e+05      6.60e-07\npolygon 2985              19  3.32318e+05      4.96e-07\npolygon 2986              16  4.15914e+05      6.21e-07\npolygon 2987              22  5.10526e+05      7.62e-07\npolygon 2988              48  1.87148e+07      2.79e-05\npolygon 2989              18  1.62882e+06      2.43e-06\npolygon 2990              71  2.43615e+07      3.64e-05\npolygon 2991             116  5.16444e+07      7.71e-05\npolygon 2992              19  1.54144e+06      2.30e-06\npolygon 2993              11  2.01013e+05      3.00e-07\npolygon 2994              20  2.31201e+06      3.45e-06\npolygon 2995              15  5.94674e+05      8.88e-07\npolygon 2996             218  1.56252e+08      2.33e-04\npolygon 2997             162  8.80247e+07      1.31e-04\npolygon 2998              16  3.69968e+05      5.52e-07\npolygon 2999              14  1.61451e+05      2.41e-07\npolygon 3000              18  5.54566e+05      8.28e-07\npolygon 3001              19  5.07078e+05      7.57e-07\npolygon 3002              57  6.86475e+06      1.03e-05\npolygon 3003              15  6.56018e+05      9.80e-07\npolygon 3004              21  6.65092e+05      9.93e-07\npolygon 3005              15  5.97784e+05      8.93e-07\npolygon 3006              37  2.56010e+06      3.82e-06\npolygon 3007              13  1.66996e+05      2.49e-07\npolygon 3008              20  8.18381e+05      1.22e-06\npolygon 3009              21  2.89704e+06      4.33e-06\npolygon 3010              15  4.08213e+05      6.10e-07\npolygon 3011             104  4.71547e+07      7.04e-05\npolygon 3012              28  3.80443e+06      5.68e-06\npolygon 3013              67  3.17343e+07      4.74e-05\npolygon 3014             730  9.20735e+08      1.37e-03\npolygon 3015              16  2.01576e+05      3.01e-07\npolygon 3016              12  1.41506e+05      2.11e-07\npolygon 3017              15  4.92125e+05      7.35e-07\npolygon 3018              18  1.58128e+06      2.36e-06\npolygon 3019              25  1.94322e+06      2.90e-06\npolygon 3020              12  2.51373e+05      3.75e-07\npolygon 3021             412  4.47936e+08      6.69e-04\npolygon 3022              22  7.57105e+05      1.13e-06\npolygon 3023              16  6.97434e+05      1.04e-06\npolygon 3024              39  4.45130e+06      6.65e-06\npolygon 3025              13  8.83786e+05      1.32e-06\npolygon 3026              10  2.06200e+05      3.08e-07\npolygon 3027              76  3.60497e+07      5.38e-05\npolygon 3028              13  4.56433e+05      6.82e-07\npolygon 3029              28  2.30613e+06      3.44e-06\npolygon 3030              27  2.50338e+06      3.74e-06\npolygon 3031              14  4.69238e+05      7.01e-07\npolygon 3032              10  1.69886e+05      2.54e-07\npolygon 3033              16  5.42822e+05      8.11e-07\npolygon 3034              10  1.17633e+05      1.76e-07\npolygon 3035               8  7.08579e+04      1.06e-07\npolygon 3036             144  7.85300e+07      1.17e-04\npolygon 3037              37  1.93477e+06      2.89e-06\npolygon 3038              25  5.59996e+05      8.36e-07\npolygon 3039              44  2.86031e+06      4.27e-06\npolygon 3040              26  1.26276e+06      1.89e-06\npolygon 3041             149  1.37840e+08      2.06e-04\npolygon 3042              18  4.84958e+05      7.24e-07\npolygon 3043              73  2.93195e+07      4.38e-05\npolygon 3044              45  6.87481e+06      1.03e-05\npolygon 3045              64  1.80880e+07      2.70e-05\npolygon 3046              12  8.76879e+05      1.31e-06\npolygon 3047              26  2.78381e+06      4.16e-06\npolygon 3048              35  8.72326e+06      1.30e-05\npolygon 3049              53  1.06237e+07      1.59e-05\npolygon 3050              26  5.40467e+06      8.07e-06\npolygon 3051             148  1.05037e+08      1.57e-04\npolygon 3052              21  8.32798e+05      1.24e-06\npolygon 3053              21  2.23023e+06      3.33e-06\npolygon 3054               8  6.30805e+05      9.42e-07\npolygon 3055              78  3.67603e+07      5.49e-05\npolygon 3056              18  1.64745e+06      2.46e-06\npolygon 3057              58  1.31747e+07      1.97e-05\npolygon 3058              94  1.16837e+07      1.74e-05\npolygon 3059              53  3.17801e+06      4.75e-06\npolygon 3060             137  8.46454e+06      1.26e-05\npolygon 3061              23  4.36507e+05      6.52e-07\npolygon 3062              27  9.72136e+05      1.45e-06\npolygon 3063 (hole)        5 -7.00763e-07     -1.05e-18\npolygon 3064 (hole)        8 -3.52860e-06     -5.27e-18\npolygon 3065              55  1.98854e+06      2.97e-06\npolygon 3066 (hole)        3 -2.04762e-08     -3.06e-20\npolygon 3067 (hole)        4 -6.13894e-07     -9.17e-19\npolygon 3068 (hole)        4 -2.39436e-07     -3.58e-19\npolygon 3069 (hole)       10 -2.80823e-06     -4.19e-18\npolygon 3070 (hole)        3 -7.19460e-09     -1.07e-20\npolygon 3071 (hole)        4 -1.10286e-06     -1.65e-18\npolygon 3072 (hole)        6 -1.93232e-06     -2.89e-18\npolygon 3073 (hole)        4 -1.46798e-07     -2.19e-19\npolygon 3074 (hole)       10 -7.07158e-06     -1.06e-17\npolygon 3075 (hole)        6 -2.20372e-07     -3.29e-19\npolygon 3076 (hole)        4 -2.88487e-07     -4.31e-19\npolygon 3077 (hole)        4 -1.75003e-07     -2.61e-19\npolygon 3078 (hole)        6 -7.13334e-07     -1.07e-18\npolygon 3079 (hole)        4 -1.22582e-06     -1.83e-18\npolygon 3080 (hole)        3 -2.17510e-08     -3.25e-20\npolygon 3081 (hole)        4 -9.25393e-07     -1.38e-18\npolygon 3082 (hole)        7 -1.62217e-06     -2.42e-18\npolygon 3083 (hole)        4 -3.05872e-07     -4.57e-19\npolygon 3084 (hole)        4 -2.78483e-07     -4.16e-19\npolygon 3085 (hole)       10 -4.42907e-06     -6.61e-18\npolygon 3086 (hole)        4 -1.73147e-06     -2.59e-18\npolygon 3087 (hole)        5 -1.26707e-06     -1.89e-18\npolygon 3088 (hole)        6 -1.04486e-06     -1.56e-18\npolygon 3089 (hole)       10 -1.02127e-06     -1.52e-18\npolygon 3090 (hole)       10 -4.75980e-06     -7.11e-18\npolygon 3091 (hole)        3 -5.18256e-08     -7.74e-20\npolygon 3092 (hole)        4 -4.52721e-07     -6.76e-19\npolygon 3093 (hole)       14 -6.59378e-06     -9.85e-18\npolygon 3094 (hole)        4 -1.90018e-07     -2.84e-19\npolygon 3095 (hole)        3 -2.15566e-08     -3.22e-20\npolygon 3096 (hole)        5 -7.90507e-07     -1.18e-18\npolygon 3097 (hole)        4 -9.81894e-08     -1.47e-19\npolygon 3098 (hole)        3 -1.62733e-08     -2.43e-20\npolygon 3099 (hole)        4 -3.64370e-07     -5.44e-19\npolygon 3100 (hole)        4 -2.24802e-07     -3.36e-19\npolygon 3101 (hole)        8 -2.34948e-06     -3.51e-18\npolygon 3102 (hole)        4 -6.98334e-08     -1.04e-19\npolygon 3103 (hole)        5 -5.36729e-07     -8.01e-19\npolygon 3104 (hole)        3 -7.57743e-08     -1.13e-19\npolygon 3105 (hole)        4 -1.25414e-07     -1.87e-19\npolygon 3106 (hole)        7 -1.04558e-06     -1.56e-18\npolygon 3107 (hole)       10 -2.48395e-06     -3.71e-18\npolygon 3108 (hole)        7 -7.37366e-07     -1.10e-18\npolygon 3109 (hole)        7 -3.14276e-07     -4.69e-19\npolygon 3110 (hole)       12 -7.14304e-06     -1.07e-17\npolygon 3111 (hole)        6 -5.26802e-07     -7.87e-19\npolygon 3112 (hole)       12 -4.30314e-06     -6.43e-18\npolygon 3113 (hole)        5 -5.75573e-07     -8.59e-19\npolygon 3114 (hole)        4 -2.63421e-07     -3.93e-19\npolygon 3115 (hole)        4 -1.12275e-07     -1.68e-19\npolygon 3116 (hole)        7 -6.08788e-07     -9.09e-19\npolygon 3117 (hole)        7 -6.12903e-06     -9.15e-18\npolygon 3118 (hole)        3 -2.30647e-08     -3.44e-20\npolygon 3119 (hole)        3 -6.63760e-09     -9.91e-21\npolygon 3120 (hole)        4 -2.85676e-07     -4.27e-19\npolygon 3121 (hole)        8 -3.03154e-06     -4.53e-18\npolygon 3122 (hole)        4 -1.35016e-07     -2.02e-19\npolygon 3123 (hole)        4 -8.96261e-09     -1.34e-20\npolygon 3124 (hole)        4 -3.38689e-07     -5.06e-19\npolygon 3125 (hole)        4 -6.23841e-07     -9.32e-19\npolygon 3126 (hole)        4 -1.86883e-07     -2.79e-19\npolygon 3127 (hole)        5 -4.25398e-07     -6.35e-19\npolygon 3128 (hole)        3 -1.19726e-07     -1.79e-19\npolygon 3129 (hole)        3 -3.16269e-08     -4.72e-20\npolygon 3130 (hole)       14 -1.35532e-05     -2.02e-17\npolygon 3131 (hole)        4 -2.43960e-07     -3.64e-19\npolygon 3132 (hole)        5 -7.25464e-08     -1.08e-19\npolygon 3133 (hole)        3 -2.88165e-08     -4.30e-20\npolygon 3134 (hole)        6 -3.50530e-06     -5.23e-18\npolygon 3135 (hole)        3 -2.48487e-09     -3.71e-21\npolygon 3136 (hole)        8 -1.63849e-06     -2.45e-18\npolygon 3137 (hole)        3 -3.55226e-08     -5.30e-20\npolygon 3138 (hole)        4 -1.34961e-07     -2.02e-19\npolygon 3139 (hole)        6 -1.48117e-06     -2.21e-18\npolygon 3140 (hole)        4 -1.85605e-06     -2.77e-18\npolygon 3141 (hole)        5 -7.05883e-07     -1.05e-18\npolygon 3142 (hole)        6 -9.15044e-07     -1.37e-18\npolygon 3143 (hole)        4 -7.20366e-07     -1.08e-18\npolygon 3144 (hole)        6 -1.69196e-06     -2.53e-18\npolygon 3145              48  1.02651e+07      1.53e-05\npolygon 3146 (hole)       12 -5.63666e-06     -8.42e-18\npolygon 3147 (hole)        3 -6.55798e-07     -9.79e-19\npolygon 3148 (hole)        4 -7.53000e-07     -1.12e-18\npolygon 3149 (hole)        3 -4.80262e-07     -7.17e-19\npolygon 3150 (hole)        4 -1.40559e-06     -2.10e-18\npolygon 3151 (hole)        4 -3.54028e-06     -5.29e-18\npolygon 3152 (hole)        3 -1.96889e-09     -2.94e-21\npolygon 3153 (hole)       20 -1.44585e-05     -2.16e-17\npolygon 3154 (hole)        5 -4.25973e-07     -6.36e-19\npolygon 3155 (hole)       39 -1.89578e-05     -2.83e-17\npolygon 3156 (hole)        6 -7.08690e-07     -1.06e-18\npolygon 3157 (hole)        3 -5.33030e-08     -7.96e-20\npolygon 3158 (hole)        3 -4.27398e-08     -6.38e-20\npolygon 3159 (hole)        6 -1.19415e-06     -1.78e-18\npolygon 3160 (hole)        5 -1.19455e-07     -1.78e-19\npolygon 3161 (hole)        4 -7.81733e-08     -1.17e-19\npolygon 3162 (hole)        8 -1.14379e-06     -1.71e-18\npolygon 3163 (hole)        3 -2.13254e-08     -3.18e-20\npolygon 3164 (hole)        7 -1.60059e-07     -2.39e-19\npolygon 3165 (hole)        3 -1.12670e-09     -1.68e-21\npolygon 3166 (hole)        3 -6.90646e-09     -1.03e-20\npolygon 3167 (hole)        3 -7.88862e-08     -1.18e-19\npolygon 3168 (hole)        3 -3.58374e-09     -5.35e-21\npolygon 3169 (hole)        3 -1.15918e-08     -1.73e-20\npolygon 3170 (hole)        3 -5.52933e-11     -8.26e-23\npolygon 3171 (hole)        3 -3.48620e-09     -5.21e-21\npolygon 3172 (hole)        4 -5.44548e-07     -8.13e-19\npolygon 3173 (hole)        4 -6.02637e-08     -9.00e-20\npolygon 3174 (hole)        3 -1.18351e-08     -1.77e-20\npolygon 3175 (hole)        4 -6.91302e-08     -1.03e-19\npolygon 3176 (hole)        4 -4.55722e-07     -6.80e-19\npolygon 3177 (hole)        4 -7.91420e-07     -1.18e-18\npolygon 3178 (hole)        4 -1.33268e-06     -1.99e-18\npolygon 3179              15  3.16153e+05      4.72e-07\npolygon 3180              22  8.93201e+05      1.33e-06\npolygon 3181              18  2.91538e+05      4.35e-07\npolygon 3182              59  3.70736e+06      5.54e-06\npolygon 3183              11  1.55205e+05      2.32e-07\npolygon 3184              14  1.87401e+05      2.80e-07\npolygon 3185              11  6.54128e+04      9.77e-08\npolygon 3186              11  8.64659e+04      1.29e-07\npolygon 3187              12  2.25129e+05      3.36e-07\npolygon 3188              30  2.72178e+06      4.06e-06\npolygon 3189 (hole)        3 -2.26252e+00     -3.38e-12\npolygon 3190             180  1.80314e+07      2.69e-05\npolygon 3191              14  4.01942e+05      6.00e-07\npolygon 3192             103  1.33467e+07      1.99e-05\npolygon 3193              14  2.07708e+05      3.10e-07\npolygon 3194              55  4.38623e+06      6.55e-06\npolygon 3195              41  4.69733e+06      7.01e-06\npolygon 3196              74  3.92633e+06      5.86e-06\npolygon 3197              31  2.79477e+06      4.17e-06\npolygon 3198              17  8.74607e+05      1.31e-06\npolygon 3199              26  4.50962e+05      6.73e-07\npolygon 3200              18  1.15065e+06      1.72e-06\npolygon 3201             164  1.48037e+07      2.21e-05\npolygon 3202              12  3.17290e+05      4.74e-07\npolygon 3203              69  2.59551e+07      3.88e-05\npolygon 3204              37  7.85963e+05      1.17e-06\npolygon 3205              14  3.37873e+05      5.05e-07\npolygon 3206              12  1.77980e+05      2.66e-07\npolygon 3207              21  6.46195e+05      9.65e-07\npolygon 3208              24  2.69998e+06      4.03e-06\npolygon 3209              30  1.00675e+06      1.50e-06\npolygon 3210              57  4.22747e+06      6.31e-06\npolygon 3211              23  8.63543e+05      1.29e-06\npolygon 3212              11  2.01925e+05      3.02e-07\npolygon 3213              95  2.88232e+07      4.30e-05\npolygon 3214             452  9.64208e+07      1.44e-04\npolygon 3215              77  1.72297e+07      2.57e-05\npolygon 3216              16  3.33522e+05      4.98e-07\npolygon 3217              19  6.82895e+05      1.02e-06\npolygon 3218              43  3.95062e+06      5.90e-06\npolygon 3219              29  1.00709e+06      1.50e-06\npolygon 3220              21  8.90014e+05      1.33e-06\npolygon 3221              22  7.93453e+05      1.18e-06\npolygon 3222              13  4.52813e+05      6.76e-07\npolygon 3223              30  1.49817e+06      2.24e-06\npolygon 3224              48  4.23996e+06      6.33e-06\npolygon 3225              37  1.20290e+06      1.80e-06\npolygon 3226              19  4.85805e+05      7.25e-07\npolygon 3227              46  2.18001e+06      3.26e-06\npolygon 3228               7  1.33723e+05      2.00e-07\npolygon 3229              54  1.82059e+07      2.72e-05\npolygon 3230              10  8.57866e+05      1.28e-06\npolygon 3231              14  1.98445e+05      2.96e-07\npolygon 3232              19  4.68357e+05      6.99e-07\npolygon 3233              52  8.57765e+06      1.28e-05\npolygon 3234              73  7.91998e+06      1.18e-05\npolygon 3235              23  8.19561e+06      1.22e-05\npolygon 3236              10  1.06594e+05      1.59e-07\npolygon 3237             169  1.39462e+07      2.08e-05\npolygon 3238              17  2.55915e+05      3.82e-07\npolygon 3239              12  1.81516e+05      2.71e-07\npolygon 3240              16  3.68509e+05      5.50e-07\npolygon 3241              12  1.24954e+05      1.87e-07\npolygon 3242            1012  4.61886e+08      6.90e-04\npolygon 3243              15  5.42647e+05      8.10e-07\npolygon 3244              12  5.53088e+05      8.26e-07\npolygon 3245              24  1.06455e+06      1.59e-06\npolygon 3246              14  3.17038e+05      4.73e-07\npolygon 3247              17  1.25559e+06      1.87e-06\npolygon 3248              16  1.92407e+06      2.87e-06\npolygon 3249              80  1.86306e+07      2.78e-05\npolygon 3250              11  6.83880e+04      1.02e-07\npolygon 3251             166  4.21470e+07      6.29e-05\npolygon 3252              22  1.36174e+06      2.03e-06\npolygon 3253              31  6.07363e+05      9.07e-07\npolygon 3254              10  1.27067e+05      1.90e-07\npolygon 3255             164  5.02951e+07      7.51e-05\npolygon 3256              17  1.20798e+06      1.80e-06\npolygon 3257              59  2.41720e+06      3.61e-06\npolygon 3258              12  2.52952e+05      3.78e-07\npolygon 3259              14  2.44407e+05      3.65e-07\npolygon 3260              43  4.89177e+06      7.30e-06\npolygon 3261              40  3.86642e+06      5.77e-06\npolygon 3262              23  4.59203e+05      6.86e-07\npolygon 3263              14  1.79442e+05      2.68e-07\npolygon 3264              13  1.61191e+05      2.41e-07\npolygon 3265              43  1.33365e+06      1.99e-06\npolygon 3266              75  1.20247e+07      1.80e-05\npolygon 3267              17  9.96466e+04      1.49e-07\npolygon 3268              22  1.60660e+06      2.40e-06\npolygon 3269             730  1.16983e+08      1.75e-04\npolygon 3270             129  7.87539e+06      1.18e-05\npolygon 3271              22  4.66256e+05      6.96e-07\npolygon 3272              19  5.44519e+05      8.13e-07\npolygon 3273              16  3.73911e+05      5.58e-07\npolygon 3274              88  3.47678e+07      5.19e-05\npolygon 3275              46  3.23711e+06      4.83e-06\npolygon 3276              47  9.17482e+05      1.37e-06\npolygon 3277              14  4.44869e+05      6.64e-07\npolygon 3278              43  1.29527e+06      1.93e-06\npolygon 3279              65  3.20974e+06      4.79e-06\npolygon 3280             306  1.83695e+07      2.74e-05\npolygon 3281              17  4.25486e+05      6.35e-07\npolygon 3282              29  1.08467e+06      1.62e-06\npolygon 3283              26  1.16602e+06      1.74e-06\npolygon 3284             135  4.90655e+06      7.33e-06\npolygon 3285              23  1.87723e+06      2.80e-06\npolygon 3286              21  7.02338e+05      1.05e-06\npolygon 3287              30  4.99970e+06      7.47e-06\npolygon 3288              21  7.71571e+05      1.15e-06\npolygon 3289              13  1.47832e+05      2.21e-07\npolygon 3290              26  3.17307e+06      4.74e-06\npolygon 3291              17  1.03642e+06      1.55e-06\npolygon 3292             100  8.74537e+06      1.31e-05\npolygon 3293              11  1.13950e+05      1.70e-07\npolygon 3294              26  8.27840e+05      1.24e-06\npolygon 3295              17  4.10882e+05      6.14e-07\npolygon 3296              13  1.49250e+05      2.23e-07\npolygon 3297              35  1.76408e+06      2.63e-06\npolygon 3298              15  2.03390e+05      3.04e-07\npolygon 3299              18  1.70982e+05      2.55e-07\npolygon 3300              32  7.98599e+06      1.19e-05\npolygon 3301              27  3.20839e+05      4.79e-07\npolygon 3302             539  1.17139e+08      1.75e-04\npolygon 3303              51  1.57614e+06      2.35e-06\npolygon 3304              19  3.60772e+05      5.39e-07\npolygon 3305              58  2.10060e+06      3.14e-06\npolygon 3306              13  1.70224e+05      2.54e-07\npolygon 3307              11  6.11736e+05      9.13e-07\npolygon 3308              35  5.26152e+06      7.86e-06\npolygon 3309              16  1.99371e+05      2.98e-07\npolygon 3310              14  4.48979e+05      6.70e-07\npolygon 3311              25  1.92913e+06      2.88e-06\npolygon 3312              16  4.26157e+05      6.36e-07\npolygon 3313              46  1.88229e+06      2.81e-06\npolygon 3314              17  2.29456e+05      3.43e-07\npolygon 3315              36  4.01418e+06      5.99e-06\npolygon 3316              57  1.77153e+07      2.65e-05\npolygon 3317              20  5.72298e+05      8.55e-07\npolygon 3318              14  2.46782e+05      3.68e-07\npolygon 3319              29  1.01300e+06      1.51e-06\npolygon 3320              90  8.54955e+06      1.28e-05\npolygon 3321              21  3.99098e+05      5.96e-07\npolygon 3322              12  2.81650e+05      4.21e-07\npolygon 3323              52  3.19337e+06      4.77e-06\npolygon 3324              13  3.40300e+05      5.08e-07\npolygon 3325              29  9.08533e+05      1.36e-06\npolygon 3326              20  3.07393e+05      4.59e-07\npolygon 3327              19  1.15906e+06      1.73e-06\npolygon 3328              17  1.16182e+06      1.73e-06\npolygon 3329              21  2.60877e+06      3.90e-06\npolygon 3330              15  1.09001e+05      1.63e-07\npolygon 3331              37  1.31921e+06      1.97e-06\npolygon 3332              53  1.46854e+06      2.19e-06\npolygon 3333              59  8.92822e+06      1.33e-05\npolygon 3334               9  7.44981e+04      1.11e-07\npolygon 3335              14  2.41462e+05      3.61e-07\npolygon 3336              96  7.25940e+06      1.08e-05\npolygon 3337              11  1.06055e+05      1.58e-07\npolygon 3338              49  1.87834e+06      2.80e-06\npolygon 3339              23  6.08310e+05      9.08e-07\npolygon 3340              50  6.76488e+05      1.01e-06\npolygon 3341              22  4.83089e+05      7.21e-07\npolygon 3342              17  1.17278e+05      1.75e-07\npolygon 3343              13  8.98786e+05      1.34e-06\npolygon 3344              43  1.01757e+06      1.52e-06\npolygon 3345              52  1.68377e+06      2.51e-06\npolygon 3346             348  2.50314e+08      3.74e-04\npolygon 3347              43  1.29120e+06      1.93e-06\npolygon 3348              71  2.02836e+06      3.03e-06\npolygon 3349 (hole)        4 -4.12791e+00     -6.16e-12\npolygon 3350             141  4.53240e+06      6.77e-06\npolygon 3351              52  3.62008e+06      5.41e-06\npolygon 3352              20  7.69539e+05      1.15e-06\npolygon 3353              88  8.88904e+06      1.33e-05\npolygon 3354              12  1.44668e+05      2.16e-07\npolygon 3355              46  2.28026e+06      3.40e-06\npolygon 3356              39  4.79165e+06      7.15e-06\npolygon 3357              53  2.86736e+06      4.28e-06\npolygon 3358              38  3.22508e+06      4.82e-06\npolygon 3359              18  4.44863e+05      6.64e-07\npolygon 3360              45  1.45134e+06      2.17e-06\npolygon 3361              86  2.56400e+07      3.83e-05\npolygon 3362             158  1.74510e+07      2.61e-05\npolygon 3363              14  2.50383e+05      3.74e-07\npolygon 3364             120  7.17019e+06      1.07e-05\npolygon 3365             146  2.28448e+07      3.41e-05\npolygon 3366             143  2.34472e+07      3.50e-05\npolygon 3367              20  3.47415e+05      5.19e-07\npolygon 3368              84  3.86387e+06      5.77e-06\npolygon 3369              68  1.10850e+07      1.66e-05\npolygon 3370             863  7.47702e+07      1.12e-04\npolygon 3371              53  7.54742e+06      1.13e-05\npolygon 3372              64  2.11016e+06      3.15e-06\npolygon 3373             103  1.47525e+07      2.20e-05\npolygon 3374              26  3.40345e+06      5.08e-06\npolygon 3375             103  8.40445e+06      1.25e-05\npolygon 3376              23  4.92041e+05      7.35e-07\npolygon 3377              27  5.53625e+05      8.27e-07\npolygon 3378              60  3.56102e+06      5.32e-06\npolygon 3379             151  1.51314e+07      2.26e-05\npolygon 3380             708  4.18129e+08      6.24e-04\npolygon 3381             120  1.32857e+07      1.98e-05\npolygon 3382             856  2.53898e+08      3.79e-04\npolygon 3383              13  2.47298e+05      3.69e-07\npolygon 3384              16  7.35754e+05      1.10e-06\npolygon 3385              21  5.31633e+05      7.94e-07\npolygon 3386              72  1.03185e+07      1.54e-05\npolygon 3387              38  1.34734e+06      2.01e-06\npolygon 3388               8  4.09489e+05      6.11e-07\npolygon 3389              17  2.46995e+05      3.69e-07\npolygon 3390              14  1.42285e+05      2.12e-07\npolygon 3391               9  1.56346e+05      2.33e-07\npolygon 3392              42  5.49581e+05      8.21e-07\npolygon 3393              59  1.15813e+06      1.73e-06\npolygon 3394              12  1.16845e+05      1.74e-07\npolygon 3395              11  6.00122e+04      8.96e-08\npolygon 3396              14  1.63465e+05      2.44e-07\npolygon 3397               8  4.73674e+04      7.07e-08\npolygon 3398              23  6.69330e+05      9.99e-07\npolygon 3399             144  6.48346e+06      9.68e-06\npolygon 3400              74  4.79923e+06      7.17e-06\npolygon 3401             116  1.02706e+07      1.53e-05\npolygon 3402              16  2.74005e+05      4.09e-07\npolygon 3403              97  4.72599e+06      7.06e-06\npolygon 3404              18  6.15583e+05      9.19e-07\npolygon 3405             146  1.38979e+07      2.08e-05\npolygon 3406              32  1.94516e+06      2.90e-06\npolygon 3407              26  9.81356e+05      1.47e-06\npolygon 3408              82  4.39797e+06      6.57e-06\npolygon 3409              33  9.36113e+05      1.40e-06\npolygon 3410              47  1.51844e+06      2.27e-06\npolygon 3411             196  2.32689e+07      3.47e-05\npolygon 3412              53  1.30069e+06      1.94e-06\npolygon 3413              70  1.00802e+07      1.51e-05\npolygon 3414              10  5.33870e+05      7.97e-07\npolygon 3415             211  2.73026e+07      4.08e-05\npolygon 3416              41  1.44141e+06      2.15e-06\npolygon 3417               9  5.20220e+05      7.77e-07\npolygon 3418             316  6.66808e+07      9.96e-05\npolygon 3419              17  7.48505e+05      1.12e-06\npolygon 3420              15  1.49799e+05      2.24e-07\npolygon 3421              24  4.99500e+05      7.46e-07\npolygon 3422              12  2.24463e+05      3.35e-07\npolygon 3423             100  1.06028e+07      1.58e-05\npolygon 3424              11  1.24267e+05      1.86e-07\npolygon 3425             143  1.89581e+07      2.83e-05\npolygon 3426              60  7.07802e+06      1.06e-05\npolygon 3427             124  1.23476e+07      1.84e-05\npolygon 3428              34  5.67625e+06      8.48e-06\npolygon 3429             797  1.86955e+08      2.79e-04\npolygon 3430              15  7.15891e+05      1.07e-06\npolygon 3431              20  1.61624e+06      2.41e-06\npolygon 3432              13  1.73955e+05      2.60e-07\npolygon 3433              60  2.42590e+06      3.62e-06\npolygon 3434              20  3.86365e+05      5.77e-07\npolygon 3435             213  3.69421e+07      5.52e-05\npolygon 3436              15  4.55574e+05      6.80e-07\npolygon 3437              35  1.56058e+06      2.33e-06\npolygon 3438              32  1.42419e+06      2.13e-06\npolygon 3439              68  2.30711e+06      3.44e-06\npolygon 3440             240  5.93935e+07      8.87e-05\npolygon 3441             145  1.58875e+07      2.37e-05\npolygon 3442              39  3.67239e+06      5.48e-06\npolygon 3443              54  3.84847e+06      5.75e-06\npolygon 3444              32  1.14073e+06      1.70e-06\npolygon 3445              18  3.58549e+05      5.35e-07\npolygon 3446              25  8.06470e+05      1.20e-06\npolygon 3447              15  2.67818e+05      4.00e-07\npolygon 3448              26  1.43681e+06      2.15e-06\npolygon 3449              18  3.10061e+05      4.63e-07\npolygon 3450              18  4.71644e+05      7.04e-07\npolygon 3451              16  5.04146e+05      7.53e-07\npolygon 3452              72  7.33720e+06      1.10e-05\npolygon 3453              27  1.37772e+06      2.06e-06\npolygon 3454              15  3.17217e+05      4.74e-07\npolygon 3455              37  1.17498e+06      1.75e-06\npolygon 3456              21  7.05388e+05      1.05e-06\npolygon 3457             216  2.05399e+07      3.07e-05\npolygon 3458              16  2.40093e+05      3.59e-07\npolygon 3459              29  1.71282e+06      2.56e-06\npolygon 3460              30  1.28695e+06      1.92e-06\npolygon 3461              36  2.29670e+06      3.43e-06\npolygon 3462             129  1.97698e+07      2.95e-05\npolygon 3463              65  2.65969e+06      3.97e-06\npolygon 3464             283  3.30575e+07      4.94e-05\npolygon 3465              28  7.06271e+05      1.05e-06\npolygon 3466              28  5.50158e+05      8.21e-07\npolygon 3467              49  2.25015e+06      3.36e-06\npolygon 3468              26  1.24280e+06      1.86e-06\npolygon 3469              28  9.02794e+05      1.35e-06\npolygon 3470              18  4.84064e+05      7.23e-07\npolygon 3471              47  2.33442e+06      3.49e-06\npolygon 3472              17  2.23835e+05      3.34e-07\npolygon 3473              34  7.32504e+05      1.09e-06\npolygon 3474              41  7.15538e+05      1.07e-06\npolygon 3475              21  5.81687e+05      8.69e-07\npolygon 3476              63  3.83819e+06      5.73e-06\npolygon 3477              27  1.33192e+06      1.99e-06\npolygon 3478              46  2.95028e+06      4.41e-06\npolygon 3479              10  1.34210e+05      2.00e-07\npolygon 3480              16  2.38274e+05      3.56e-07\npolygon 3481              18  4.18536e+05      6.25e-07\npolygon 3482              46  1.26584e+06      1.89e-06\npolygon 3483              14  2.14679e+05      3.21e-07\npolygon 3484              76  3.63371e+06      5.43e-06\npolygon 3485             339  4.44685e+07      6.64e-05\npolygon 3486             109  6.29786e+06      9.40e-06\npolygon 3487              14  2.89570e+05      4.32e-07\npolygon 3488              37  9.07704e+05      1.36e-06\npolygon 3489              68  3.86104e+06      5.77e-06\npolygon 3490             183  1.45458e+07      2.17e-05\npolygon 3491              44  1.64355e+06      2.45e-06\npolygon 3492              26  1.21667e+06      1.82e-06\npolygon 3493              13  1.95710e+05      2.92e-07\npolygon 3494              38  1.44402e+06      2.16e-06\npolygon 3495              14  3.29394e+05      4.92e-07\npolygon 3496              14  1.79828e+05      2.69e-07\npolygon 3497              44  2.11118e+06      3.15e-06\npolygon 3498             643  1.79215e+08      2.68e-04\npolygon 3499              24  1.10979e+06      1.66e-06\npolygon 3500              30  1.57106e+06      2.35e-06\npolygon 3501              46  3.61716e+06      5.40e-06\npolygon 3502              93  7.56340e+05      1.13e-06\npolygon 3503              57  3.07732e+06      4.59e-06\npolygon 3504              18  2.16224e+05      3.23e-07\npolygon 3505              17  5.12388e+05      7.65e-07\npolygon 3506               9  7.44780e+04      1.11e-07\npolygon 3507              57  8.09122e+06      1.21e-05\npolygon 3508              16  4.01323e+05      5.99e-07\npolygon 3509             118  2.90304e+07      4.33e-05\npolygon 3510              22  4.44693e+05      6.64e-07\npolygon 3511              43  2.28763e+06      3.42e-06\npolygon 3512              27  1.15444e+06      1.72e-06\npolygon 3513              25  1.21695e+06      1.82e-06\npolygon 3514              53  4.49228e+06      6.71e-06\npolygon 3515 (hole)        5 -1.32594e-07     -1.98e-19\npolygon 3516 (hole)        8 -1.14003e-01     -1.70e-13\npolygon 3517 (hole)        4 -2.95787e-06     -4.42e-18\npolygon 3518 (hole)        4 -5.05161e-02     -7.54e-14\npolygon 3519 (hole)        6 -1.43572e-06     -2.14e-18\npolygon 3520 (hole)       16 -6.18752e-06     -9.24e-18\npolygon 3521 (hole)        4 -5.13774e-07     -7.67e-19\npolygon 3522 (hole)        4 -9.76021e-08     -1.46e-19\npolygon 3523 (hole)       25 -9.13265e-06     -1.36e-17\npolygon 3524 (hole)       14 -8.08260e-06     -1.21e-17\npolygon 3525 (hole)        4 -2.00100e-08     -2.99e-20\npolygon 3526 (hole)       12 -9.59384e-06     -1.43e-17\npolygon 3527 (hole)        8 -6.52012e-06     -9.74e-18\npolygon 3528 (hole)        4 -1.41510e-06     -2.11e-18\npolygon 3529 (hole)        9 -1.86239e-07     -2.78e-19\npolygon 3530 (hole)        6 -1.66292e-06     -2.48e-18\npolygon 3531 (hole)       17 -1.08446e-05     -1.62e-17\npolygon 3532 (hole)       10 -1.35870e-05     -2.03e-17\npolygon 3533 (hole)       42 -3.06814e-05     -4.58e-17\npolygon 3534 (hole)        4 -2.90869e-06     -4.34e-18\npolygon 3535 (hole)       10 -5.73486e-06     -8.56e-18\npolygon 3536 (hole)       10 -1.70481e-06     -2.55e-18\npolygon 3537 (hole)        4 -6.12218e-07     -9.14e-19\npolygon 3538 (hole)       14 -4.81318e-06     -7.19e-18\npolygon 3539 (hole)        4 -6.22776e-07     -9.30e-19\npolygon 3540 (hole)        4 -2.60334e-07     -3.89e-19\npolygon 3541 (hole)       12 -1.65832e-05     -2.48e-17\npolygon 3542 (hole)        8 -1.25761e-05     -1.88e-17\npolygon 3543 (hole)        6 -6.42552e-02     -9.59e-14\npolygon 3544 (hole)        4 -5.15531e-03     -7.70e-15\npolygon 3545 (hole)        6 -4.64838e-06     -6.94e-18\npolygon 3546 (hole)        3 -7.03476e-08     -1.05e-19\npolygon 3547 (hole)        4 -1.88745e-02     -2.82e-14\npolygon 3548 (hole)        6 -1.94353e-06     -2.90e-18\npolygon 3549 (hole)       16 -1.56064e-05     -2.33e-17\npolygon 3550 (hole)        8 -2.24831e-06     -3.36e-18\npolygon 3551 (hole)        4 -8.57161e-07     -1.28e-18\npolygon 3552 (hole)        5 -3.71984e-07     -5.55e-19\npolygon 3553              79  1.47390e+07      2.20e-05\npolygon 3554           37623  6.60254e+11      9.86e-01\npolygon 3555 (hole)        8 -3.42133e-06     -5.11e-18\nenclosing rectangle: [-210008.6, 724647.6] x [1072026.3, 3158467.1] units\n                     (934700 x 2086000 units)\nWindow area = 6.69714e+11 square units\nFraction of frame area: 0.343\n\n\nWe can now perform spatial-temporal KDE (STKDE).\n\nst_kde &lt;- spattemp.density(acled_mya_quarters_ppp)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 42825.93 (spatial)\n  lambda = 0.0051 (temporal)\n\nNo. of observations\n  53551 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 15]\n\nEvaluation\n  128 x 128 x 15 trivariate lattice\n  Density range: [9.794759e-26, 2.083818e-10]\n\n\nAfter performing STKDE, we are able to plot the quarterly STKDE objects between 2021 and September 2024. The full set of plots can be found in Annex A, but the plot for Q1 2021 (id 15) is of particular interest.\n\ni = 15\nplot(st_kde, quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste(\"Spatial-temporal KDE for\", quarters[i]))"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.6-high-conflict-areas-of-interest",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.6-high-conflict-areas-of-interest",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.6 High Conflict Areas of Interest",
    "text": "TH1.6 High Conflict Areas of Interest\nThe preliminary KDE plot identified large clusters of armed conflict in the Yangon area in the south off the Andaman sea, as well as the Saigaing and Chin areas to the central-west. These indications make good candidates for further investigation.\nAdditionally, we will be exploring the Rakhine state area bordering Bangladesh, and the Kra Isthmus, the narrow isthmus linking central Thailand to Peninsula Malaysia. Rakhine state is the epicentre of the Rohingya crisis facing the eponymous Muslim ethnic group, which has actually been facing discrimination since the late 1970s\n\nTH1.6.1 Fixed-bandwidth KDE\n\n\nTH1.6.2 Adaptive-bandwidth KDE\n\n\nTH1.6.3 Nearest neighbour analysis\n\n\nTH1.6.4 Second order spatial point patterns analysis\n\nTH1.6.4.1 F-function\n\n\nTH1.6.4.2 G-function\n\n\nTH1.6.4.3 K-function\n\n\nTH1.6.4.4 L-function"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.7-rakhine-state",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.7-rakhine-state",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.7 Rakhine State",
    "text": "TH1.7 Rakhine State\n\nTH1.7.1 Fixed-bandwidth KDE\n\n\nTH1.7.2 Adaptive-bandwidth KDE\n\n\nTH1.7.3 Nearest neighbour analysis\n\n\nTH1.7.4 Second order spatial point patterns analysis\n\nTH1.7.4.1 F-function\n\n\nTH1.7.4.2 G-function\n\n\nTH1.7.4.3 K-function\n\n\nTH1.7.4.4 L-function"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.6-first-order-stppa-spatio-temporal-kde",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.6-first-order-stppa-spatio-temporal-kde",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.6 First Order STPPA: Spatio-temporal KDE",
    "text": "TH1.6 First Order STPPA: Spatio-temporal KDE"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.7-first-order-sppa-nearest-neighbour-analysis",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.7-first-order-sppa-nearest-neighbour-analysis",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.7 First-order SPPA: Nearest Neighbour Analysis",
    "text": "TH1.7 First-order SPPA: Nearest Neighbour Analysis\nTo determine whether the plotted armed conflict events are clustered, dispersed or random, we can use the Clark-Evans test. Since tensions between Myanmar’s different ethnic groups already existed before the 2021 coup, it would be a good idea to run the test on the subsets of data both before and after the coup."
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.7-second-order-sppa",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.7-second-order-sppa",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.7 Second-order SPPA",
    "text": "TH1.7 Second-order SPPA\nSecond order SPPA deals with variations in observations due to the way they interact with one another. The methods used for second order SPPA are the F-, G-, K- and L-functions. In this section, we will perform second-order SPPA on the conflict dataset, applying the F-, G-, K- and L-functions on subsets of the data before and after the 2021 coup.\n\nTH1.7.1 F-function\n\n\nTH1.7.2 G-function\n\n\nTH1.7.3 K-function\n\n\nTH1.7.4 L-function"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#annex-b-all-quarterly-fixed-bandwidth-kde-plots",
    "href": "TakeHome/TakeHome1/take-home-1.html#annex-b-all-quarterly-fixed-bandwidth-kde-plots",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "Annex B: All quarterly fixed-bandwidth KDE plots",
    "text": "Annex B: All quarterly fixed-bandwidth KDE plots"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#annex-c-all-quarterly-adaptive-bandwidth-kde-plots",
    "href": "TakeHome/TakeHome1/take-home-1.html#annex-c-all-quarterly-adaptive-bandwidth-kde-plots",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "Annex C: All quarterly adaptive-bandwidth KDE plots",
    "text": "Annex C: All quarterly adaptive-bandwidth KDE plots"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#annex-a-full-quarterly-stkde-plots-for-jan-2021--sep-2024",
    "href": "TakeHome/TakeHome1/take-home-1.html#annex-a-full-quarterly-stkde-plots-for-jan-2021--sep-2024",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "Annex A: Full Quarterly STKDE Plots for Jan 2021- Sep 2024",
    "text": "Annex A: Full Quarterly STKDE Plots for Jan 2021- Sep 2024\n\nA1: Full STKDE Plots\n\nfor (i in 1: length(quarter_numbers)) {\n  plot(st_kde, quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste(\"Spatial-temporal KDE for\", quarters[i]))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nA2: For events with civilian targeting only\n\nfor (i in 1: length(quarter_numbers)) {\n  plot(st_kde_againstCivilians, quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste(\"Spatial-temporal KDE for violence against civilians events in quarter\", quarters[i]))\n}"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.5-preliminary-analysis",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.5-preliminary-analysis",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.5 Preliminary analysis",
    "text": "TH1.5 Preliminary analysis\n\nTH1.5.1 Exploratory Data Analysis (EDA)\nWe can quickly gain some meaningful insights from our dataset using basic EDA techniques. For instance, with the following code chunk, we can retrieve the total number of fatalities from the armed violence during the study period on a quarterly basis, and print its corresponding summary statistics.\n\nTH1.5.1.1 Getting yearly and quarterly distribution of fatalities and summary statistics\n\nacled_mya_fatalities_by_quarter &lt;- acled_mya_sf %&gt;%\n  group_by(Quarter_num) %&gt;%\n  summarise(`All fatalities` = sum(fatalities)) %&gt;%\n  ungroup()\n# acled_mya_fatalities_by_quarter\nsummary(acled_mya_fatalities_by_quarter)\n\n  Quarter_num   All fatalities          geometry \n Min.   : 1.0   Min.   : 803   MULTIPOINT   :15  \n 1st Qu.: 4.5   1st Qu.:3640   epsg:32647   : 0  \n Median : 8.0   Median :3955   +proj=utm ...: 0  \n Mean   : 8.0   Mean   :3935                     \n 3rd Qu.:11.5   3rd Qu.:4798                     \n Max.   :15.0   Max.   :5862                     \n\n\nOn average, we can establish that 3935 people die from the armed violence each quarter.\n\nacled_mya_fatalities_by_year &lt;- acled_mya_sf %&gt;%\n  group_by(year) %&gt;%\n  summarise(`All fatalities` = sum(fatalities)) %&gt;%\n  ungroup()\n\nggplot(acled_mya_fatalities_by_year, aes(x=year, y=`All fatalities`)) +\n  geom_bar(stat = \"identity\", fill = \"darkgreen\") +\n      labs(title = \"Fatalities by year in Myanmar\",\n         x = \"Year\",\n         y = \"All Fatalities\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n\nTH1.5.1.2 Plotting yearly and quarterly distribution of fatalities as a line chart\n\nggplot(acled_mya_fatalities_by_quarter, aes(x=Quarter_num, y=`All fatalities`)) +     \n  # geom_bar(stat = \"identity\", fill = \"red4\") +\n  geom_line(color = \"red4\") + geom_point() +\n    labs(title = \"Total Fatalities from the Armed Conflict in Myanmar by Quarter\", subtitle = \"1 = Q1 2021, 6 = Q2 2022, 11 = Q3 2023, 15 = Q3 2024\",\n         x = \"Quarter\",\n         y = \"All Fatalities\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\nThere were fewer deaths from armed conflict in the first three quarters of 2021 - at the very start of the conflict - than Q4 2021 onwards.\n\n\nTH1.5.1.3 Getting quarterly distribution of incidents involving civilian targeting\nUsing the same code structure, we can also plot the distribution of armed conflict events involving civilian targeting.\n\nacled_mya_civilianTargeting_by_quarter &lt;- acled_mya_sf %&gt;%\n  group_by(Quarter_num) %&gt;%\n  summarise(\n    Count = n(),\n    Civilians_targeted = sum(civilian_targeting == \"Civilian targeting\", na.rm = TRUE)\n  ) %&gt;%\n  mutate(Percentage_incidents_civilians_targeting = (Civilians_targeted / Count) * 100) %&gt;%\n  ungroup()\n# acled_mya_civilianTargeting_by_quarter\nsummary(acled_mya_civilianTargeting_by_quarter)\n\n  Quarter_num       Count      Civilians_targeted          geometry \n Min.   : 1.0   Min.   :2100   Min.   :354.0      MULTIPOINT   :15  \n 1st Qu.: 4.5   1st Qu.:3229   1st Qu.:641.5      epsg:32647   : 0  \n Median : 8.0   Median :3689   Median :697.0      +proj=utm ...: 0  \n Mean   : 8.0   Mean   :3577   Mean   :681.8                        \n 3rd Qu.:11.5   3rd Qu.:3999   3rd Qu.:758.0                        \n Max.   :15.0   Max.   :4727   Max.   :841.0                        \n Percentage_incidents_civilians_targeting\n Min.   : 9.581                          \n 1st Qu.:18.388                          \n Median :20.279                          \n Mean   :19.629                          \n 3rd Qu.:22.451                          \n Max.   :26.961                          \n\nggplot(acled_mya_civilianTargeting_by_quarter, aes(x=Quarter_num, y=Percentage_incidents_civilians_targeting)) +     \n  # geom_bar(stat = \"identity\", fill = \"red4\") +\n  geom_line(color = \"skyblue1\") + geom_point() +\n    labs(title = \"Percentage of Incidents involving civilian targeting in Myanmar by Quarter\", subtitle = \"1 = Q1 2021, 6 = Q2 2022, 11 = Q3 2023, 15 = Q3 2024\",\n         x = \"Quarter\",\n         y = \"% Incidents with civilian targeting\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\nThe percentage of violent conflict incidents targeting civilians trended upwards throughout the study duration. On average, 19.6% of all armed conflict incidents throughout the study period targeted civilians.\n\n\nTH1.5.1.4 Plotting proportion of fatalities by type of conflict\nWe can also plot the proportion of fatalities by the type of conflict. The ACLED classifies armed conflict events by mode and intensity of attack and by whether civilians are targeted. From the graph and pie chart below, the largest proportion of fatalities comes from battles, closely followed by explosions and remote violence. However, violence against civilians makes up a sizable 11.4% of fatalities over the study period.\n\nunique(acled_mya_sf$event_type)\n\n[1] \"Battles\"                    \"Explosions/Remote violence\"\n[3] \"Strategic developments\"     \"Protests\"                  \n[5] \"Violence against civilians\" \"Riots\"                     \n\n\n\nacled_mya_fatalities_by_event_type &lt;- acled_mya_sf %&gt;%\n  group_by(event_type) %&gt;%\n  summarise(`All fatalities` = sum(fatalities)) %&gt;%\n  ungroup()\nsummary(acled_mya_fatalities_by_event_type)\n\n  event_type        All fatalities             geometry\n Length:6           Min.   :  127.0   MULTIPOINT   :6  \n Class :character   1st Qu.:  288.8   epsg:32647   :0  \n Mode  :character   Median : 3556.0   +proj=utm ...:0  \n                    Mean   : 9838.2                    \n                    3rd Qu.:11037.5                    \n                    Max.   :39059.0                    \n\n\n\nggplot(acled_mya_fatalities_by_event_type, aes(x=event_type, y=`All fatalities`)) +\n  geom_bar(stat = \"identity\", fill = \"red4\") +\n      labs(title = \"Fatalities by event type in Myanmar\",\n         x = \"Event type\",\n         y = \"All Fatalities\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\ntotal_fatalities &lt;- sum(acled_mya_fatalities_by_event_type$`All fatalities`)\npercentages &lt;- 100 * acled_mya_fatalities_by_event_type$`All fatalities` / total_fatalities\n\n# Set plotting area size\npar(mar = c(1, 1, 2, 1))  # Adjust margins if needed\n\npie(acled_mya_fatalities_by_event_type$`All fatalities`, labels = paste0(round(percentages, 1), \"%\"), \n    col = rainbow(length(acled_mya_fatalities_by_event_type$event_type)), \n    main = \"Fatalities by event type in Myanmar\",\n    cex = 1  \n)\n    \nlegend(\"topright\", paste(acled_mya_fatalities_by_event_type$event_type, \":\", round(percentages, 1), \"%\"), fill = rainbow(length(acled_mya_fatalities_by_event_type$event_type)), cex = 0.7)\n\n\n\n\n\n\n\n\nWe can further narrow down the scope of this analysis by limiting our data to a certain year, and to events where the civilian_targeting column is filled. The year 2022 saw the highest fatality numbers across the entire study period, so we shall take a closer look.\n\nacled_mya_fatalities_by_event_type_2022 &lt;- acled_mya_sf %&gt;%\n  filter(year == \"2022\") %&gt;%\n  filter(civilian_targeting == \"Civilian targeting\") %&gt;%\n  group_by(event_type) %&gt;%\n  summarise(`All fatalities` = sum(fatalities)) %&gt;%\n  ungroup()\n\nggplot(acled_mya_fatalities_by_event_type_2022, aes(x=event_type, y=`All fatalities`)) +\n  geom_bar(stat = \"identity\", fill = \"red4\") +\n      labs(title = \"Fatalities by event type in 2022 with civilian_targeting filled\",\n         x = \"Quarter\",\n         y = \"All Fatalities\") +\n    theme_minimal()\n\n\n\n\n\n\n\n\n\n\nTH1.5.1.5 Mapping fatalities and violence against civilians\nFinally, we can plot choropleth maps displaying 2 crucial pieces of information: the locations with the greatest number of fatalities, and the locations where civilians are targeted in the violence the most in 2022. In the code chunks we will write to create the plots, we have to refer to the original tibble objects instead of the sf objects.\n\nacled_mya_fatalities_by_admin1_2022 &lt;- acled_mya %&gt;%\n  filter(year == 2022) %&gt;%\n  mutate(admin1 = case_when(\n      admin1 %in% c(\"Shan-North\", \"Shan-South\", \"Shan-East\") ~ \"Shan\",\n      admin1 %in% c(\"Bago-East\", \"Bago-West\") ~ \"Bago\",\n      TRUE ~ admin1\n    )) %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(`All_Fatalities` = sum(fatalities)) %&gt;%\n  ungroup()\ncombined &lt;- left_join(mmr_admin1, acled_mya_fatalities_by_admin1_2022, by = c(\"ST\" = \"admin1\"))\ntm_shape(combined) + \n  tm_fill(\"All_Fatalities\", n = 8, style = \"kmeans\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(title = \"admin1 by number of fatalities, 2022\", legend.outside = TRUE)\n\n\n\n\n\n\n\n\nThe above map shows Sagaing region as the location with the highest number of fatalities in 2022, followed by Magaway region.\n\n#|echo: false\ncombined\n\nSimple feature collection with 15 features and 7 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -210008.6 ymin: 1072026 xmax: 724647.6 ymax: 3158467\nProjected CRS: WGS 84 / UTM zone 47N\nFirst 10 features:\n   OBJECTID          ST ST_PCODE           ST_RG          ST_MMR PCode_V\n1         1  Ayeyarwady   MMR017          Region  ဧရာဝတီတိုင်းဒေသကြီး     9.4\n2         2        Bago   MMR111          Region    ပဲခူးတိုင်းဒေသကြီး     9.4\n3         4        Chin   MMR004           State       ချင်းပြည်နယ်     9.4\n4         5      Kachin   MMR001           State       ကချင်ပြည်နယ်     9.4\n5         6       Kayah   MMR002           State       ကယားပြည်နယ်     9.4\n6         7       Kayin   MMR003           State        ကရင်ပြည်နယ်     9.4\n7         8      Magway   MMR009          Region   မကွေးတိုင်းဒေသကြီး     9.4\n8         9    Mandalay   MMR010          Region မန္တလေးတိုင်းဒေသကြီး     9.4\n9        10         Mon   MMR011           State         မွန်ပြည်နယ်     9.4\n10       11 Nay Pyi Taw   MMR018 Union Territory        နေပြည်တော်     9.4\n   All_Fatalities                       geometry\n1              57 MULTIPOLYGON (((93411.72 17...\n2             364 MULTIPOLYGON (((203949.9 21...\n3            1158 MULTIPOLYGON (((-72918.03 2...\n4             756 MULTIPOLYGON (((362696.3 31...\n5            1008 MULTIPOLYGON (((309155.7 22...\n6            1021 MULTIPOLYGON (((373551.3 18...\n7            2488 MULTIPOLYGON (((-1717.607 2...\n8            1068 MULTIPOLYGON (((208184.3 26...\n9             711 MULTIPOLYGON (((364238.4 16...\n10             13 MULTIPOLYGON (((220155 2248...\n\n\n\nacled_mya_civiliansTargeted_by_admin1_2022 &lt;- acled_mya %&gt;%\n  filter(year == 2022) %&gt;%\n  mutate(admin1 = case_when(\n      admin1 %in% c(\"Shan-North\", \"Shan-South\", \"Shan-East\") ~ \"Shan\",\n      admin1 %in% c(\"Bago-East\", \"Bago-West\") ~ \"Bago\",\n      TRUE ~ admin1\n    )) %&gt;%\n  group_by(admin1) %&gt;%\n  summarise(\n    count = n(),\n    Civilians_targeted = sum(civilian_targeting == \"Civilian targeting\", na.rm = TRUE)\n  )%&gt;%\n  ungroup() %&gt;%\n  mutate(`%_with_Civilian_Targeting` = (`Civilians_targeted` / `count`) * 100)\n# acled_mya_civiliansTargeted_by_admin1_2022\ncombined &lt;- left_join(mmr_admin1, acled_mya_civiliansTargeted_by_admin1_2022, by = c(\"ST\" = \"admin1\"))\n# combined\ntm_shape(combined) + \n  tm_fill(\"%_with_Civilian_Targeting\", n = 8, style = \"kmeans\") + \n  tm_borders(alpha = 0.5) + \n  tm_layout(title = \"admin1 by % of incidents targeting civilians, 2022\", legend.outside = TRUE)\n\n\n\n\n\n\n\n\nThe above map shows that the highest proportion of armed conflicts in the westernmost Rakhine state and easternmost Shan state involves violence against civilians. This state is the epicentre of the 2017 Rohingya crisis facing the eponymous Muslim ethnic group, discrimination against whom, in fact, goes as far back as the 1970s (Albert & Maizland, 2020). In joint second are the regions of Bago and Yangon.\n\n\n\nTH1.5.2 Overarching Spatial-Temporal KDE\nNext, we can try spatial-temporal kernel density estimation (STKDE) on the entire study area and period. As always, we start by creating ppp objects out of our sf objects, and checking for duplicates.\n\nacled_mya_sf_quarters &lt;- acled_mya_sf %&gt;% select(Quarter_num)\nacled_mya_quarters_ppp &lt;- as.ppp(acled_mya_sf_quarters)\nacled_mya_quarters_ppp\n\nMarked planar point pattern: 53653 points\nmarks are numeric, of storage type  'double'\nwindow: rectangle = [-208804.4, 640934.5] x [1103500.1, 3042960.3] units\n\nany(duplicated(acled_mya_quarters_ppp))\n\n[1] TRUE\n\n\nSince there are duplicates, we need to handle them using jittering.\n\nacled_mya_quarters_ppp &lt;- rjitter(acled_mya_quarters_ppp, retry=TRUE, nsim=1, drop=TRUE)\nany(duplicated(acled_mya_quarters_ppp))\n\n[1] FALSE\n\n\nFinally, we join the owin object mapping the borders of Myanmar to the ppp object.\n\nacled_mya_quarters_ppp &lt;- acled_mya_quarters_ppp[mmr_admin1_owin]\nplot(acled_mya_quarters_ppp)\n\n\n\n\n\n\n\n\nWe can now perform spatial-temporal KDE (STKDE).\n\nst_kde &lt;- spattemp.density(acled_mya_quarters_ppp)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 42825.74 (spatial)\n  lambda = 0.0051 (temporal)\n\nNo. of observations\n  53571 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 15]\n\nEvaluation\n  128 x 128 x 15 trivariate lattice\n  Density range: [9.512004e-26, 2.087401e-10]\n\n\nAfter performing STKDE, we are able to plot the quarterly STKDE objects between January 2021 and September 2024. The full set of plots can be found in Annex A, but the plot for Q1 2021 (id 15) is of particular interest because of the larger than usual densities around the Sagaing and Chin areas, as well as near Yangon.\n\ni = 15\nplot(st_kde, quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste(\"Spatial-temporal KDE for\", quarters[i]))\n\n\n\n\n\n\n\n\n\n\nTH1.5.3 STKDE on Data Subset\nKnowing that a significant part of the armed violence in Myanmar is due to systemic discrimination on the part of the government or military, it would make sense to repeat the process and plot STKDEs on the subset of the data concerning violence against civilians. The full plots can also be found in Annex A.\n\n\n[1] \"Battles\"                    \"Explosions/Remote violence\"\n[3] \"Strategic developments\"     \"Protests\"                  \n[5] \"Violence against civilians\" \"Riots\"                     \n\n\n\nacled_sf_againstCivilians &lt;- acled_mya_sf %&gt;% filter(event_type == \"Violence against civilians\")\n# acled_sf_againstCivilians\nacled_sf_againstCivilians &lt;- acled_sf_againstCivilians %&gt;% select(Quarter_num)\n\n\nacled_mya_againstCivilians_ppp &lt;- as.ppp(acled_sf_againstCivilians)\nany(duplicated(acled_mya_againstCivilians_ppp))\n\n[1] TRUE\n\nacled_mya_againstCivilians_ppp &lt;- rjitter(acled_mya_againstCivilians_ppp, retry=TRUE, nsim=1, drop=TRUE)\nany(duplicated(acled_mya_againstCivilians_ppp))\n\n[1] FALSE\n\nacled_mya_againstCivilians_ppp &lt;- acled_mya_againstCivilians_ppp[mmr_admin1_owin]\nplot(acled_mya_againstCivilians_ppp)\n\n\n\n\n\n\n\n\n\nst_kde_againstCivilians &lt;- spattemp.density(acled_mya_quarters_ppp)\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\nsummary(st_kde_againstCivilians)\n\nSpatiotemporal Kernel Density Estimate\n\nBandwidths\n  h = 42825.74 (spatial)\n  lambda = 0.0051 (temporal)\n\nNo. of observations\n  53571 \n\nSpatial bound\n  Type: polygonal\n  2D enclosure: [-210008.6, 724647.6] x [1072026, 3158467]\n\nTemporal bound\n  [1, 15]\n\nEvaluation\n  128 x 128 x 15 trivariate lattice\n  Density range: [9.512004e-26, 2.087401e-10]\n\nplot(st_kde_againstCivilians, quarter_numbers[15], override.par=FALSE, fix.range=TRUE, main=paste(\"Spatial-temporal KDE for violence against civilians events in quarter\", quarters[i]))"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.6-zooming-in",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.6-zooming-in",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.6 Zooming in",
    "text": "TH1.6 Zooming in\nSTKDE on the entire country has not been able to yield satisfactory results thus far. Despite this, though, the preliminary KDE plot identified large clusters of armed conflict in the Yangon area in the south off the Andaman sea, as well as the Sagaing region and Chin state to the central-west. At the same time, from the chropleth maps, Yangon was shown as the area with the second highest degree of civilian targeting, while Sagaing had the most fatalities from the conflict.\nIt might be more effective to select a subset of regions and perform SPPA and STPPA by region. From our EDA and overarching STKDE, focusing on Sagaing, Shan, Rakhine, Chin and Yangon makes the most sense. Additionally, an analysis on the Tanintharyi region will cover the Kra Isthmus, the narrow isthmus linking central Thailand to Peninsula Malaysia, to study the scale of the part of the conflict that is geographically closest to the more stable and prosperous Malaysia and Singapore."
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.7-spatial-point-patterns-analysis",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.7-spatial-point-patterns-analysis",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.7 Spatial Point Patterns Analysis",
    "text": "TH1.7 Spatial Point Patterns Analysis\n\nTH1.7.1 Extracting and plotting study areas\nThe first step is to extract the study areas and create owin objects.\n\nstudy_names &lt;- c(\"Sagaing\", \"Shan\", \"Rakhine\", \"Chin\", \"Yangon\", \"Tanintharyi\")\nstudy_areas &lt;- list(\"Sagaing\" = (mmr_admin1 %&gt;% filter(ST == \"Sagaing\")),\n                    \"Shan\" = (mmr_admin1 %&gt;% filter(ST == \"Shan\")),\n                    \"Rakhine\" = (mmr_admin1 %&gt;% filter(ST == \"Rakhine\")),\n                    \"Chin\" = (mmr_admin1 %&gt;% filter(ST == \"Chin\")),\n                    \"Yangon\" = (mmr_admin1 %&gt;% filter(ST == \"Yangon\")),\n                    \"Tanintharyi\" = (mmr_admin1 %&gt;% filter(ST == \"Tanintharyi\"))\n)\npar(mfrow = c(1, 4))\nfor (study_name in study_names) {\n  print(paste(\"Study area:\", study_name))\n  plot(study_areas[[study_name]], main = study_name) \n}\n\n[1] \"Study area: Sagaing\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Shan\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Rakhine\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Chin\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Yangon\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Tanintharyi\"\n\n\n\n\n\n\n\n\nstudy_ppps &lt;- list()\npar(mfrow = c(1, 3))\nfor (study_name in study_names) {\n  print(paste(\"Creating ppp for\", study_name))\n  study_owin &lt;- as.owin(study_areas[[study_name]])\n  study_ppps[[study_name]] &lt;- rescale.ppp(acled_mya_quarters_ppp[study_owin], 1000, \"km\")\n  plot(study_ppps[[study_name]], main=paste(\"ppp for\", study_name))\n}\n\n[1] \"Creating ppp for Sagaing\"\n\n\n[1] \"Creating ppp for Shan\"\n\n\n[1] \"Creating ppp for Rakhine\"\n\n\n\n\n\n\n\n\n\n[1] \"Creating ppp for Chin\"\n\n\n[1] \"Creating ppp for Yangon\"\n\n\n[1] \"Creating ppp for Tanintharyi\"\n\n\n\n\n\n\n\n\n\n\n\nTH1.6.2 Fixed-bandwidth KDE\n\nfixed_bandwidth_kde_acled &lt;- list()\npar(mfrow = c(1, 3))\nfor (study_name in study_names) {\n  fixed_bandwidth_kde_acled[[study_name]] &lt;- density(study_ppps[[study_name]],\n               sigma=bw.scott,\n               edge=TRUE,\n               kernel=\"gaussian\"\n               )\n  plot(fixed_bandwidth_kde_acled[[study_name]], \n       main = paste(\"Fixed-bandwidth KDE for\", study_name))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTH1.6.3 Adaptive-bandwidth KDE\n\nadaptive_bandwidth_kde_acled &lt;- list()\npar(mfrow = c(1, 3))\nfor (study_name in study_names) {\n  adaptive_bandwidth_kde_acled[[study_name]] &lt;- adaptive.density(study_ppps[[study_name]],\n               method = \"kernel\"\n               )\n  plot(adaptive_bandwidth_kde_acled[[study_name]], \n       main = paste(\"Adaptive-bandwidth KDE for\", study_name))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFixed bandwidth KDE using bw.scott and the gaussian kernel returned a more meaningful result than adaptive bandwidth KDE.\nJust for completeness, we will now attempt to map the results of fixed-bandwidth KDE for Rakhine state by creating a RasterLayer.\n\nrakhine_kde &lt;- fixed_bandwidth_kde_acled[[\"Rakhine\"]]\ngridded &lt;- as(rakhine_kde, \"SpatialGridDataFrame\")\nspplot(gridded)\n\n\n\n\n\n\n\nraster &lt;- raster(rakhine_kde)\nprojection(raster) &lt;- CRS(\"+init=EPSG:32647\")\ntm_shape(raster) + tm_raster(\"layer\", palette = \"viridis\") + tm_layout(legend.position = c(\"left\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\n\nTH1.6.4 Spatial-temporal KDE\nWe can also plot spatial-temporal KDEs for each of our selected regions. The full plots can be found in Annex B.\n\nstkde_six_regions &lt;- list()\nfor (study_name in study_names) {\n  print(study_name)\n  stkde_six_regions[[study_name]] &lt;- spattemp.density(study_ppps[[study_name]])\n}\n\n[1] \"Sagaing\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Shan\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Rakhine\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Chin\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Yangon\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Tanintharyi\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n\n\nTH1.6.5 Nearest neighbour analysis\nFor each of the 6 regions we are analysing, we can use nearest neighbour analysis to find out whether the spatial point patterns of our armed conflict events exhibit clustering, dispersion or random distribution. The nearest neighbour analysis is done by performing the Clark-Evans test on the hypothesis that the distribution of armed conflict events is random.\n\nfor (study_name in study_names) {\n  print(study_name)\n  ppp &lt;- study_ppps[[study_name]]\n  # plot(ppp)\n  print(clarkevans.test(ppp, correction = \"none\", clipregion = NULL, alternative = c(\"two.sided\"), nsim = 99))\n}\n\n[1] \"Sagaing\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.16523, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n[1] \"Shan\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.16189, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n[1] \"Rakhine\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.21369, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n[1] \"Chin\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.17452, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n[1] \"Yangon\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.13365, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n[1] \"Tanintharyi\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.12985, p-value &lt; 2.2e-16\nalternative hypothesis: two-sided\n\n\n\n\nTH1.6.5 Second order spatial point patterns analysis\n\nTH1.6.5.1 F-function\n\n\nTH1.6.5.2 G-function\n\n\nTH1.6.5.3 K-function\n\n\nTH1.6.5.4 L-function"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#annex-b-region-specific-stkde-plots",
    "href": "TakeHome/TakeHome1/take-home-1.html#annex-b-region-specific-stkde-plots",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "Annex B: Region-specific STKDE plots",
    "text": "Annex B: Region-specific STKDE plots\n\nfor (study_name in study_names) {\n  for (i in 1: length(quarter_numbers)) {\n    print(study_name)\n    print(quarter_numbers[i])\n    plot(stkde_six_regions[[study_name]], quarter_numbers[i], override.par=FALSE, fix.range=TRUE, main=paste(\"STKDE for\", study_name , \"in quarter\", quarters[i]))\n  }\n}\n\n[1] \"Sagaing\"\n[1] 15\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 14\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 13\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 12\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 11\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 10\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 9\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 8\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 7\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 6\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 5\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 4\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 3\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 2\n\n\n\n\n\n\n\n\n\n[1] \"Sagaing\"\n[1] 1\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 15\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 14\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 13\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 12\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 11\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 10\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 9\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 8\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 7\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 6\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 5\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 4\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 3\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 2\n\n\n\n\n\n\n\n\n\n[1] \"Shan\"\n[1] 1\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 15\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 14\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 13\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 12\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 11\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 10\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 9\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 8\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 7\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 6\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 5\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 4\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 3\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 2\n\n\n\n\n\n\n\n\n\n[1] \"Rakhine\"\n[1] 1\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 15\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 14\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 13\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 12\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 11\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 10\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 9\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 8\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 7\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 6\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 5\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 4\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 3\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 2\n\n\n\n\n\n\n\n\n\n[1] \"Chin\"\n[1] 1\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 15\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 14\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 13\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 12\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 11\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 10\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 9\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 8\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 7\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 6\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 5\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 4\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 3\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 2\n\n\n\n\n\n\n\n\n\n[1] \"Yangon\"\n[1] 1\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 15\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 14\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 13\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 12\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 11\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 10\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 9\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 8\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 7\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 6\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 5\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 4\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 3\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 2\n\n\n\n\n\n\n\n\n\n[1] \"Tanintharyi\"\n[1] 1"
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.7-first-order-spatial-point-patterns-analysis",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.7-first-order-spatial-point-patterns-analysis",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.7 First-order Spatial Point Patterns Analysis",
    "text": "TH1.7 First-order Spatial Point Patterns Analysis\n\nTH1.7.1 Extracting and plotting study areas\nThe first step is to extract the study areas and create owin objects.\n\nstudy_names &lt;- c(\"Sagaing\", \"Shan\", \"Rakhine\", \"Chin\", \"Yangon\", \"Tanintharyi\")\nstudy_areas &lt;- list(\"Sagaing\" = (mmr_admin1 %&gt;% filter(ST == \"Sagaing\")),\n                    \"Shan\" = (mmr_admin1 %&gt;% filter(ST == \"Shan\")),\n                    \"Rakhine\" = (mmr_admin1 %&gt;% filter(ST == \"Rakhine\")),\n                    \"Chin\" = (mmr_admin1 %&gt;% filter(ST == \"Chin\")),\n                    \"Yangon\" = (mmr_admin1 %&gt;% filter(ST == \"Yangon\")),\n                    \"Tanintharyi\" = (mmr_admin1 %&gt;% filter(ST == \"Tanintharyi\"))\n)\npar(mfrow = c(1, 4))\nfor (study_name in study_names) {\n  print(paste(\"Study area:\", study_name))\n  plot(study_areas[[study_name]], main = study_name) \n}\n\n[1] \"Study area: Sagaing\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Shan\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Rakhine\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Chin\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Yangon\"\n\n\n\n\n\n\n\n\n\n[1] \"Study area: Tanintharyi\"\n\n\n\n\n\n\n\n\nstudy_ppps &lt;- list()\nstudy_ppps_original &lt;- list()\nstudy_owins &lt;- list()\npar(mfrow = c(1, 3))\nfor (study_name in study_names) {\n  print(paste(\"Creating ppp for\", study_name))\n  study_owin &lt;- as.owin(study_areas[[study_name]])\n  study_owins[[study_name]] &lt;- study_owin\n  study_ppps_original[[study_name]] &lt;- acled_mya_quarters_ppp[study_owin]\n  study_ppps[[study_name]] &lt;- rescale.ppp(acled_mya_quarters_ppp[study_owin], 1000, \"km\")\n  plot(study_ppps[[study_name]], main=paste(\"ppp for\", study_name))\n}\n\n[1] \"Creating ppp for Sagaing\"\n\n\n[1] \"Creating ppp for Shan\"\n\n\n[1] \"Creating ppp for Rakhine\"\n\n\n\n\n\n\n\n\n\n[1] \"Creating ppp for Chin\"\n\n\n[1] \"Creating ppp for Yangon\"\n\n\n[1] \"Creating ppp for Tanintharyi\"\n\n\n\n\n\n\n\n\n\n\n\nTH1.7.2 Fixed-bandwidth KDE\n\nfixed_bandwidth_kde_acled &lt;- list()\npar(mfrow = c(1, 3))\nfor (study_name in study_names) {\n  fixed_bandwidth_kde_acled[[study_name]] &lt;- density(study_ppps[[study_name]],\n               sigma=bw.scott,\n               edge=TRUE,\n               kernel=\"gaussian\"\n               )\n  plot(fixed_bandwidth_kde_acled[[study_name]], \n       main = paste(\"Fixed-bandwidth KDE for\", study_name))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nThe fixed-bandwidth KDE returned dense clusters at the following areas for each state or region:\n\nSagaing region: toward the south and southwest\nShan state: towards the northwest, with a secondary cluster towards the southwest\nRakhine state: one large cluster towards the northwest\nChin state: one cluster in the central-north and southeast\nYangon region: one dense cluster towards the south coast\nTanintharyi region: one dense cluster skirting the northwest coast\n\n\n\nTH1.7.3 Adaptive-bandwidth KDE\n\nadaptive_bandwidth_kde_acled &lt;- list()\npar(mfrow = c(1, 3))\nfor (study_name in study_names) {\n  adaptive_bandwidth_kde_acled[[study_name]] &lt;- adaptive.density(study_ppps[[study_name]],\n               method = \"kernel\"\n               )\n  plot(adaptive_bandwidth_kde_acled[[study_name]], \n       main = paste(\"Adaptive-bandwidth KDE for\", study_name))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nFixed bandwidth KDE using bw.scott and the gaussian kernel returned a more meaningful result than adaptive bandwidth KDE.\nThe bw.scott method applies Scott’s Rule for Bandwidth Selection for Kernel Density (Scott, 1992), which calculates a bandwidth \\(\\sigma\\) that is proportional to \\(n^{\\frac{-1}{d-4}}\\), for number of points \\(n\\) and number of spatial dimension \\(d\\). This rule is fast to compute and, as we’ve seen, was able to produce a larger bandwidth than the mean-square error criterion defined with the bw.diggle() method (Diggle, 1985)\nJust for completeness, we will now attempt to map the results of fixed-bandwidth KDE for Rakhine state by creating a RasterLayer.\n\nrakhine_kde &lt;- fixed_bandwidth_kde_acled[[\"Rakhine\"]]\ngridded &lt;- as(rakhine_kde, \"SpatialGridDataFrame\")\nspplot(gridded)\n\n\n\n\n\n\n\n\n\nraster &lt;- raster(rakhine_kde)\nraster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 2.158983, 3.656088  (x, y)\nextent     : -210.0086, 66.34123, 1921.825, 2389.805  (xmin, xmax, ymin, ymax)\ncrs        : NA \nsource     : memory\nnames      : layer \nvalues     : 0.0007077697, 0.3824713  (min, max)\n\nprojection(raster) &lt;- CRS(\"+init=EPSG:32647\")\nraster\n\nclass      : RasterLayer \ndimensions : 128, 128, 16384  (nrow, ncol, ncell)\nresolution : 2.158983, 3.656088  (x, y)\nextent     : -210.0086, 66.34123, 1921.825, 2389.805  (xmin, xmax, ymin, ymax)\ncrs        : +proj=utm +zone=47 +datum=WGS84 +units=m +no_defs \nsource     : memory\nnames      : layer \nvalues     : 0.0007077697, 0.3824713  (min, max)\n\n\n\ntm_shape(raster) + tm_raster(\"layer\", palette = \"viridis\") + tm_layout(legend.position = c(\"left\", \"bottom\"), frame = FALSE)\n\n\n\n\n\n\n\n\n\n\nTH1.7.4 Spatial-temporal KDE\nWe can also plot spatial-temporal KDEs for each of our selected regions. The full plots can be found in Annex B, but the results can be summarised as follows:\n\nIn Sagaing region, the bulk of the fighting took place in 2022 towards the south, before dying down thereafter.\nIn Shan state, fierce fighting took place towards the northwest at the start of the conflict in 2021 and gradually died down, surging again in 4Q 2023 and again in 3Q 2024.\nRakhine state saw little fighting from 2021 until 4Q 2023, when fighting intensified primarily towards the northwest, bordering Bangladesh.\nChin state witnessed the most fighting throughout the state in 1Q 2021.\nYangon saw brief periods of conflict in the first half of 2021, and\nTanintharyi region is largely spared, with small pockets towards its northwest.\n\n\nstkde_six_regions &lt;- list()\nfor (study_name in study_names) {\n  print(study_name)\n  stkde_six_regions[[study_name]] &lt;- spattemp.density(study_ppps[[study_name]])\n}\n\n[1] \"Sagaing\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Shan\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Rakhine\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Chin\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Yangon\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n[1] \"Tanintharyi\"\n\n\nCalculating trivariate smooth...Done.\nEdge-correcting...Done.\nConditioning on time...Done.\n\n\n\n\nTH1.7.5 Nearest neighbour analysis\nFor each of the 6 regions we are analysing, we can use nearest neighbour analysis to find out whether the spatial point patterns of our armed conflict events exhibit clustering, dispersion or random distribution. The nearest neighbour analysis is done by performing the Clark-Evans test on the hypothesis that the distribution of armed conflict events is random.\n\nfor (study_name in study_names) {\n  print(study_name)\n  ppp &lt;- study_ppps[[study_name]]\n  # plot(ppp)\n  print(clarkevans.test(ppp, correction = \"none\", clipregion = NULL, alternative = c(\"clustered\"), nsim = 99))\n}\n\n[1] \"Sagaing\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.1643, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"Shan\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.16241, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"Rakhine\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.21242, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"Chin\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.18396, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"Yangon\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.13382, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n[1] \"Tanintharyi\"\n\n    Clark-Evans test\n    No edge correction\n    Z-test\n\ndata:  ppp\nR = 0.13163, p-value &lt; 2.2e-16\nalternative hypothesis: clustered (R &lt; 1)\n\n\nThe nearest neighbour analyses for all our regions returned identical p-values of 2.2e-16. Thus, we can conclude that the spatial point patterns for all our target regions are clustered. We can corroborate this test result with the fixed-bandwidth KDE visualisations, which indicate the presence of densely-packed conflict areas."
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.8-second-order-spatial-point-patterns-analysis",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.8-second-order-spatial-point-patterns-analysis",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.8 Second order spatial point patterns analysis",
    "text": "TH1.8 Second order spatial point patterns analysis\nSecond order SPPA investigates variations in observations due to the way they interact with one another. In this section, we will use the F- and G-functions to analyse the spatial point patterns in our 6 selected regions.\nThe F-function (nearest neighbor distribution) and G-function (empty space function) are limited to analyzing specific distances or single-scale proximity between points. Ripley’s K-function overcomes this issue among others- it valuates the distribution of points over a range of distances, giving insight into spatial clustering or dispersion at different scales. This makes it a more comprehensive analysis of spatial point patterns at multiple spatial scales, at the exepense of it being more computationally complex. An attempt to run Ripley’s K-function on armed conflict data in Sagaing - both for the entire study period and just in 2022 - led to a half-hour long freeze, so it will be omitted.\n\nTH1.8.1 Extracting study period\nThe functions run slower when fed with more data. Hence, we need to extract a smaller study period. Since the year 2022 saw more fatalities, it makes sense to extract only the events that occurred in 2022.\n\nacled_mya_2022_sf &lt;- acled_mya_sf %&gt;% filter(Quarter_num &gt;= 5 & Quarter_num &lt; 7) %&gt;% select(Quarter_num)\nacled_mya_2022_ppp &lt;- as.ppp(acled_mya_2022_sf)\nacled_mya_2022_ppp &lt;- rjitter(acled_mya_2022_ppp, retry=TRUE, nsim=1, drop=TRUE)\nstudy_ppps_2022 &lt;- list()\nfor (study_name in study_names) {\n  print(paste(\"Creating ppp for\", study_name))\n  study_owin &lt;- study_owins[[study_name]]\n  study_ppps_2022[[study_name]] &lt;- acled_mya_2022_ppp[study_owin]\n}\n\n[1] \"Creating ppp for Sagaing\"\n[1] \"Creating ppp for Shan\"\n[1] \"Creating ppp for Rakhine\"\n[1] \"Creating ppp for Chin\"\n[1] \"Creating ppp for Yangon\"\n[1] \"Creating ppp for Tanintharyi\"\n\n\n\n\nTH1.8.1 Sagaing Region\n\nTH1.8.1.1 G-function\n\nstudy_name = \"Sagaing\"\nG_function &lt;- Gest(study_ppps_2022[[study_name]], correction = \"border\")\nplot(G_function, xlim=c(0,500), main = paste(\"G-function estimation for\", study_name))\n\n\n\n\n\n\n\nG_csr &lt;- envelope(ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(G_csr, main = paste(\"G function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\nTH1.8.1.2 F-function\n\nF_function &lt;- Fest(study_ppps_2022[[study_name]])\nplot(F_function, xlim=c(0,500), main = paste(\"F-function estimation for\", study_name))\n\n\n\n\n\n\n\n\nError in bestlegendpos(...) : All objects were empty\n\nF_csr &lt;- envelope(ppp, Fest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(F_csr, main = paste(\"F function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\n\nTH1.8.2 Shan State\n\nTH1.8.2.1 G-function\n\nstudy_name = \"Shan\"\nG_function &lt;- Gest(study_ppps_2022[[study_name]], correction = \"border\")\nplot(G_function, xlim=c(0,500), main = paste(\"G-function estimation for\", study_name))\n\n\n\n\n\n\n\nG_csr &lt;- envelope(ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(G_csr, main = paste(\"G function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\nTH1.8.2.2 F-function\n\nF_function &lt;- Fest(study_ppps_2022[[study_name]])\nplot(F_function, xlim=c(0,500), main = paste(\"F-function estimation for\", study_name))\n\n\n\n\n\n\n\n\nError in bestlegendpos(...) : All objects were empty\n\nF_csr &lt;- envelope(ppp, Fest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(F_csr, main = paste(\"F function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\n\nTH1.8.3 Rakhine State\n\nTH1.8.3.1 G-function\n\nstudy_name = \"Rakhine\"\nG_function &lt;- Gest(study_ppps_2022[[study_name]], correction = \"border\")\nplot(G_function, xlim=c(0,500), main = paste(\"G-function estimation for\", study_name))\n\n\n\n\n\n\n\nG_csr &lt;- envelope(ppp, Gest, nsim = 99, rank = 1, glocal=TRUE)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(G_csr, main = paste(\"G function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\nTH1.8.3.2 F-function\n\nF_function &lt;- Fest(study_ppps_2022[[study_name]])\nplot(F_function, xlim=c(0,500), main = paste(\"F-function estimation for\", study_name))\n\n\n\n\n\n\n\n\nError in bestlegendpos(...) : All objects were empty\n\nF_csr &lt;- envelope(ppp, Fest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(F_csr, main = paste(\"F function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\n\nTH1.8.4 Chin State\n\nTH1.8.4.1 G-function\n\nstudy_name = \"Chin\"\nG_function &lt;- Gest(study_ppps_2022[[study_name]], correction = \"border\")\nplot(G_function, xlim=c(0,500), main = paste(\"G-function estimation for\", study_name))\n\n\n\n\n\n\n\nG_csr &lt;- envelope(ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(G_csr, main = paste(\"G function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\nTH1.8.4.2 F-function\n\nF_function &lt;- Fest(study_ppps_2022[[study_name]])\nplot(F_function, xlim=c(0,500), main = paste(\"F-function estimation for\", study_name))\n\n\n\n\n\n\n\nF_csr &lt;- envelope(ppp, Fest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(F_csr, main = paste(\"F function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\n\nTH1.8.5 Yangon Region\n\nTH1.8.5.1 G-function\n\nstudy_name = \"Yangon\"\nG_function &lt;- Gest(study_ppps_2022[[study_name]], correction = \"border\")\nplot(G_function, xlim=c(0,500), main = paste(\"G-function estimation for\", study_name))\n\n\n\n\n\n\n\nG_csr &lt;- envelope(ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(G_csr, main = paste(\"G function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\nTH1.8.5.2 F-function\n\nF_function &lt;- Fest(study_ppps_2022[[study_name]])\nplot(F_function, xlim=c(0,500), main = paste(\"F-function estimation for\", study_name))\n\n\n\n\n\n\n\n\nError in bestlegendpos(...) : All objects were empty\n\nF_csr &lt;- envelope(ppp, Fest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(F_csr, main = paste(\"F function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\n\nTH1.8.6 Tanintharyi Region\n\nTH1.8.6.1 G-function\n\nstudy_name = \"Tanintharyi\"\nG_function &lt;- Gest(study_ppps_2022[[study_name]], correction = \"border\")\nplot(G_function, xlim=c(0,500), main = paste(\"G-function estimation for\", study_name))\n\n\n\n\n\n\n\nG_csr &lt;- envelope(ppp, Gest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(G_csr, main = paste(\"G function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\n\n\nTH1.8.6.2 F-function\n\nF_function &lt;- Fest(study_ppps_2022[[study_name]])\nplot(F_function, xlim=c(0,500), main = paste(\"F-function estimation for\", study_name))\n\n\n\n\n\n\n\nF_csr &lt;- envelope(ppp, Fest, nsim = 99)\n\nGenerating 99 simulations of CSR  ...\n1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,\n21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40,\n41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\n61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80,\n81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, \n99.\n\nDone.\n\nplot(F_csr, main = paste(\"F function test for spatial randomness for\", study_name))\n\n\n\n\n\n\n\n\nSince all F-functions lie entirely below the envelope, and all G-functions lie entirely above the envelope, we can conclude that the armed conflict areas exhibit clustering. This is backed up by the KDE plots, which show the presence of dense clusters."
  },
  {
    "objectID": "HandsOn/hands-on-6.html",
    "href": "HandsOn/hands-on-6.html",
    "title": "HX6: Spatial Autocorrelation",
    "section": "",
    "text": "In spatial policy, a development objective of local government and planners is to ensure equal distribution of development. The appropriate spatial statistical methods can be applied to discover if development is evenly distributed, and if not, to find out if and where there are signs of spatial clustering.\nToday, we return to Hunan province in the People’s Republic of China to examine the spatial distribution of GDP per capita. Just like the previous exercise, we will import the Hunan province administrative boundaries, and 2012 development indicators.\n\n\n\n\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\n\nhunan &lt;- st_read(dsn=\"data/geospatial\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nHere, we will left join the attribute fields of the Hunan dataframe with the geographical boundaries of Hunan province.\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.1-the-analytical-question",
    "href": "HandsOn/hands-on-6.html#hx6.1-the-analytical-question",
    "title": "HX6: Spatial Autocorrelation",
    "section": "",
    "text": "In spatial policy, a development objective of local government and planners is to ensure equal distribution of development. The appropriate spatial statistical methods can be applied to discover if development is evenly distributed, and if not, to find out if and where there are signs of spatial clustering.\nToday, we return to Hunan province in the People’s Republic of China to examine the spatial distribution of GDP per capita. Just like the previous exercise, we will import the Hunan province administrative boundaries, and 2012 development indicators.\n\n\n\n\n\n\npacman::p_load(sf, spdep, tmap, tidyverse)\n\n\n\n\n\nhunan &lt;- st_read(dsn=\"data/geospatial\", layer=\"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/HandsOn/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\n\n\nhunan2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\n\nHere, we will left join the attribute fields of the Hunan dataframe with the geographical boundaries of Hunan province.\n\nhunan &lt;- left_join(hunan, hunan2012) %&gt;% select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`"
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.3-basic-visualisation",
    "href": "HandsOn/hands-on-6.html#hx6.3-basic-visualisation",
    "title": "HX6: Spatial Autocorrelation",
    "section": "HX6.3 Basic visualisation",
    "text": "HX6.3 Basic visualisation\nBefore performing any analysis, it is a good practice to create some basic visualisations.\n\nequal &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"equal\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal interval classification\")\n\nquantile &lt;- tm_shape(hunan) +\n  tm_fill(\"GDPPC\",\n          n = 5,\n          style = \"quantile\") +\n  tm_borders(alpha = 0.5) +\n  tm_layout(main.title = \"Equal quantile classification\")\n\ntmap_arrange(equal, \n             quantile, \n             asp=1, \n             ncol=2)"
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.4-global-measures-of-spatial-autocorrelation",
    "href": "HandsOn/hands-on-6.html#hx6.4-global-measures-of-spatial-autocorrelation",
    "title": "HX6: Spatial Autocorrelation",
    "section": "HX6.4 Global Measures of Spatial Autocorrelation",
    "text": "HX6.4 Global Measures of Spatial Autocorrelation\nBefore computing any global spatial autocorrelation statistics, we first need to construct the spatial weights of the study area. These are used to define the neighbourhood relationships between the geographical units in the study area.\n\nHX6.4.1 Contiguity Spatial Weights\nIn the code chunk below, poly2nb() from the spdep pckage is used to compute contiguity weight matrices for the study area. Today, we will create a QUEEN contiguity weight matrix.\n\nwm_q &lt;- poly2nb(hunan, \n                queen=TRUE)\nsummary(wm_q)\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \nLink number distribution:\n\n 1  2  3  4  5  6  7  8  9 11 \n 2  2 12 16 24 14 11  4  2  1 \n2 least connected regions:\n30 65 with 1 link\n1 most connected region:\n85 with 11 links\n\n\n\n\nHX6.4.2 Creating Row-standardised Weights Matrix\nFollowing this, we need to assign weights to each neighbouring polygon. In our case, we will assign each neighbouring polygon an equal weight, by taking the inverse of the number of neighbours, using style=\"W\" for simplicity.\n\nMore options, such as style=\"B\", are available.\n\n\nrswm_q &lt;- nb2listw(wm_q, style=\"W\", zero.policy = TRUE)\nrswm_q\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 448 \nPercentage nonzero weights: 5.785124 \nAverage number of links: 5.090909 \n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1       S2\nW 88 7744 88 37.86334 365.9147"
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.5-morans-i",
    "href": "HandsOn/hands-on-6.html#hx6.5-morans-i",
    "title": "HX6: Spatial Autocorrelation",
    "section": "HX6.5 Moran’s I",
    "text": "HX6.5 Moran’s I\nMoran’s I describes how features differ from the values in the study area as a whole. Positive (I &gt; 0) values indicate clustering, with observations tending to be similar, while negative (I &lt; 0) values indicate dispersion, where observations tend to be dissimilar. When I is approximately 0, it indicates observations are randomly arranged in space. Moran’s I approaches 1 when similar values are clustered, and approaches -1 when dissimilar values tend to cluster.\nMoran’s I statistics testing can be conducted using moran.test() from the spdep package.\n\nmoran.test(hunan$GDPPC, \n           listw=rswm_q, \n           zero.policy = TRUE, \n           na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  hunan$GDPPC  \nweights: rswm_q    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n\nThe Moran’s I statistic is approximately 0.3007, which indicates a tendency for similar values to be clustered together in space. This means regions with high GDP per capita are likely to be near other similar regions, and vice-versa.\nFurthermore, the standard deviate is 4.74 and the p-value is 1.095e-06. We can reject the null hypothesis that there is no spatial autocorrelation, and since there is significant evidence of positive spatial autocorrelation, we accept this alternative hypothesis.\n\nHX6.5.1 Monte Carlo on Moran’s I\nWe can perform a Monte Carlo permutation test for the Moran’s I statistic using moran.mc() and visualise the results.\n\nset.seed(1234)\nbperm= moran.mc(hunan$GDPPC, \n                listw=rswm_q, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value = 0.001\nalternative hypothesis: greater\n\nsummary(bperm$res[1:999])\n\n    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. \n-0.18339 -0.06168 -0.02125 -0.01505  0.02611  0.27593 \n\nhist(bperm$res, \n     freq=TRUE, \n     breaks=20, \n     xlab=\"Simulated Moran's I\")\nabline(v=0, \n       col=\"red\") \n\n\n\n\n\n\n\n\nThe Moran’s I statistic is 0.30075. Since the p-value is 0.001, this shows that the result is statistically significant. Since we have a slightly left-skewed distribution of simulated values, this high level of clustering is unlikely to occur by chance."
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.6-gearys-c",
    "href": "HandsOn/hands-on-6.html#hx6.6-gearys-c",
    "title": "HX6: Spatial Autocorrelation",
    "section": "HX6.6 Geary’s C",
    "text": "HX6.6 Geary’s C\nGeary’s C describes how features differ from their immediate neighbours. When C &gt; 1, the points are dispersed, and while C &lt; 1, the points are clustered. A C value of 1 indicates observations are randomly arranged in space. Geary’s C approaches 0 when similar values are clustered, and approaches 3 when dissimilar values are clustered. Geary’s C is inversely proportional to Moran’s I, so higher Cs correspond to lower Is.\nGeary’s C testing can be performed by calling geary.test(), also from spdedp.\n\ngeary.test(hunan$GDPPC, listw=rswm_q)\n\n\n    Geary C test under randomisation\n\ndata:  hunan$GDPPC \nweights: rswm_q   \n\nGeary C statistic standard deviate = 3.6108, p-value = 0.0001526\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n        0.6907223         1.0000000         0.0073364 \n\n\nThe C statistic is 0.6907, which suggests positive spatial autocorrelation. With a very low p-value of 0.0001, we can reject the null hypothesis that there is no spatial autocorrelation.\n\nHX6.6.1 Monte Carlo on Geary’s C\nSimilar to Moran’s I, we can perform a Monte Carlo permutation test on Geary’s C and visualise the results.\n\nset.seed(1234)\nbperm=geary.mc(hunan$GDPPC, \n               listw=rswm_q, \n               nsim=999)\nbperm\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  hunan$GDPPC \nweights: rswm_q  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.69072, observed rank = 1, p-value = 0.001\nalternative hypothesis: greater\n\nsummary(bperm$res[1:999])\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.7142  0.9502  1.0052  1.0044  1.0595  1.2722 \n\nhist(bperm$res, freq=TRUE, breaks=20, xlab=\"Simulated Geary c\")\nabline(v=1, col=\"red\") \n\n\n\n\n\n\n\n\nThe distribution of the simulated values indicates a high tendancy towards C-values of 1 or greater, indicating a tendency towards no or negative spatial autocorrelation under random correlations."
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.7-spatial-correlograms",
    "href": "HandsOn/hands-on-6.html#hx6.7-spatial-correlograms",
    "title": "HX6: Spatial Autocorrelation",
    "section": "HX6.7 Spatial Correlograms",
    "text": "HX6.7 Spatial Correlograms\nSpatial correlograms help us examine patterns of spatial autocorrelation. We can create correlograms for both Moran’s I and Geary’s C.\n\nHX6.7.1 Moran’s I\n\nMI_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"I\", \n                          style=\"W\")\nplot(MI_corr)\n\n\n\n\n\n\n\nprint(MI_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Moran's I\n         estimate expectation   variance standard deviate Pr(I) two sided    \n1 (88)  0.3007500  -0.0114943  0.0043484           4.7351       2.189e-06 ***\n2 (88)  0.2060084  -0.0114943  0.0020962           4.7505       2.029e-06 ***\n3 (88)  0.0668273  -0.0114943  0.0014602           2.0496        0.040400 *  \n4 (88)  0.0299470  -0.0114943  0.0011717           1.2107        0.226015    \n5 (88) -0.1530471  -0.0114943  0.0012440          -4.0134       5.984e-05 ***\n6 (88) -0.1187070  -0.0114943  0.0016791          -2.6164        0.008886 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\n\n\n\nHX6.7.2 Geary’s C\n\nGC_corr &lt;- sp.correlogram(wm_q, \n                          hunan$GDPPC, \n                          order=6, \n                          method=\"C\", \n                          style=\"W\")\nplot(GC_corr)\n\n\n\n\n\n\n\nprint(GC_corr)\n\nSpatial correlogram for hunan$GDPPC \nmethod: Geary's C\n        estimate expectation  variance standard deviate Pr(I) two sided    \n1 (88) 0.6907223   1.0000000 0.0073364          -3.6108       0.0003052 ***\n2 (88) 0.7630197   1.0000000 0.0049126          -3.3811       0.0007220 ***\n3 (88) 0.9397299   1.0000000 0.0049005          -0.8610       0.3892612    \n4 (88) 1.0098462   1.0000000 0.0039631           0.1564       0.8757128    \n5 (88) 1.2008204   1.0000000 0.0035568           3.3673       0.0007592 ***\n6 (88) 1.0773386   1.0000000 0.0058042           1.0151       0.3100407    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1"
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.9-creating-a-lisa-cluster-map",
    "href": "HandsOn/hands-on-6.html#hx6.9-creating-a-lisa-cluster-map",
    "title": "HX6: Spatial Autocorrelation",
    "section": "HX6.9 Creating a LISA cluster map",
    "text": "HX6.9 Creating a LISA cluster map\nLISA cluster maps show significant locations colour-coded by type of spatial autocorrelation.\n\nHX6.9.1 Plotting Moran scatterplot\nBefore creating a LISA cluster map, we should first create a Moran scatterplot. This scatterplot illustrates the relationship between the values of our chosen attribute at each location and the average value of the same attribute at neighbouring locations. We can plot a Moran scatterplot for GDP per capita in 2012 using the moran.plot() from spdep.\n\nnci &lt;- moran.plot(hunan$GDPPC, rswm_q,\n                  labels=as.character(hunan$County), \n                  xlab=\"GDPPC 2012\", \n                  ylab=\"Spatially Lagged GDPPC 2012\")\n\n\n\n\n\n\n\n\nNotice that the plot is split in 4 quadrants. The top right corner corresponds to areas that have high GDP per capita and are surrounded by other areas that have the average level of GDP per capita (i.e. positive autocorrelation - clustering).\n\n\nHX6.9.2 Plotting Moran scatterplot with standardised variable\nWe can use scale() to center and scale our variable. Here centering is done by subtracting the mean (omitting NAs) the corresponding columns, and scaling is done by dividing the (centered) variable by their standard deviations.\n\nhunan$Z.GDPPC &lt;- scale(hunan$GDPPC) %&gt;% \n  as.vector \n# Ensures we get a vector that maps neatly into our dataframe\n\nnci2 &lt;- moran.plot(hunan$Z.GDPPC, rswm_q,\n                   labels=as.character(hunan$County),\n                   xlab=\"z-GDPPC 2012\", \n                   ylab=\"Spatially Lag z-GDPPC 2012\")\n\n\n\n\n\n\n\n\n\n\nHX6.9.3 Preparing LISA map classes\nThe code chunks below showcase the steps to prepare a LISA cluster map.\n\nquadrant &lt;- vector(mode=\"numeric\",length=nrow(localMI))\n\nNext, we derive the spatially lagged variable of interest (i.e. GDPPC) and centers the spatially lagged variable around its mean.\n\nhunan$lag_GDPPC &lt;- lag.listw(rswm_q, hunan$GDPPC)\nDV &lt;- hunan$lag_GDPPC - mean(hunan$lag_GDPPC)     \n\nThis is followed by centering the local Moran’s around the mean.\n\nLM_I &lt;- localMI[,1] - mean(localMI[,1])    \n\nNext, we set a statistical significance level for the local Moran.\n\nsignif &lt;- 0.05       \n\nThese four lines define the low-low (1), low-high (2), high-low (3) and high-high (4) categories.\n\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4      \n\nLastly, we place the non-significant Moran in the category 0.\n\nquadrant[localMI[,5]&gt;signif] &lt;- 0\n\n\n\nHX6.9.4 Plotting LISA map\nFinally, we can build our LISA map as below.\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\n\n\n\n\n\n\n\nFor a more effective interpretation, it is good practice to plot our basemap, local Moran’s I values map and p-value map side by side.\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nhunan.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\nLISAmap &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\n\ntmap_arrange(gdppc, LISAmap, \n             asp=1, ncol=2)"
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.8-local-measures-of-spatial-autocorrelation",
    "href": "HandsOn/hands-on-6.html#hx6.8-local-measures-of-spatial-autocorrelation",
    "title": "HX6: Spatial Autocorrelation",
    "section": "HX6.8 Local Measures of Spatial Autocorrelation",
    "text": "HX6.8 Local Measures of Spatial Autocorrelation\nLocal measures of spatial autocorrelation (LMSA) focuses on the relationships between each observation and its surroundings, unlike global measures of spatial autocorrelation where a single summary of these relationships is investigated across the map. In this sense, LMSA does not generate summary statistics, but rather, scores that allow us to learn more about the saptial structure in our data.\n\nHX6.8.0.1 Local Indicators of Spatial Association\nLocal indicators of spatial association (LISA) are statistics that evaluate the existence of clusters and/or outliers in the spatial arrangement of a given variable. If we are studying GDP per capita, for instance, local clusters in GDP per capita mean that there are areas that have higher or lower rates than is to be expected by chance alone; that is, the values occurring are above or below those of a random distribution in space.\n\n\nHX6.8.1 Computing Local Moran’s I\nThe Moran’s I statistic can be calculated locally, giving us li values given a set of zi values and a listw object providing neighbour weighting information for the polygon associated with the zi values.\nWe can compute and list the values of the derived Moran’s I matrix using the code chunk below.\n\nfips &lt;- order(hunan$County)\nlocalMI &lt;- localmoran(hunan$GDPPC, rswm_q)\nhead(localMI)\n\n            Ii          E.Ii       Var.Ii        Z.Ii Pr(z != E(Ii))\n1 -0.001468468 -2.815006e-05 4.723841e-04 -0.06626904      0.9471636\n2  0.025878173 -6.061953e-04 1.016664e-02  0.26266425      0.7928094\n3 -0.011987646 -5.366648e-03 1.133362e-01 -0.01966705      0.9843090\n4  0.001022468 -2.404783e-07 5.105969e-06  0.45259801      0.6508382\n5  0.014814881 -6.829362e-05 1.449949e-03  0.39085814      0.6959021\n6 -0.038793829 -3.860263e-04 6.475559e-03 -0.47728835      0.6331568\n\nprintCoefmat(data.frame(\n  localMI[fips,], \n  row.names=hunan$County[fips]),\n  check.names=FALSE)\n\n                       Ii        E.Ii      Var.Ii        Z.Ii Pr.z....E.Ii..\nAnhua         -2.2493e-02 -5.0048e-03  5.8235e-02 -7.2467e-02         0.9422\nAnren         -3.9932e-01 -7.0111e-03  7.0348e-02 -1.4791e+00         0.1391\nAnxiang       -1.4685e-03 -2.8150e-05  4.7238e-04 -6.6269e-02         0.9472\nBaojing        3.4737e-01 -5.0089e-03  8.3636e-02  1.2185e+00         0.2230\nChaling        2.0559e-02 -9.6812e-04  2.7711e-02  1.2932e-01         0.8971\nChangning     -2.9868e-05 -9.0010e-09  1.5105e-07 -7.6828e-02         0.9388\nChangsha       4.9022e+00 -2.1348e-01  2.3194e+00  3.3590e+00         0.0008\nChengbu        7.3725e-01 -1.0534e-02  2.2132e-01  1.5895e+00         0.1119\nChenxi         1.4544e-01 -2.8156e-03  4.7116e-02  6.8299e-01         0.4946\nCili           7.3176e-02 -1.6747e-03  4.7902e-02  3.4200e-01         0.7324\nDao            2.1420e-01 -2.0824e-03  4.4123e-02  1.0297e+00         0.3032\nDongan         1.5210e-01 -6.3485e-04  1.3471e-02  1.3159e+00         0.1882\nDongkou        5.2918e-01 -6.4461e-03  1.0748e-01  1.6338e+00         0.1023\nFenghuang      1.8013e-01 -6.2832e-03  1.3257e-01  5.1198e-01         0.6087\nGuidong       -5.9160e-01 -1.3086e-02  3.7003e-01 -9.5104e-01         0.3416\nGuiyang        1.8240e-01 -3.6908e-03  3.2610e-02  1.0305e+00         0.3028\nGuzhang        2.8466e-01 -8.5054e-03  1.4152e-01  7.7931e-01         0.4358\nHanshou        2.5878e-02 -6.0620e-04  1.0167e-02  2.6266e-01         0.7928\nHengdong       9.9964e-03 -4.9063e-04  6.7742e-03  1.2742e-01         0.8986\nHengnan        2.8064e-02 -3.2160e-04  3.7597e-03  4.6294e-01         0.6434\nHengshan      -5.8201e-03 -3.0437e-05  5.1076e-04 -2.5618e-01         0.7978\nHengyang       6.2997e-02 -1.3046e-03  2.1865e-02  4.3486e-01         0.6637\nHongjiang      1.8790e-01 -2.3019e-03  3.1725e-02  1.0678e+00         0.2856\nHuarong       -1.5389e-02 -1.8667e-03  8.1030e-02 -4.7503e-02         0.9621\nHuayuan        8.3772e-02 -8.5569e-04  2.4495e-02  5.4072e-01         0.5887\nHuitong        2.5997e-01 -5.2447e-03  1.1077e-01  7.9685e-01         0.4255\nJiahe         -1.2431e-01 -3.0550e-03  5.1111e-02 -5.3633e-01         0.5917\nJianghua       2.8651e-01 -3.8280e-03  8.0968e-02  1.0204e+00         0.3076\nJiangyong      2.4337e-01 -2.7082e-03  1.1746e-01  7.1800e-01         0.4728\nJingzhou       1.8270e-01 -8.5106e-04  2.4363e-02  1.1759e+00         0.2396\nJinshi        -1.1988e-02 -5.3666e-03  1.1334e-01 -1.9667e-02         0.9843\nJishou        -2.8680e-01 -2.6305e-03  4.4028e-02 -1.3543e+00         0.1756\nLanshan        6.3334e-02 -9.6365e-04  2.0441e-02  4.4972e-01         0.6529\nLeiyang        1.1581e-02 -1.4948e-04  2.5082e-03  2.3422e-01         0.8148\nLengshuijiang -1.7903e+00 -8.2129e-02  2.1598e+00 -1.1623e+00         0.2451\nLi             1.0225e-03 -2.4048e-07  5.1060e-06  4.5260e-01         0.6508\nLianyuan      -1.4672e-01 -1.8983e-03  1.9145e-02 -1.0467e+00         0.2952\nLiling         1.3774e+00 -1.5097e-02  4.2601e-01  2.1335e+00         0.0329\nLinli          1.4815e-02 -6.8294e-05  1.4499e-03  3.9086e-01         0.6959\nLinwu         -2.4621e-03 -9.0703e-06  1.9258e-04 -1.7676e-01         0.8597\nLinxiang       6.5904e-02 -2.9028e-03  2.5470e-01  1.3634e-01         0.8916\nLiuyang        3.3688e+00 -7.7502e-02  1.5180e+00  2.7972e+00         0.0052\nLonghui        8.0801e-01 -1.1377e-02  1.5538e-01  2.0787e+00         0.0376\nLongshan       7.5663e-01 -1.1100e-02  3.1449e-01  1.3690e+00         0.1710\nLuxi           1.8177e-01 -2.4855e-03  3.4249e-02  9.9561e-01         0.3194\nMayang         2.1852e-01 -5.8773e-03  9.8049e-02  7.1663e-01         0.4736\nMiluo          1.8704e+00 -1.6927e-02  2.7925e-01  3.5715e+00         0.0004\nNan           -9.5789e-03 -4.9497e-04  6.8341e-03 -1.0988e-01         0.9125\nNingxiang      1.5607e+00 -7.3878e-02  8.0012e-01  1.8274e+00         0.0676\nNingyuan       2.0910e-01 -7.0884e-03  8.2306e-02  7.5356e-01         0.4511\nPingjiang     -9.8964e-01 -2.6457e-03  5.6027e-02 -4.1698e+00         0.0000\nQidong         1.1806e-01 -2.1207e-03  2.4747e-02  7.6396e-01         0.4449\nQiyang         6.1966e-02 -7.3374e-04  8.5743e-03  6.7712e-01         0.4983\nRucheng       -3.6992e-01 -8.8999e-03  2.5272e-01 -7.1814e-01         0.4727\nSangzhi        2.5053e-01 -4.9470e-03  6.8000e-02  9.7972e-01         0.3272\nShaodong      -3.2659e-02 -3.6592e-05  5.0546e-04 -1.4510e+00         0.1468\nShaoshan       2.1223e+00 -5.0227e-02  1.3668e+00  1.8583e+00         0.0631\nShaoyang       5.9499e-01 -1.1253e-02  1.3012e-01  1.6807e+00         0.0928\nShimen        -3.8794e-02 -3.8603e-04  6.4756e-03 -4.7729e-01         0.6332\nShuangfeng     9.2835e-03 -2.2867e-03  3.1516e-02  6.5174e-02         0.9480\nShuangpai      8.0591e-02 -3.1366e-04  8.9838e-03  8.5358e-01         0.3933\nSuining        3.7585e-01 -3.5933e-03  4.1870e-02  1.8544e+00         0.0637\nTaojiang      -2.5394e-01 -1.2395e-03  1.4477e-02 -2.1002e+00         0.0357\nTaoyuan        1.4729e-02 -1.2039e-04  8.5103e-04  5.0903e-01         0.6107\nTongdao        4.6482e-01 -6.9870e-03  1.9879e-01  1.0582e+00         0.2900\nWangcheng      4.4220e+00 -1.1067e-01  1.3596e+00  3.8873e+00         0.0001\nWugang         7.1003e-01 -7.8144e-03  1.0710e-01  2.1935e+00         0.0283\nXiangtan       2.4530e-01 -3.6457e-04  3.2319e-03  4.3213e+00         0.0000\nXiangxiang     2.6271e-01 -1.2703e-03  2.1290e-02  1.8092e+00         0.0704\nXiangyin       5.4525e-01 -4.7442e-03  7.9236e-02  1.9539e+00         0.0507\nXinhua         1.1810e-01 -6.2649e-03  8.6001e-02  4.2409e-01         0.6715\nXinhuang       1.5725e-01 -4.1820e-03  3.6648e-01  2.6667e-01         0.7897\nXinning        6.8928e-01 -9.6674e-03  2.0328e-01  1.5502e+00         0.1211\nXinshao        5.7578e-02 -8.5932e-03  1.1769e-01  1.9289e-01         0.8470\nXintian       -7.4050e-03 -5.1493e-03  1.0877e-01 -6.8395e-03         0.9945\nXupu           3.2406e-01 -5.7468e-03  5.7735e-02  1.3726e+00         0.1699\nYanling       -6.9021e-02 -5.9211e-04  9.9306e-03 -6.8667e-01         0.4923\nYizhang       -2.6844e-01 -2.2463e-03  4.7588e-02 -1.2202e+00         0.2224\nYongshun       6.3064e-01 -1.1350e-02  1.8830e-01  1.4795e+00         0.1390\nYongxing       4.3411e-01 -9.0735e-03  1.5088e-01  1.1409e+00         0.2539\nYou            7.8750e-02 -7.2728e-03  1.2116e-01  2.4714e-01         0.8048\nYuanjiang      2.0004e-04 -1.7760e-04  2.9798e-03  6.9181e-03         0.9945\nYuanling       8.7298e-03 -2.2981e-06  2.3221e-05  1.8121e+00         0.0700\nYueyang        4.1189e-02 -1.9768e-04  2.3113e-03  8.6085e-01         0.3893\nZhijiang       1.0476e-01 -7.8123e-04  1.3100e-02  9.2214e-01         0.3565\nZhongfang     -2.2685e-01 -2.1455e-03  3.5927e-02 -1.1855e+00         0.2358\nZhuzhou        3.2864e-01 -5.2432e-04  7.2391e-03  3.8688e+00         0.0001\nZixing        -7.6849e-01 -8.8210e-02  9.4057e-01 -7.0144e-01         0.4830\n\n\n\n\nHX6.8.1 Mapping Local Moran’s I\nOnce we have our matrix, we are able to plot these values on a tmap. Before mapping the Moran’s I matrix, it is wise to append the dataframe onto the Hunan polygon featureset.\n\nhunan.localMI &lt;- cbind(hunan,localMI) %&gt;%\n  rename(Pr.Ii = Pr.z....E.Ii..)\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\",\n          palette = \"RdBu\",\n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\nHX6.8.1.1 Mapping p-values\nThe choropleth map shows evidence of both positive and negative Ii values. However, it is useful to also consider the p-values for each of these values.\n\ntm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nHX6.8.1.2 Plotting them together\nWe can also plot both maps side by side with the following code chunk.\n\nlocalMI.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Ii\", \n          style = \"pretty\", \n          title = \"local moran statistics\") +\n  tm_borders(alpha = 0.5)\n\npvalue.map &lt;- tm_shape(hunan.localMI) +\n  tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=\"-Blues\", \n          title = \"local Moran's I p-values\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(localMI.map, pvalue.map, asp=1, ncol=2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "HandsOn/hands-on-6.html#hx6.10-hot-spot-and-cold-spot-areas-analysis",
    "href": "HandsOn/hands-on-6.html#hx6.10-hot-spot-and-cold-spot-areas-analysis",
    "title": "HX6: Spatial Autocorrelation",
    "section": "HX6.10 Hot Spot and Cold Spot Areas Analysis",
    "text": "HX6.10 Hot Spot and Cold Spot Areas Analysis\nLocalised spatial statistics can also be used to detect hot spot and/or cold spot areas. One way to do this is by creating Getis and Ord’s G-Statistics. It looks at neighbours within a defined proximity to identify whether either high or low values cluster spatially. The analysis consists of three steps:\n\nDeriving spatial weight matrix\nComputing Gi statistics\nMapping Gi statistics\n\n\nHX6.10.1 Deriving distance-based weight matrix\nFirst, we need to define a new set of neighbours based on distance. There are two types of distance-based proximity matrices: fixed-distance, and adaptive-distance.\n\nHX6.10.1.1 Deriving the centroid\nWe will need points to associate with each polygon before we can create our connectivity graph. It will be a little more complicated than just running st_centroid() on the sf object; we need the coordinates in a separate data frame for this to work. To do this we will use a mapping function. The mapping function applies a given function to each element of a vector and returns a vector of the same length. Our input vector will be the geometry column of us.bound. Our function will be st_centroid().\nTo get our longitude values we map the st_centroid() function over the geometry column of us.bound and access the longitude value through double bracket notation [[]] and 1. This allows us to get only the longitude, which is the first value in each centroid.\n\nlongitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])\n\nWe do the same for latitude with one key difference. We access the second value per each centroid with [[2]].\n\nlatitude &lt;- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])\n\nNow that we have latitude and longitude, we can use cbind to put longitude and latitude into the same object.\n\ncoords &lt;- cbind(longitude, latitude)\n\n\n\nHX6.10.1.2 Determining the cutoff distance\nWe now need to determine the upper limit for our distance band.\n\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  24.79   32.57   38.01   39.07   44.52   61.79 \n\n\nThe summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.\n\n\nHX6.10.1.3 Computing fixed-distance weight matrix\nWe can now compute our distance weight matrix with dnearneigh(), and spatial weights object with nb2listw().\n\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B')\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 324 \nPercentage nonzero weights: 4.183884 \nAverage number of links: 3.681818 \nLink number distribution:\n\n 1  2  3  4  5  6 \n 6 15 14 26 20  7 \n6 least connected regions:\n6 15 30 32 56 65 with 1 link\n7 most connected regions:\n21 28 35 45 50 52 82 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0  S1   S2\nB 88 7744 324 648 5440\n\n\n\n\n\nHX6.10.2 Computing adaptive distance weight matrix\nA fixed distance weight matrix can cause more densely settled areas (usually urban areas) to have more neighbours, and less densly settled areas (usually rural areas) to have fewer neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.\nIt is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry.\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn\n\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\n\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 88 \nNumber of nonzero links: 704 \nPercentage nonzero weights: 9.090909 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n88 \n88 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n88 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 88 7744 704 1300 23014\n\n\n\n\nHX6.10.3 Computing Gi statistics\nGi-statistics show us where features with either high (i.e. hot spots) or low (i.e. cold spots) cluster spatially. Hot spot areas are areas that are significant and positive if location i is associated with relatively high values of the surrounding locations, while cold spot areas are areas that are significant and negative if location i is associated with relatively low values in surrounding locations.\n\nHX6.10.3.1 Gi statistics using fixed distance\n\nfips &lt;- order(hunan$County)\ngi.fixed &lt;- localG(hunan$GDPPC, wm62_lw)\ngi.fixed\n\n [1]  0.436075843 -0.265505650 -0.073033665  0.413017033  0.273070579\n [6] -0.377510776  2.863898821  2.794350420  5.216125401  0.228236603\n[11]  0.951035346 -0.536334231  0.176761556  1.195564020 -0.033020610\n[16]  1.378081093 -0.585756761 -0.419680565  0.258805141  0.012056111\n[21] -0.145716531 -0.027158687 -0.318615290 -0.748946051 -0.961700582\n[26] -0.796851342 -1.033949773 -0.460979158 -0.885240161 -0.266671512\n[31] -0.886168613 -0.855476971 -0.922143185 -1.162328599  0.735582222\n[36] -0.003358489 -0.967459309 -1.259299080 -1.452256513 -1.540671121\n[41] -1.395011407 -1.681505286 -1.314110709 -0.767944457 -0.192889342\n[46]  2.720804542  1.809191360 -1.218469473 -0.511984469 -0.834546363\n[51] -0.908179070 -1.541081516 -1.192199867 -1.075080164 -1.631075961\n[56] -0.743472246  0.418842387  0.832943753 -0.710289083 -0.449718820\n[61] -0.493238743 -1.083386776  0.042979051  0.008596093  0.136337469\n[66]  2.203411744  2.690329952  4.453703219 -0.340842743 -0.129318589\n[71]  0.737806634 -1.246912658  0.666667559  1.088613505 -0.985792573\n[76]  1.233609606 -0.487196415  1.626174042 -1.060416797  0.425361422\n[81] -0.837897118 -0.314565243  0.371456331  4.424392623 -0.109566928\n[86]  1.364597995 -1.029658605 -0.718000620\nattr(,\"internals\")\n               Gi      E(Gi)        V(Gi)        Z(Gi) Pr(z != E(Gi))\n [1,] 0.064192949 0.05747126 2.375922e-04  0.436075843   6.627817e-01\n [2,] 0.042300020 0.04597701 1.917951e-04 -0.265505650   7.906200e-01\n [3,] 0.044961480 0.04597701 1.933486e-04 -0.073033665   9.417793e-01\n [4,] 0.039475779 0.03448276 1.461473e-04  0.413017033   6.795941e-01\n [5,] 0.049767939 0.04597701 1.927263e-04  0.273070579   7.847990e-01\n [6,] 0.008825335 0.01149425 4.998177e-05 -0.377510776   7.057941e-01\n [7,] 0.050807266 0.02298851 9.435398e-05  2.863898821   4.184617e-03\n [8,] 0.083966739 0.04597701 1.848292e-04  2.794350420   5.200409e-03\n [9,] 0.115751554 0.04597701 1.789361e-04  5.216125401   1.827045e-07\n[10,] 0.049115587 0.04597701 1.891013e-04  0.228236603   8.194623e-01\n[11,] 0.045819180 0.03448276 1.420884e-04  0.951035346   3.415864e-01\n[12,] 0.049183846 0.05747126 2.387633e-04 -0.536334231   5.917276e-01\n[13,] 0.048429181 0.04597701 1.924532e-04  0.176761556   8.596957e-01\n[14,] 0.034733752 0.02298851 9.651140e-05  1.195564020   2.318667e-01\n[15,] 0.011262043 0.01149425 4.945294e-05 -0.033020610   9.736582e-01\n[16,] 0.065131196 0.04597701 1.931870e-04  1.378081093   1.681783e-01\n[17,] 0.027587075 0.03448276 1.385862e-04 -0.585756761   5.580390e-01\n[18,] 0.029409313 0.03448276 1.461397e-04 -0.419680565   6.747188e-01\n[19,] 0.061466754 0.05747126 2.383385e-04  0.258805141   7.957856e-01\n[20,] 0.057656917 0.05747126 2.371303e-04  0.012056111   9.903808e-01\n[21,] 0.066518379 0.06896552 2.820326e-04 -0.145716531   8.841452e-01\n[22,] 0.045599896 0.04597701 1.928108e-04 -0.027158687   9.783332e-01\n[23,] 0.030646753 0.03448276 1.449523e-04 -0.318615290   7.500183e-01\n[24,] 0.035635552 0.04597701 1.906613e-04 -0.748946051   4.538897e-01\n[25,] 0.032606647 0.04597701 1.932888e-04 -0.961700582   3.362000e-01\n[26,] 0.035001352 0.04597701 1.897172e-04 -0.796851342   4.255374e-01\n[27,] 0.012746354 0.02298851 9.812587e-05 -1.033949773   3.011596e-01\n[28,] 0.061287917 0.06896552 2.773884e-04 -0.460979158   6.448136e-01\n[29,] 0.014277403 0.02298851 9.683314e-05 -0.885240161   3.760271e-01\n[30,] 0.009622875 0.01149425 4.924586e-05 -0.266671512   7.897221e-01\n[31,] 0.014258398 0.02298851 9.705244e-05 -0.886168613   3.755267e-01\n[32,] 0.005453443 0.01149425 4.986245e-05 -0.855476971   3.922871e-01\n[33,] 0.043283712 0.05747126 2.367109e-04 -0.922143185   3.564539e-01\n[34,] 0.020763514 0.03448276 1.393165e-04 -1.162328599   2.451020e-01\n[35,] 0.081261843 0.06896552 2.794398e-04  0.735582222   4.619850e-01\n[36,] 0.057419907 0.05747126 2.338437e-04 -0.003358489   9.973203e-01\n[37,] 0.013497133 0.02298851 9.624821e-05 -0.967459309   3.333145e-01\n[38,] 0.019289310 0.03448276 1.455643e-04 -1.259299080   2.079223e-01\n[39,] 0.025996272 0.04597701 1.892938e-04 -1.452256513   1.464303e-01\n[40,] 0.016092694 0.03448276 1.424776e-04 -1.540671121   1.233968e-01\n[41,] 0.035952614 0.05747126 2.379439e-04 -1.395011407   1.630124e-01\n[42,] 0.031690963 0.05747126 2.350604e-04 -1.681505286   9.266481e-02\n[43,] 0.018750079 0.03448276 1.433314e-04 -1.314110709   1.888090e-01\n[44,] 0.015449080 0.02298851 9.638666e-05 -0.767944457   4.425202e-01\n[45,] 0.065760689 0.06896552 2.760533e-04 -0.192889342   8.470456e-01\n[46,] 0.098966900 0.05747126 2.326002e-04  2.720804542   6.512325e-03\n[47,] 0.085415780 0.05747126 2.385746e-04  1.809191360   7.042128e-02\n[48,] 0.038816536 0.05747126 2.343951e-04 -1.218469473   2.230456e-01\n[49,] 0.038931873 0.04597701 1.893501e-04 -0.511984469   6.086619e-01\n[50,] 0.055098610 0.06896552 2.760948e-04 -0.834546363   4.039732e-01\n[51,] 0.033405005 0.04597701 1.916312e-04 -0.908179070   3.637836e-01\n[52,] 0.043040784 0.06896552 2.829941e-04 -1.541081516   1.232969e-01\n[53,] 0.011297699 0.02298851 9.615920e-05 -1.192199867   2.331829e-01\n[54,] 0.040968457 0.05747126 2.356318e-04 -1.075080164   2.823388e-01\n[55,] 0.023629663 0.04597701 1.877170e-04 -1.631075961   1.028743e-01\n[56,] 0.006281129 0.01149425 4.916619e-05 -0.743472246   4.571958e-01\n[57,] 0.063918654 0.05747126 2.369553e-04  0.418842387   6.753313e-01\n[58,] 0.070325003 0.05747126 2.381374e-04  0.832943753   4.048765e-01\n[59,] 0.025947288 0.03448276 1.444058e-04 -0.710289083   4.775249e-01\n[60,] 0.039752578 0.04597701 1.915656e-04 -0.449718820   6.529132e-01\n[61,] 0.049934283 0.05747126 2.334965e-04 -0.493238743   6.218439e-01\n[62,] 0.030964195 0.04597701 1.920248e-04 -1.083386776   2.786368e-01\n[63,] 0.058129184 0.05747126 2.343319e-04  0.042979051   9.657182e-01\n[64,] 0.046096514 0.04597701 1.932637e-04  0.008596093   9.931414e-01\n[65,] 0.012459080 0.01149425 5.008051e-05  0.136337469   8.915545e-01\n[66,] 0.091447733 0.05747126 2.377744e-04  2.203411744   2.756574e-02\n[67,] 0.049575872 0.02298851 9.766513e-05  2.690329952   7.138140e-03\n[68,] 0.107907212 0.04597701 1.933581e-04  4.453703219   8.440175e-06\n[69,] 0.019616151 0.02298851 9.789454e-05 -0.340842743   7.332220e-01\n[70,] 0.032923393 0.03448276 1.454032e-04 -0.129318589   8.971056e-01\n[71,] 0.030317663 0.02298851 9.867859e-05  0.737806634   4.606320e-01\n[72,] 0.019437582 0.03448276 1.455870e-04 -1.246912658   2.124295e-01\n[73,] 0.055245460 0.04597701 1.932838e-04  0.666667559   5.049845e-01\n[74,] 0.074278054 0.05747126 2.383538e-04  1.088613505   2.763244e-01\n[75,] 0.013269580 0.02298851 9.719982e-05 -0.985792573   3.242349e-01\n[76,] 0.049407829 0.03448276 1.463785e-04  1.233609606   2.173484e-01\n[77,] 0.028605749 0.03448276 1.455139e-04 -0.487196415   6.261191e-01\n[78,] 0.039087662 0.02298851 9.801040e-05  1.626174042   1.039126e-01\n[79,] 0.031447120 0.04597701 1.877464e-04 -1.060416797   2.889550e-01\n[80,] 0.064005294 0.05747126 2.359641e-04  0.425361422   6.705732e-01\n[81,] 0.044606529 0.05747126 2.357330e-04 -0.837897118   4.020885e-01\n[82,] 0.063700493 0.06896552 2.801427e-04 -0.314565243   7.530918e-01\n[83,] 0.051142205 0.04597701 1.933560e-04  0.371456331   7.102977e-01\n[84,] 0.102121112 0.04597701 1.610278e-04  4.424392623   9.671399e-06\n[85,] 0.021901462 0.02298851 9.843172e-05 -0.109566928   9.127528e-01\n[86,] 0.064931813 0.04597701 1.929430e-04  1.364597995   1.723794e-01\n[87,] 0.031747344 0.04597701 1.909867e-04 -1.029658605   3.031703e-01\n[88,] 0.015893319 0.02298851 9.765131e-05 -0.718000620   4.727569e-01\nattr(,\"cluster\")\n [1] Low  Low  High High High High High High High Low  Low  High Low  Low  Low \n[16] High High High High Low  High High Low  Low  High Low  Low  Low  Low  Low \n[31] Low  Low  Low  High Low  Low  Low  Low  Low  Low  High Low  Low  Low  Low \n[46] High High Low  Low  Low  Low  High Low  Low  Low  Low  Low  High Low  Low \n[61] Low  Low  Low  High High High Low  High Low  Low  High Low  High High Low \n[76] High Low  Low  Low  Low  Low  Low  High High Low  High Low  Low \nLevels: Low High\nattr(,\"gstari\")\n[1] FALSE\nattr(,\"call\")\nlocalG(x = hunan$GDPPC, listw = wm62_lw)\nattr(,\"class\")\n[1] \"localG\"\n\n\nThe Gi statistics are represented as a Z-score. Higher Z-scores represent a greater intensity of clustering, while the direction (positive or negative) indicates high or low clusters.\nNow, we will join the Gi values to the hunan dataframe.\n\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.fixed)) %&gt;%\n  rename(gstat_fixed = as.matrix.gi.fixed.)\n\n\n\nHX6.10.3.2 Mapping Gi values with fixed distance weights\n\ngdppc &lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;-tm_shape(hunan.gi) +\n  tm_fill(col = \"gstat_fixed\", \n          style = \"pretty\",\n          palette=\"-RdBu\",\n          title = \"local Gi\") +\n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, Gimap, asp=1, ncol=2)\n\nVariable(s) \"gstat_fixed\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\nHX6.10.3.3 Gi statistics with adaptive distance\n\nfips &lt;- order(hunan$County)\ngi.adaptive &lt;- localG(hunan$GDPPC, knn_lw)\nhunan.gi &lt;- cbind(hunan, as.matrix(gi.adaptive)) %&gt;%\n  rename(gstat_adaptive = as.matrix.gi.adaptive.)\n\n\n\nHX6.10.3.4 Mapping Gi values with adaptive distance weights\n\ngdppc&lt;- qtm(hunan, \"GDPPC\")\n\nGimap &lt;- tm_shape(hunan.gi) + \n  tm_fill(col = \"gstat_adaptive\", \n          style = \"pretty\", \n          palette=\"-RdBu\", \n          title = \"local Gi\") + \n  tm_borders(alpha = 0.5)\n\ntmap_arrange(gdppc, \n             Gimap, \n             asp=1, \n             ncol=2)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThe hot spot areas are the high GDP per capta areas clustered towards the northeast of the study region, while the cold spot areas are clustered towards the south and southwest."
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.9-concluding-thoughts",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.9-concluding-thoughts",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "TH1.9 Concluding thoughts",
    "text": "TH1.9 Concluding thoughts\nIn conclusion, we have explored different spatial point pattern analysis methods using armed conflict data in Myanmar. We attempted spatial-temporal KDE on the entire study period and identified dense areas around the Sagaing and Chin areas. Following that, we identified a subset of states and regions for deeper analysis based on exploratory data analysis and the STKDE plots and attempted fixed- and adaptive-bandwidth KDE on these areas, as well as second-order SPPA using the F- and G-functions. We have found bw.scott() to be more effective in performing KDE on this dataset than the usual bw.diggle(), and the conflict points in all regions to exhibit clustering.\nNow that we know how the points behave and where they are clustered, one possible extension of this study could be to do deeper research on Myanmar’s municipalities, townships and diverse ethnic groups, and repeat the SPPA process with the admin2 or admin3 plots. This is so that we better identify the needs and desires of each ethnic group, helping diplomats and policymakers formulate more targeted solutions for the ethnic divide and conflict in the country. In addition, Ripley’s K- function, as well as Besag’s L-function, could be attempted again given more time and computing power, along with the incorporation of other data sources, such as economic data, which could enhance our understanding of the relationship between the conflict and the country’s overall economic development. It is worth noting, however, that no amount of geospatial analytics or field studies will be effective without a strong, morally upright and benevolent government in Myanmar, with the political will and know-how to formulate and implement sound policies in response to analyses such as this one, for the betterment of their people and country.\nAs a long-time Python programmer and learner of data analytics, this exercise has been a rigourous introduction not only to R programming, but to wrangling and analysing points in geographical space. Though frustrating at times, I strongly believe that the best learning comes from experiencing and recovering from adversity, and I look forward to the subsequent exercises and concepts to come."
  },
  {
    "objectID": "TakeHome/TakeHome1/take-home-1.html#th1.1-introduction",
    "href": "TakeHome/TakeHome1/take-home-1.html#th1.1-introduction",
    "title": "TH1: Geospatial Analytics for Social Good",
    "section": "",
    "text": "Millions of people have their lives shattered by armed conflict every year. One of these is the Myanmar Civil War, a significant escalation of the long-running Myanmar Conflict in response to the 2021 coup d’etat.\nGeospatial analtyics holds the potential to address complex problems facing society, such as this one. This study serves to discover the sptial and spatio-temporal distribution (spread) of the latest armed conflict in Myanmar by applying spatial point pattern analysis (SPPA) methods.\n\n\nThe R packages we will use today are:\n\nsf\ntmap\nspatstat\nsparr\nraster\nmaptools\n\n\npacman::p_load(sf, raster, spatstat, sparr, tmap, tidyverse)"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html",
    "href": "TakeHome/TakeHome2/take-home-2.html",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "",
    "text": "Drug abuse brings with it significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. The UNODC has reported an increase in the number of people using illicit drugs to 292 million people worldwide in the decade leading up to 2022. Of these, 228 million people consumed cannabis, 60 million people consumed opiods, 30 million used amphetamines, 23 million used cocaine and 20 million took ecstasy. Further, they found an increase in overdose deaths following the emergence of nitazenes, which is a group of synthetic opioids potentially more dangerous than fentanyl – in several high-income countries. (World Drug Day Report Highlights Spike in Drug Use, Increased Trafficking | UN News, 2024).\nThe aim of today’s study is to discover:\n\nHow the trend of drug offences in Thailand varied over the past 6 years,\nIf the key indicators of drug abuse and trafficking in Thailand are independent from space,\nIf the indicators of drug abuse and trafficking are indeed spatially-dependent, and if so, where the clusters, outliers and hotspots are located."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.1-setting-the-scene",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.1-setting-the-scene",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "",
    "text": "Drug abuse brings with it significant negative health, financial and social consequences. Yet, illicit drug consumption remains highly prevalent and continues to be a growing problem worldwide. The UNODC has reported an increase in the number of people using illicit drugs to 292 million people worldwide in the decade leading up to 2022. Of these, 228 million people consumed cannabis, 60 million people consumed opiods, 30 million used amphetamines, 23 million used cocaine and 20 million took ecstasy. Further, they found an increase in overdose deaths following the emergence of nitazenes, which is a group of synthetic opioids potentially more dangerous than fentanyl – in several high-income countries. (World Drug Day Report Highlights Spike in Drug Use, Increased Trafficking | UN News, 2024).\nThe aim of today’s study is to discover:\n\nHow the trend of drug offences in Thailand varied over the past 6 years,\nIf the key indicators of drug abuse and trafficking in Thailand are independent from space,\nIf the indicators of drug abuse and trafficking are indeed spatially-dependent, and if so, where the clusters, outliers and hotspots are located."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.2-the-drug-problem-in-thailand",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.2-the-drug-problem-in-thailand",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.2 The Drug Problem in Thailand",
    "text": "TH2.2 The Drug Problem in Thailand\nThailand (2024 GDP per capita - PPP: $23,401; Gini coefficient: 35.1 - medium; HDI: 0.083 - very high) (International Monetary Fund, 2024) (World Bank, n.d.) (United Nations Development Programme, 2024) is located in close proximity to the Golden Triangle, which comprises the northern part of the country along with northeastern Myanmar and northern Laos. In 2021, its drug trafficking situation remained critical, with 337,186 drug cases in total. While seizures of ketamine decreased between 2020 and 2021, seizures of methamphetamine, ice and heroin increased in the same period, with heroin seeing the biggest increase from 1873kg in 2020 to 4520kg in 2021 (Kanato et al., 2022). Considering that the COVID-19 pandemic - which caused a global economic depression among other socio-economic effects - occurred around this time, it can be theorised that those who encountered economic hardship as a result of the pandemic might turn to drug trafficking to support themselves and their families.\nThe maximum penalty for drug trafficking in Thailand, as is neighbouring Laos, Malaysia and Singapore, is death (Thailand, n.d.). Despite this, smugglers have innovated on new routes through the northern and northeastern borders of the country, and even go so far as to hide shipments in cargo vessels bound for the likes of Singapore, New Zealand, Australia and South Korea. 575 smuggling cases by sea occurred in 2021, in which 4554kg of heroin, 2.4 times more than the previous year, were seized (Kanato et al., 2022).\nDrug use in the country is as problematic. In 2018, 39% of Thais aged between 15 and 24 were involved in illicit drugs. Of youth aged between 15 and 19, there are 300000 who need treatment, and a significant majority attend vocational schools (as opposed to grade schools). Kongjareon et al. (2022) found in a study of 638 students in four vocational schools, that 11.3% reported poly-drug use. Among LGBT students this figure was 20.2%, and among hetrosexual students 9.8%. Factors contributing to the former’s use of drugs include, among other things, counselling needs, intoxicated sex and GPA."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.3-importing-data-and-r-packages",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.3-importing-data-and-r-packages",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.3 Importing data and R packages",
    "text": "TH2.3 Importing data and R packages\nThe R packages we will use today are:\n\nsf\nKendall for computing Kendall rank correction and Mann-Kendall trend test\ntmap\nspatstat\nsfdep and spdep for measures of spatial autocorrelation, and\nsparr\n\n\npacman::p_load(sf, raster, spatstat, sfdep, spdep, sparr, tmap, tidyverse, gridExtra, zoo, Kendall)\n\nWe will be examining a dataset of drug offences in Thailand between 2017 and 2022 retrieved from Kaggle, superimposed against the provincial boundaries of the country. This dataset encompasses a number of drug offence categories, from usage to trafficking and posession and export.\n\nthailand &lt;- st_read(dsn=\"data/geospatial\", layer=\"tha_admbnda_adm1_rtsd_20220121\") %&gt;% st_transform(crs = 4326)\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `/Users/kendricktty/Gits/smu_cs/is415-site/TakeHome/TakeHome2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\nthailand\n\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   Shape_Leng Shape_Area                  ADM1_EN       ADM1_TH ADM1_PCODE\n1    2.417227 0.13133873                  Bangkok  กรุงเทพมหานคร       TH10\n2    1.695100 0.07926199             Samut Prakan    สมุทรปราการ       TH11\n3    1.251111 0.05323766               Nonthaburi         นนทบุรี       TH12\n4    1.884945 0.12698345             Pathum Thani        ปทุมธานี       TH13\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya พระนครศรีอยุธยา       TH14\n6    1.739908 0.07920961                Ang Thong        อ่างทอง       TH15\n7    5.693342 0.54578838                 Lop Buri          ลพบุรี       TH16\n8    1.778326 0.06872655                Sing Buri         สิงห์บุรี       TH17\n9    2.896316 0.20907828                 Chai Nat         ชัยนาท       TH18\n10   4.766446 0.29208711                 Saraburi         สระบุรี       TH19\n   ADM1_REF ADM1ALT1EN ADM1ALT2EN ADM1ALT1TH ADM1ALT2TH  ADM0_EN   ADM0_TH\n1      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n2      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n3      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n4      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n5      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n6      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n7      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n8      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n9      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n10     &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n   ADM0_PCODE       date    validOn validTo                       geometry\n1          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((100.6139 13...\n2          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((100.7306 13...\n3          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((100.3415 14...\n4          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((100.8916 14...\n5          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((100.5131 14...\n6          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((100.3332 14...\n7          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((101.3453 15...\n8          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((100.3691 15...\n9          TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((100.1199 15...\n10         TH 2019-02-18 2022-01-22    &lt;NA&gt; MULTIPOLYGON (((101.3994 15...\n\nthailand_drug &lt;- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\")\n\nRows: 7392 Columns: 5\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nthailand_drug\n\n# A tibble: 7,392 × 5\n   fiscal_year types_of_drug_offenses no_cases province_th   province_en        \n         &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;         &lt;chr&gt;              \n 1        2017 drug_use_cases            11871 กรุงเทพมหานคร  Bangkok            \n 2        2017 drug_use_cases              200 ชัยนาท         Chai Nat           \n 3        2017 drug_use_cases              553 นนทบุรี         Nonthaburi         \n 4        2017 drug_use_cases              450 ปทุมธานี        Pathum Thani       \n 5        2017 drug_use_cases              378 พระนครศรีอยุธยา Phra Nakhon Si Ayu…\n 6        2017 drug_use_cases              727 ลพบุรี          Loburi             \n 7        2017 drug_use_cases              820 สมุทรปราการ    Samut Prakan       \n 8        2017 drug_use_cases               69 สระบุรี         Saraburi           \n 9        2017 drug_use_cases              127 สิงห์บุรี         Sing Buri          \n10        2017 drug_use_cases              208 อ่างทอง        Ang Thong          \n# ℹ 7,382 more rows\n\n\n\nTH2.3.1 Data Cleansing\nThere are discrepancies in the spelling of the province names between the shapefile and drug offence data, and R does not appear to support table joins if the values are not in English (which means a join by their Thai names is not possible). The only way to ensure all data is accounted for correctly later is to update the names of provinces in the drug offence table so that they match those in the shapefile - otherwise, the provinces with name mismatches will be reflected as missing data. Luckily, only 2 provinces have name mismatches: Bueng Kan and Lop Buri.\n\nthailand_drug &lt;- thailand_drug %&gt;%\n  mutate(province_en = case_when(\n    province_en %in% c(\"buogkan\") ~ \"Bueng Kan\",\n    province_en %in% c(\"Loburi\") ~ \"Lop Buri\",\n    TRUE ~ province_en\n  ))"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.4",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.4",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.4",
    "text": "TH2.4"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#references",
    "href": "TakeHome/TakeHome2/take-home-2.html#references",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "References",
    "text": "References\n\nAnselin, L. (1995). Local indicators of spatial association—LISA. Geographical Analysis, 27(2), 93–115. https://doi.org/10.1111/j.1538-4632.1995.tb00338.x\nHo, M. (2024, March 1). Take-Home Exercise 2. https://is415-gaa-matthew-ho.netlify.app/takehomeex/takehomeex2/the2\nInternational Monetary Fund. (2024, April 16). World Economic Outlook Database, April 2024 Edition: Thailand. https://www.imf.org/en/Publications/WEO/weo-database/2024/April\nKam, T. S. (2022). R for Geospatial Data Science and Analytics. https://r4gdsa.netlify.app\nKhant, M. N. (2024, February 10). Take-Home Exercise 02: Spatio-Temporal Analysis of Dengue Fever Outbreak in Tainan City, Taiwan. https://is415-geospatial-with-khant.netlify.app/take-home_ex/take-home_ex02/take-home_ex02\nKongjareon, Y., Samoh, N., Peerawaranun, P. et al. Pride-based violence, intoxicated sex and poly-drug use: a vocational school-based study of heterosexual and LGBT students in Bangkok. BMC Psychiatry 22, 148 (2022). https://doi.org/10.1186/s12888-022-03777-7\nKanato, M., Sarasiri, R., & Leyatikul, P. (Eds.). (2022). ASEAN drug monitoring report 2021. ASEAN Narcotics Cooperation Center.\nMoraga, P. (2024). Spatial neighbourhood matrices. In Spatial statistics for Data Science: Theory and practice with R (pp. 83–94). CRC Press.\nThailand. (n.d.). Hands-Off Cain. Retrieved 23 September 2024, from https://www.handsoffcain.info/bancadati/asia-middle-east-australia-and-oceania/thailand-17000464\nTobler, W. R. (1970). A computer movie simulating urban growth in the Detroit region. Economic Geography (Supplement: Proceedings, International Geographical Union. Commission on Quantitative Methods), 46, 234-240. https://doi.org/10.2307/143141\nUnited Nations Development Programme. (2024, March 13). Human Development Report 2023/2024 (PDF). Retrieved September 23, 2024, from https://hdr.undp.org/sites/default/files/reports/3503/hdr2023-24reporten.pdf\nWorld Bank. (n.d.). Gini index. Retrieved September 23, 2024, from https://www.worldbank.org/en/topic/poverty/brief/gini-index\nWorld Bank Open Data. (n.d.). Unemployment, total (% of total labor force) (national estimate) - Thailand. Retrieved 27 September 2024, from https://data.worldbank.org/indicator/SL.UEM.TOTL.NE.ZS?end=2023&locations=TH\nWorld Drug Day report highlights spike in drug use, increased trafficking | UN News. (2024, June 26). United Nations. https://news.un.org/en/story/2024/06/1151446biggest increase from 1873kg in 2020 to 4520kg in 2021 (Kanato et al., 2022)."
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html",
    "href": "InClass/ICE5/in-class-6.html",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.1-import-packages",
    "href": "InClass/ICE5/in-class-6.html#ce6.1-import-packages",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "",
    "text": "pacman::p_load(sf, sfdep, spdep, tmap, tidyverse)"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.2-preparing-data",
    "href": "InClass/ICE5/in-class-6.html#ce6.2-preparing-data",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.2 Preparing data",
    "text": "CE6.2 Preparing data\n\nCE6.2.1 Importing Hunan data shapefile\n\nhunan &lt;- st_read(dsn = \"data/geospatial\",\n                 layer = \"Hunan\")\n\nReading layer `Hunan' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/InClass/ICE5/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 88 features and 7 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n\n\n\n\nCE6.2.2 Importing Hunan 2012 Census Data\n\ndev_2012 &lt;- read_csv(\"data/aspatial/Hunan_2012.csv\")\n\nRows: 88 Columns: 29\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (2): County, City\ndbl (27): avg_wage, deposite, FAI, Gov_Rev, Gov_Exp, GDP, GDPPC, GIO, Loan, ...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n\nCE6.2.3 Performing relational join\n\nhunan &lt;- left_join(hunan, dev_2012) %&gt;%\n  select(1:4, 7, 15)\n\nJoining with `by = join_by(County)`\n\n  # Only selects fields we are interested in, in this case GDP per capita"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.3-deriving-continuity-weights-queen-method",
    "href": "InClass/ICE5/in-class-6.html#ce6.3-deriving-continuity-weights-queen-method",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.3 Deriving continuity weights: QUEEN method",
    "text": "CE6.3 Deriving continuity weights: QUEEN method\n\nwm_q &lt;- hunan %&gt;%\n    mutate(nb = st_contiguity(geometry),\n            wt = st_weights(nb, style = \"W\"),\n            .before = 1) # Insert into the front - easier to examine later\nwm_q\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                            wt\n1                                                      0.2, 0.2, 0.2, 0.2, 0.2\n2                                                      0.2, 0.2, 0.2, 0.2, 0.2\n3                                                       0.25, 0.25, 0.25, 0.25\n4                                                       0.25, 0.25, 0.25, 0.25\n5                                                       0.25, 0.25, 0.25, 0.25\n6                                                      0.2, 0.2, 0.2, 0.2, 0.2\n7                                                       0.25, 0.25, 0.25, 0.25\n8  0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571, 0.1428571\n9             0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667, 0.1666667\n10                      0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125, 0.125\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734..."
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.4-computing-global-morans-i",
    "href": "InClass/ICE5/in-class-6.html#ce6.4-computing-global-morans-i",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.4 Computing Global Moran’s I",
    "text": "CE6.4 Computing Global Moran’s I\n\nmoranI &lt;- global_moran(wm_q$GDPPC, wm_q$nb, wm_q$wt)\nglimpse(moranI)\n\nList of 2\n $ I: num 0.301\n $ K: num 7.64\n\n# K = average neighbours found"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.5-performing-global-morans-i-test",
    "href": "InClass/ICE5/in-class-6.html#ce6.5-performing-global-morans-i-test",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.5 Performing Global Moran’s I Test",
    "text": "CE6.5 Performing Global Moran’s I Test\n\n# Frequentist method\nglobal_moran_test(wm_q$GDPPC, wm_q$nb, wm_q$wt)\n\n\n    Moran I test under randomisation\n\ndata:  x  \nweights: listw    \n\nMoran I statistic standard deviate = 4.7351, p-value = 1.095e-06\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n      0.300749970      -0.011494253       0.004348351 \n\n# If p &lt; a (usually 0.05), reject null hypothesis H0"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.6-permutation-test",
    "href": "InClass/ICE5/in-class-6.html#ce6.6-permutation-test",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.6 Permutation Test",
    "text": "CE6.6 Permutation Test\n\n# Bayesian vs frequentist inference\nset.seed(1234)\nglobal_moran_perm(wm_q$GDPPC, wm_q$nb, wm_q$wt, nsim = 999) # Try to run as many trials as possible\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  x \nweights: listw  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.30075, observed rank = 1000, p-value &lt; 2.2e-16\nalternative hypothesis: two.sided"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.7-computing-local-morans-i",
    "href": "InClass/ICE5/in-class-6.html#ce6.7-computing-local-morans-i",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.7 Computing Local Moran’s I",
    "text": "CE6.7 Computing Local Moran’s I\n\nlisa &lt;- wm_q %&gt;% mutate(local_moran = local_moran(GDPPC, nb, wt, nsim = 999), .before = 1) %&gt;%\n        unnest(local_moran) # Create one single table\nlisa\n\nSimple feature collection with 88 features and 20 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 21\n         ii        eii    var_ii     z_ii    p_ii p_ii_sim p_folded_sim skewness\n      &lt;dbl&gt;      &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1 -0.00147  0.000241    5.19e-4 -0.0750  9.40e-1    0.808        0.404   -1.05 \n 2  0.0259  -0.00256     1.16e-2  0.264   7.92e-1    0.956        0.478   -1.02 \n 3 -0.0120  -0.0140      1.12e-1  0.00601 9.95e-1    0.84         0.42     0.934\n 4  0.00102 -0.0000553   4.97e-6  0.483   6.29e-1    0.572        0.286    0.962\n 5  0.0148   0.00232     1.48e-3  0.325   7.45e-1    0.658        0.329    0.820\n 6 -0.0388  -0.00627     6.09e-3 -0.417   6.77e-1    0.822        0.411    0.902\n 7  3.37    -0.0727      1.66e+0  2.67    7.55e-3    0.046        0.023    1.16 \n 8  1.56    -0.118       8.52e-1  1.82    6.89e-2    0.112        0.056    0.887\n 9  4.42    -0.131       1.58e+0  3.63    2.88e-4    0.008        0.004    1.03 \n10 -0.399   -0.00763     7.87e-2 -1.40    1.63e-1    0.178        0.089   -0.897\n# ℹ 78 more rows\n# ℹ 13 more variables: kurtosis &lt;dbl&gt;, mean &lt;fct&gt;, median &lt;fct&gt;, pysal &lt;fct&gt;,\n#   nb &lt;nb&gt;, wt &lt;list&gt;, NAME_2 &lt;chr&gt;, ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;,\n#   ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;, geometry &lt;POLYGON [°]&gt;\n\n# p_folded_sim: k-fold replacement\n# p_ii_sim: Moran's I sim\n# Mean, median, skewness:\n# Left skewed/right skewed: use MEDIAN\n# Close to 0: use MEAN"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.8-visualising-local-morans-i",
    "href": "InClass/ICE5/in-class-6.html#ce6.8-visualising-local-morans-i",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.8 Visualising Local Moran’s I",
    "text": "CE6.8 Visualising Local Moran’s I\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\ntm_shape(lisa) + tm_fill(\"ii\") + tm_borders(alpha = 0.5) + tm_view(set.zoom.limits = c(7, 8)) + tm_layout(main.title = \"Local Moran's I of GDPPC\", main.title.size = 1)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.9-visualising-p-values",
    "href": "InClass/ICE5/in-class-6.html#ce6.9-visualising-p-values",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.9 Visualising p-values",
    "text": "CE6.9 Visualising p-values\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\np_value_map &lt;- tm_shape(lisa) + tm_fill(\"p_ii_sim\") + tm_borders(alpha = 0.5) + tm_view(set.zoom.limits = c(7, 8)) + tm_layout(main.title = \"Local Moran's I of GDPPC\", main.title.size = 1)\n\n# To plot 2 maps side by side, save the maps to an output and refer to them\n# using tmap_arrange()\ntmap_arrange(local_moran_map, p_value_map, ncol = 2)\n\nVariable(s) \"ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce6.8-visualising-local-morans-i-and-p-values",
    "href": "InClass/ICE5/in-class-6.html#ce6.8-visualising-local-morans-i-and-p-values",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE6.8 Visualising Local Moran’s I and p-values",
    "text": "CE6.8 Visualising Local Moran’s I and p-values\n\ntmap_mode(\"plot\")\n\ntmap mode set to plotting\n\nlocal_moran_map &lt;- tm_shape(lisa) + tm_fill(\"ii\") + tm_borders(alpha = 0.5) + tm_view(set.zoom.limits = c(7, 8)) + tm_layout(main.title = \"Local Moran's I of GDPPC\", main.title.size = 1)"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce5.10-lisa-map",
    "href": "InClass/ICE5/in-class-6.html#ce5.10-lisa-map",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE5.10 LISA map",
    "text": "CE5.10 LISA map\n\nlisa_sig &lt;- lisa %&gt;% filter(p_ii &lt; 0.05) # Significant\ntm_shape(lisa) + tm_polygons() + tm_borders(alpha = 0.5) + tm_shape(lisa_sig) + tm_fill(\"mean\") + tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\n\n\n\n\n\n\n# Purple: low-high outlier\n# Green: low-low cluster\n# Red: high-high cluster"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce5.11-computing-local-gi-statistics",
    "href": "InClass/ICE5/in-class-6.html#ce5.11-computing-local-gi-statistics",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE5.11 Computing local Gi* statistics",
    "text": "CE5.11 Computing local Gi* statistics\n\n# Gstat methods give us hot spots and cold spots\n# LISAs give us clusters and outliers\nwm_idw &lt;- hunan %&gt;% \n    mutate(nb = st_contiguity(geometry),\n            wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1),\n            .before = 1)\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wts = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\nwm_idw\n\nSimple feature collection with 88 features and 8 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\nFirst 10 features:\n                               nb\n1                 2, 3, 4, 57, 85\n2               1, 57, 58, 78, 85\n3                     1, 4, 5, 85\n4                      1, 3, 5, 6\n5                     3, 4, 6, 85\n6                4, 5, 69, 75, 85\n7                  67, 71, 74, 84\n8       9, 46, 47, 56, 78, 80, 86\n9           8, 66, 68, 78, 84, 86\n10 16, 17, 19, 20, 22, 70, 72, 73\n                                                                                              wts\n1                                      0.01526149, 0.03515537, 0.02176677, 0.02836978, 0.01029857\n2                                      0.01526149, 0.01601100, 0.01911052, 0.02327058, 0.01591694\n3                                                  0.03515537, 0.04581089, 0.04116397, 0.01208437\n4                                                  0.02176677, 0.04581089, 0.04637578, 0.01585302\n5                                                  0.04116397, 0.04637578, 0.01896212, 0.01351099\n6                                      0.01585302, 0.01896212, 0.02710909, 0.01140718, 0.01080890\n7                                                  0.01621067, 0.01536702, 0.01133628, 0.01836488\n8              0.01930410, 0.02675555, 0.02151751, 0.01076895, 0.02608065, 0.01519804, 0.01337412\n9                          0.01930410, 0.01651371, 0.01798519, 0.01473155, 0.03015561, 0.01612293\n10 0.02737233, 0.01390810, 0.01458881, 0.02156771, 0.02419268, 0.02350470, 0.01784174, 0.01621545\n     NAME_2  ID_3    NAME_3   ENGTYPE_3    County GDPPC\n1   Changde 21098   Anxiang      County   Anxiang 23667\n2   Changde 21100   Hanshou      County   Hanshou 20981\n3   Changde 21101    Jinshi County City    Jinshi 34592\n4   Changde 21102        Li      County        Li 24473\n5   Changde 21103     Linli      County     Linli 25554\n6   Changde 21104    Shimen      County    Shimen 27137\n7  Changsha 21109   Liuyang County City   Liuyang 63118\n8  Changsha 21110 Ningxiang      County Ningxiang 62202\n9  Changsha 21111 Wangcheng      County Wangcheng 70666\n10 Chenzhou 21112     Anren      County     Anren 12761\n                         geometry\n1  POLYGON ((112.0625 29.75523...\n2  POLYGON ((112.2288 29.11684...\n3  POLYGON ((111.8927 29.6013,...\n4  POLYGON ((111.3731 29.94649...\n5  POLYGON ((111.6324 29.76288...\n6  POLYGON ((110.8825 30.11675...\n7  POLYGON ((113.9905 28.5682,...\n8  POLYGON ((112.7181 28.38299...\n9  POLYGON ((112.7914 28.52688...\n10 POLYGON ((113.1757 26.82734...\n\nHCSA &lt;- wm_idw %&gt;% mutate(local_Gi = local_gstar_perm(GDPPC, nb, wt, nsim = 999), .before = 1) %&gt;%\nunnest(local_Gi)\nHCSA\n\nSimple feature collection with 88 features and 18 fields\nGeometry type: POLYGON\nDimension:     XY\nBounding box:  xmin: 108.7831 ymin: 24.6342 xmax: 114.2544 ymax: 30.12812\nGeodetic CRS:  WGS 84\n# A tibble: 88 × 19\n   gi_star cluster   e_gi    var_gi  std_dev p_value p_sim p_folded_sim skewness\n     &lt;dbl&gt; &lt;fct&gt;    &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;   &lt;dbl&gt; &lt;dbl&gt;        &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.0416 Low     0.0113   6.30e-6  0.0769  9.39e-1 0.786        0.393    0.890\n 2 -0.333  Low     0.0111   7.06e-6 -0.260   7.95e-1 0.954        0.477    0.916\n 3  0.281  High    0.0122   7.77e-6  0.00601 9.95e-1 0.81         0.405    1.17 \n 4  0.411  High    0.0113   7.63e-6  0.489   6.25e-1 0.558        0.279    1.00 \n 5  0.387  High    0.0116   8.72e-6  0.326   7.45e-1 0.62         0.31     1.01 \n 6 -0.368  High    0.0114   6.22e-6 -0.425   6.71e-1 0.802        0.401    0.841\n 7  3.56   High    0.0149   7.44e-6  2.67    7.57e-3 0.04         0.02     1.06 \n 8  2.52   High    0.0134   4.88e-6  1.77    7.72e-2 0.112        0.056    0.880\n 9  4.56   High    0.0142   4.97e-6  3.89    9.92e-5 0.006        0.003    0.770\n10  1.16   Low     0.0108   4.92e-6  1.39    1.63e-1 0.21         0.105    0.730\n# ℹ 78 more rows\n# ℹ 10 more variables: kurtosis &lt;dbl&gt;, nb &lt;nb&gt;, wts &lt;list&gt;, NAME_2 &lt;chr&gt;,\n#   ID_3 &lt;int&gt;, NAME_3 &lt;chr&gt;, ENGTYPE_3 &lt;chr&gt;, County &lt;chr&gt;, GDPPC &lt;dbl&gt;,\n#   geometry &lt;POLYGON [°]&gt;"
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce5.12-visualising-gi-statistics",
    "href": "InClass/ICE5/in-class-6.html#ce5.12-visualising-gi-statistics",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE5.12 Visualising Gi* statistics",
    "text": "CE5.12 Visualising Gi* statistics\n\ntm_shape(HCSA) + tm_fill(\"gi_star\") + tm_borders(alpha = 0.5) + tm_view(set.zoom.limits = c(6, 8))\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "InClass/ICE5/in-class-6.html#ce5.13-visualising-hot-and-cold-spot-areas",
    "href": "InClass/ICE5/in-class-6.html#ce5.13-visualising-hot-and-cold-spot-areas",
    "title": "CE6: Measures of Spatial Autocorrelation",
    "section": "CE5.13 Visualising hot and cold spot areas",
    "text": "CE5.13 Visualising hot and cold spot areas\n\nHCSA_sig &lt;- HCSA %&gt;% filter(p_sim &lt; 0.05)\ntm_shape(HCSA) + tm_polygons() + tm_borders(alpha = 0.5) + tm_shape(HCSA_sig) + tm_fill(\"gi_star\") + tm_borders(alpha = 0.4)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nVariable(s) \"gi_star\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.4-data-exploration-and-preprocessing",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.4-data-exploration-and-preprocessing",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.4 Data exploration and preprocessing",
    "text": "TH2.4 Data exploration and preprocessing\nThe code chunk below prints the unique types of drug offence cases.\n\nunique_drug &lt;- thailand_drug %&gt;% distinct(types_of_drug_offenses)\nunique_drug\n\n# A tibble: 16 × 1\n   types_of_drug_offenses                                \n   &lt;chr&gt;                                                 \n 1 drug_use_cases                                        \n 2 suspects_in_drug_use_cases                            \n 3 possession_cases                                      \n 4 suspects_in_possession_cases                          \n 5 possession_with_intent_to_distribute_cases            \n 6 suspects_in_possession_with_intent_to_distribute_cases\n 7 trafficking_cases                                     \n 8 suspects_in_trafficking_cases                         \n 9 production_cases                                      \n10 suspects_in_production_cases                          \n11 import_cases                                          \n12 suspects_in_import_cases                              \n13 export_cases                                          \n14 suspects_in_export_cases                              \n15 conspiracy_cases                                      \n16 suspects_in_conspiracy_cases"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.4-exploratory-data-analysis",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.4-exploratory-data-analysis",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.4 Exploratory Data Analysis",
    "text": "TH2.4 Exploratory Data Analysis\nThe code chunk below prints the total number of each unique type of drug offence cases.\n\nthailand_drug_analysis &lt;- thailand_drug %&gt;% \n  group_by(types_of_drug_offenses) %&gt;% \n  summarise(total_cases = sum(no_cases)) %&gt;% ungroup()\nthailand_drug_analysis\n\n# A tibble: 16 × 2\n   types_of_drug_offenses                                 total_cases\n   &lt;chr&gt;                                                        &lt;dbl&gt;\n 1 conspiracy_cases                                               920\n 2 drug_use_cases                                              915529\n 3 export_cases                                                    84\n 4 import_cases                                                   860\n 5 possession_cases                                            538893\n 6 possession_with_intent_to_distribute_cases                  341283\n 7 production_cases                                             56892\n 8 suspects_in_conspiracy_cases                                  2332\n 9 suspects_in_drug_use_cases                                  930768\n10 suspects_in_export_cases                                       102\n11 suspects_in_import_cases                                      1066\n12 suspects_in_possession_cases                                566999\n13 suspects_in_possession_with_intent_to_distribute_cases      386946\n14 suspects_in_production_cases                                 66247\n15 suspects_in_trafficking_cases                                79997\n16 trafficking_cases                                            68379\n\n\nThere are a total of 8 different types of cases, with another 8 unique values dedicated to suspected instances of cases.\nWe are particularly interested in drug use and trafficking cases, so we will now attempt to plot the changes in the number of each type of case between 2017 and 2022. This analysis will help us select study periods to analyse later.\n\nTH2.4.1 Plotting changes in drug trafficking cases by time\n\nthailand_drug_trafficking &lt;- thailand_drug %&gt;% filter(types_of_drug_offenses %in% c(\"trafficking_cases\", \"suspects_in_trafficking_cases\", \"possession_with_intent_to_distribute_cases\", \"suspects_in_possession_with_intent_to_distribute_cases\")) %&gt;%\n  group_by(fiscal_year) %&gt;%\n  summarise(total_cases = sum(no_cases[types_of_drug_offenses == \"trafficking_cases\"]),\n    total_suspect_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_trafficking_cases\"]),\n    total_posession_intent_cases = sum(no_cases[types_of_drug_offenses == \"possession_with_intent_to_distribute_cases\"]),\n    total_suspect_posession_intent_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_possession_with_intent_to_distribute_cases\"])) %&gt;%\n  ungroup()\nthailand_drug_trafficking\n\n# A tibble: 6 × 5\n  fiscal_year total_cases total_suspect_cases total_posession_intent_cases\n        &lt;dbl&gt;       &lt;dbl&gt;               &lt;dbl&gt;                        &lt;dbl&gt;\n1        2017       13089               15603                        55644\n2        2018       12034               14630                        64205\n3        2019       11366               13498                        63194\n4        2020       12248               13918                        67014\n5        2021       10847               12395                        68681\n6        2022        8795                9953                        22545\n# ℹ 1 more variable: total_suspect_posession_intent_cases &lt;dbl&gt;\n\nggplot(data = thailand_drug_trafficking, aes(x = fiscal_year)) +     \n  geom_line(aes(y = total_cases, color = \"trafficking_cases\"), size = 1) + \n  geom_point(aes(y = total_cases, color = \"trafficking_cases\"), size = 2) +\n  geom_line(aes(y = total_suspect_cases, color = \"suspects_in_trafficking_cases\"), size = 1) + \n  geom_point(aes(y = total_suspect_cases, color = \"suspects_in_trafficking_cases\"), size = 2) +\n  labs(title = \"Trafficking Cases and Suspects\",\n       x = \"Year\",\n       y = \"Number of cases\") +\n  scale_color_manual(values = c(\"trafficking_cases\" = \"purple3\", \"suspects_in_trafficking_cases\" = \"plum\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\", \n        legend.justification = \"right\") +\n  guides(color = guide_legend(title = \"Legend\"))\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\n\n\n\nggplot(data = thailand_drug_trafficking, aes(x = fiscal_year)) +\n  geom_line(aes(y = total_posession_intent_cases, color = \"possession_with_intent_to_distribute_cases\"), size = 1) + \n  geom_point(aes(y = total_posession_intent_cases, color = \"possession_with_intent_to_distribute_cases\"), size = 2) +\n  geom_line(aes(y = total_suspect_posession_intent_cases, color = \"suspects_in_possession_with_intent_to_distribute_cases\"), size = 1) + \n  geom_point(aes(y = total_suspect_posession_intent_cases, color = \"suspects_in_possession_with_intent_to_distribute_cases\"), size = 2) +\n  labs(title = \"Possession with Intent to Distribute Cases and Suspects\",\n       x = \"Year\",\n       y = \"Number of cases\") +\n  scale_color_manual(values = c(\"possession_with_intent_to_distribute_cases\" = \"black\", \n                                \"suspects_in_possession_with_intent_to_distribute_cases\" = \"gray\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\", \n        legend.justification = \"right\") +\n  guides(color = guide_legend(title = \"Legend\"))\n\n\n\n\n\n\n\n# grid.arrange(plot1, plot2, ncol = 2)\n\nThe number of trafficking cases generally trended downwards between 2017 and 2022, though there was a momentary increase between 2019 and 2020. Meanwhile the number of posession cases with intent to distribute rose steadily until 2021, before plunging in 2022.\n\n\nTH2.4.2 Plotting changes in drug use cases by time\n\nthailand_drug_trafficking &lt;- thailand_drug %&gt;% filter(types_of_drug_offenses %in% c(\"drug_use_cases\", \"suspects_in_drug_use_cases\", \"possession_cases\", \"suspects_in_possession_cases\")) %&gt;%\n  group_by(fiscal_year) %&gt;%\n  summarise(total_use_cases = sum(no_cases[types_of_drug_offenses == \"drug_use_cases\"]),\n    total_suspect_use_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_drug_use_cases\"]),\n    total_posession_cases = sum(no_cases[types_of_drug_offenses == \"possession_cases\"]),\n    total_suspect_posession_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_possession_cases\"])) %&gt;%\n  ungroup()\nthailand_drug_trafficking\n\n# A tibble: 6 × 5\n  fiscal_year total_use_cases total_suspect_use_cases total_posession_cases\n        &lt;dbl&gt;           &lt;dbl&gt;                   &lt;dbl&gt;                 &lt;dbl&gt;\n1        2017           91444                   93895                 90845\n2        2018          146761                  150049                100941\n3        2019          177078                  179823                104365\n4        2020          141570                  141761                 87997\n5        2021          231406                  235803                 93976\n6        2022          127270                  129437                 60769\n# ℹ 1 more variable: total_suspect_posession_cases &lt;dbl&gt;\n\nggplot(data = thailand_drug_trafficking, aes(x = fiscal_year)) +     \n  # geom_bar(stat = \"identity\", fill = \"red4\") +\n  geom_line(aes(x = fiscal_year, y = total_use_cases, color = \"drug_use\"), size = 1) + geom_point(aes(x = fiscal_year, y = total_use_cases, color = \"drug_use\"), size = 2) +\n  geom_line(aes(x = fiscal_year, y = total_suspect_use_cases, color = \"suspects_in_drug_use_cases\"), size = 1) + geom_point(aes(x = fiscal_year, y = total_suspect_use_cases, color = \"suspects_in_drug_use_cases\"), size = 2) +\n  geom_line(aes(x = fiscal_year, y = total_posession_cases, color = \"possession_cases\"), size = 1) + geom_point(aes(x = fiscal_year, y = total_posession_cases, color = \"possession_cases\"), size = 2) +\n  geom_line(aes(x = fiscal_year, y = total_suspect_posession_cases, color = \"suspects_in_possession_cases\"), size = 1) + geom_point(aes(x = fiscal_year, y = total_suspect_posession_cases, color = \"suspects_in_possession_cases\"), size = 2) +\n    labs(title = \"Drug use and suspected cases by year\",\n         x = \"Year\",\n         y = \"Number of cases\") +\n    scale_color_manual(values = c(\"drug_use\" = \"skyblue1\", \"suspects_in_drug_use_cases\" = \"green3\", \"possession_cases\" = \"red2\", \"suspects_in_possession_cases\" = \"yellow3\")) +\n    theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  guides(color = guide_legend(title = \"Legend\"))\n\n\n\n\n\n\n\n\nThere was a spike in the number of drug use cases in 2021 in an otherwise variable set of data. Meanwhile, drug possession cases generally declined after 2019, though there was a slight increase in 2021.\nFrom both analysis steps, it makes sense to select the drug use cases trafficking cases in 2021 for further analysis. The year 2021 coincided with a rise in the country’s unemployment rate to 1.2% from 0.7% two years prior (World Bank Open Data, n.d.), as the Thai economy was still recovering from the COVID-19 pandemic. Unemployment increases susceptibility to, among other negative effects, drug use."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.4.3-creating-filtered-table-for-2021-observations",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.4.3-creating-filtered-table-for-2021-observations",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.4.3 Creating filtered table for 2021 observations",
    "text": "TH2.4.3 Creating filtered table for 2021 observations\nThe following code chunks create a filtered table for the confirmed drug use and trafficking observations that occurred in 2021, groups and summarises them by province, and plots the numbers onto the provincial map of Thailand.\n\nthailand_2021_drug &lt;- thailand_drug %&gt;%\n  filter(fiscal_year == \"2021\") %&gt;%\n  filter(types_of_drug_offenses %in% c(\"drug_use_cases\", \"trafficking_cases\")) %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(total_use_cases = sum(no_cases[types_of_drug_offenses == \"drug_use_cases\"]),\n            total_trafficking_cases = sum(no_cases[types_of_drug_offenses == \"trafficking_cases\"])) %&gt;%\n  ungroup()\n\nthailand_2021_drug\n\n# A tibble: 77 × 3\n   province_en   total_use_cases total_trafficking_cases\n   &lt;chr&gt;                   &lt;dbl&gt;                   &lt;dbl&gt;\n 1 Amnat Charoen            3012                     164\n 2 Ang Thong                 755                      51\n 3 Bangkok                  9625                     250\n 4 Bueng Kan                2705                      20\n 5 Buri Ram                 5110                     399\n 6 Chachoengsao             4111                     197\n 7 Chai Nat                  763                      97\n 8 Chaiyaphum               4620                     181\n 9 Chanthaburi              2200                      31\n10 Chiang Mai               8623                     640\n# ℹ 67 more rows\n\nthailand_2021 &lt;- left_join(thailand, thailand_2021_drug, by = c(\"ADM1_EN\" = \"province_en\"))\nthailand_2021\n\nSimple feature collection with 77 features and 18 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   Shape_Leng Shape_Area                  ADM1_EN       ADM1_TH ADM1_PCODE\n1    2.417227 0.13133873                  Bangkok  กรุงเทพมหานคร       TH10\n2    1.695100 0.07926199             Samut Prakan    สมุทรปราการ       TH11\n3    1.251111 0.05323766               Nonthaburi         นนทบุรี       TH12\n4    1.884945 0.12698345             Pathum Thani        ปทุมธานี       TH13\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya พระนครศรีอยุธยา       TH14\n6    1.739908 0.07920961                Ang Thong        อ่างทอง       TH15\n7    5.693342 0.54578838                 Lop Buri          ลพบุรี       TH16\n8    1.778326 0.06872655                Sing Buri         สิงห์บุรี       TH17\n9    2.896316 0.20907828                 Chai Nat         ชัยนาท       TH18\n10   4.766446 0.29208711                 Saraburi         สระบุรี       TH19\n   ADM1_REF ADM1ALT1EN ADM1ALT2EN ADM1ALT1TH ADM1ALT2TH  ADM0_EN   ADM0_TH\n1      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n2      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n3      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n4      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n5      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n6      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n7      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n8      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n9      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n10     &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n   ADM0_PCODE       date    validOn validTo total_use_cases\n1          TH 2019-02-18 2022-01-22    &lt;NA&gt;            9625\n2          TH 2019-02-18 2022-01-22    &lt;NA&gt;            2515\n3          TH 2019-02-18 2022-01-22    &lt;NA&gt;            3202\n4          TH 2019-02-18 2022-01-22    &lt;NA&gt;            1747\n5          TH 2019-02-18 2022-01-22    &lt;NA&gt;            1766\n6          TH 2019-02-18 2022-01-22    &lt;NA&gt;             755\n7          TH 2019-02-18 2022-01-22    &lt;NA&gt;            1925\n8          TH 2019-02-18 2022-01-22    &lt;NA&gt;             683\n9          TH 2019-02-18 2022-01-22    &lt;NA&gt;             763\n10         TH 2019-02-18 2022-01-22    &lt;NA&gt;            1106\n   total_trafficking_cases                       geometry\n1                      250 MULTIPOLYGON (((100.6139 13...\n2                      159 MULTIPOLYGON (((100.7306 13...\n3                       60 MULTIPOLYGON (((100.3415 14...\n4                      106 MULTIPOLYGON (((100.8916 14...\n5                      112 MULTIPOLYGON (((100.5131 14...\n6                       51 MULTIPOLYGON (((100.3332 14...\n7                      142 MULTIPOLYGON (((101.3453 15...\n8                       40 MULTIPOLYGON (((100.3691 15...\n9                       97 MULTIPOLYGON (((100.1199 15...\n10                      69 MULTIPOLYGON (((101.3994 15...\n\n\n\nuse_map &lt;- tm_shape(thailand_2021) + tm_fill(\"total_use_cases\", n = 8, style = \"quantile\") + tm_borders(alpha = 0.5)\nuse_map_equal &lt;- tm_shape(thailand_2021) + tm_fill(\"total_use_cases\", n = 6, style = \"equal\") + tm_borders(alpha = 0.5)\ntmap_arrange(use_map + tm_layout(main.title = \"Drug use across Thailand (quantile)\", main.title.size = 1.2, frame = TRUE), use_map_equal + tm_layout(main.title = \"Drug use across Thailand (equal)\", main.title.size = 1.2, frame = TRUE), asp = 1, ncol = 2)\n\n\n\n\n\n\n\n\nConsidering only confirmed cases of use and trafficking (and ignoring suspected ones), the provinces with the highest number of drug use cases appear clustered to the northeast, around Sakon Nakhon, and north, around Chiang Mai and Chiang Rai. Both these general regions are either within, or in close proximity to, the Golden Triangle that also encompasses northern Laos and northeastern Myanmar. There are also pockets of high use around the capital Bangkok near the Gulf of Thailand, and the southern provinces including Songkhla province on the border with Kedah, Malaysia, and the resort island province of Phuket. Surprisingly, provinces such as Kanchanaburi and Sing Buri, which are also close to the Golden Triangle, see relatively muted drug use.\n\ntrafficking_map &lt;- tm_shape(thailand_2021) + tm_fill(\"total_trafficking_cases\", n = 8, style = \"quantile\") + tm_borders(alpha = 0.5)\ntrafficking_map_equal &lt;- tm_shape(thailand_2021) + tm_fill(\"total_trafficking_cases\", n = 6, style = \"equal\") + tm_borders(alpha = 0.5)\ntmap_arrange(trafficking_map  + tm_layout(main.title = \"Drug trafficking across Thailand (quantile)\", main.title.size = 1, frame = TRUE), trafficking_map_equal  + tm_layout(main.title = \"Drug trafficking across Thailand (equal)\", main.title.size = 1, frame = TRUE), asp = 1, ncol = 2)\n\n\n\n\n\n\n\n\nThis same general region in the north-northeast also sees the highest concentration of drug trafficking cases throughout the country, with the eastern province of Ubon Ratchatani seeing the largest number of all. The further south within the country, the lower the concentration of drug cases, with one notable anomaly being Surat Thani Province, which contains another resort island - Koh Samui.\nWe will now proceed to rigourously verify these observations using global and local spatial autocorrelation techniques, such as global and local Moran’s I, Geary’s C and G-statistics. In particular, we want to verify if the indicators of drug abuse are indeed spatially dependent, i.e. provinces that see less drug use are clustered with one another and vice-versa, and if so, whether the high-concentration areas identified in the choropleth maps above are indeed hot spots."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.3-importing-data-and-r-packages-1",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.3-importing-data-and-r-packages-1",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.3 Importing data and R packages",
    "text": "TH2.3 Importing data and R packages\nThe R packages we will use today are:\n\nsf\ntmap\nspatstat\nspdep for measures of spatial autocorrelation, and\nsparr\n\n\npacman::p_load(sf, raster, spatstat, spdep, sparr, tmap, tidyverse, gridExtra)\n\nWe will be examining a dataset of drug offences in Thailand between 2017 and 2022 retrieved from Kaggle, superimposed against the provincial boundaries of the country.\n\nthailand &lt;- st_read(dsn=\"data/geospatial\", layer=\"tha_admbnda_adm1_rtsd_20220121\")\n\nReading layer `tha_admbnda_adm1_rtsd_20220121' from data source \n  `/Users/kendricktty/Gits/SMU_CS/is415-site/TakeHome/TakeHome2/data/geospatial' \n  using driver `ESRI Shapefile'\nSimple feature collection with 77 features and 16 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\n\ntmap_mode('view')\n\ntmap mode set to interactive viewing\n\ntm_shape(thailand) + tm_polygons()\n\n\n\n\ntmap_mode('plot')\n\ntmap mode set to plotting\n\nthailand_drug &lt;- read_csv(\"data/aspatial/thai_drug_offenses_2017_2022.csv\") %&gt;% select(fiscal_year, types_of_drug_offenses, no_cases, province_en)\n\nRows: 7392 Columns: 5\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (3): types_of_drug_offenses, province_th, province_en\ndbl (2): fiscal_year, no_cases\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nthailand_drug\n\n# A tibble: 7,392 × 4\n   fiscal_year types_of_drug_offenses no_cases province_en             \n         &lt;dbl&gt; &lt;chr&gt;                     &lt;dbl&gt; &lt;chr&gt;                   \n 1        2017 drug_use_cases            11871 Bangkok                 \n 2        2017 drug_use_cases              200 Chai Nat                \n 3        2017 drug_use_cases              553 Nonthaburi              \n 4        2017 drug_use_cases              450 Pathum Thani            \n 5        2017 drug_use_cases              378 Phra Nakhon Si Ayutthaya\n 6        2017 drug_use_cases              727 Loburi                  \n 7        2017 drug_use_cases              820 Samut Prakan            \n 8        2017 drug_use_cases               69 Saraburi                \n 9        2017 drug_use_cases              127 Sing Buri               \n10        2017 drug_use_cases              208 Ang Thong               \n# ℹ 7,382 more rows"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.4-exploratory-data-analysis-1",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.4-exploratory-data-analysis-1",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.4 Exploratory Data Analysis",
    "text": "TH2.4 Exploratory Data Analysis\nThe code chunk below prints the total number of each unique type of drug offence cases.\n\nthailand_drug_analysis &lt;- thailand_drug %&gt;% \n  group_by(types_of_drug_offenses) %&gt;% \n  summarise(total_cases = sum(no_cases)) %&gt;% ungroup()\nthailand_drug_analysis\n\n# A tibble: 16 × 2\n   types_of_drug_offenses                                 total_cases\n   &lt;chr&gt;                                                        &lt;dbl&gt;\n 1 conspiracy_cases                                               920\n 2 drug_use_cases                                              915529\n 3 export_cases                                                    84\n 4 import_cases                                                   860\n 5 possession_cases                                            538893\n 6 possession_with_intent_to_distribute_cases                  341283\n 7 production_cases                                             56892\n 8 suspects_in_conspiracy_cases                                  2332\n 9 suspects_in_drug_use_cases                                  930768\n10 suspects_in_export_cases                                       102\n11 suspects_in_import_cases                                      1066\n12 suspects_in_possession_cases                                566999\n13 suspects_in_possession_with_intent_to_distribute_cases      386946\n14 suspects_in_production_cases                                 66247\n15 suspects_in_trafficking_cases                                79997\n16 trafficking_cases                                            68379\n\n\nThere are a total of 8 different types of cases, with another 8 unique values dedicated to suspected instances of cases.\nWe are particularly interested in drug use, possession and trafficking cases, so we will now attempt to plot the changes in the number of each type of case between 2017 and 2022. This analysis will help us select study periods to analyse later.\n\nTH2.4.1 Plotting changes in drug trafficking cases by time\n\nthailand_drug_trafficking &lt;- thailand_drug %&gt;% filter(types_of_drug_offenses %in% c(\"trafficking_cases\", \"suspects_in_trafficking_cases\", \"possession_with_intent_to_distribute_cases\", \"suspects_in_possession_with_intent_to_distribute_cases\")) %&gt;%\n  group_by(fiscal_year) %&gt;%\n  summarise(total_cases = sum(no_cases[types_of_drug_offenses == \"trafficking_cases\"]),\n    total_suspect_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_trafficking_cases\"]),\n    total_posession_intent_cases = sum(no_cases[types_of_drug_offenses == \"possession_with_intent_to_distribute_cases\"]),\n    total_suspect_posession_intent_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_possession_with_intent_to_distribute_cases\"])) %&gt;%\n  ungroup()\nthailand_drug_trafficking\n\n# A tibble: 6 × 5\n  fiscal_year total_cases total_suspect_cases total_posession_intent_cases\n        &lt;dbl&gt;       &lt;dbl&gt;               &lt;dbl&gt;                        &lt;dbl&gt;\n1        2017       13089               15603                        55644\n2        2018       12034               14630                        64205\n3        2019       11366               13498                        63194\n4        2020       12248               13918                        67014\n5        2021       10847               12395                        68681\n6        2022        8795                9953                        22545\n# ℹ 1 more variable: total_suspect_posession_intent_cases &lt;dbl&gt;\n\nggplot(data = thailand_drug_trafficking, aes(x = fiscal_year)) +     \n  geom_line(aes(y = total_cases, color = \"trafficking_cases\"), size = 1) + \n  geom_point(aes(y = total_cases, color = \"trafficking_cases\"), size = 2) +\n  geom_line(aes(y = total_suspect_cases, color = \"suspects_in_trafficking_cases\"), size = 1) + \n  geom_point(aes(y = total_suspect_cases, color = \"suspects_in_trafficking_cases\"), size = 2) +\n  labs(title = \"Trafficking Cases and Suspects\",\n       x = \"Year\",\n       y = \"Number of cases\") +\n  scale_color_manual(values = c(\"trafficking_cases\" = \"purple3\", \"suspects_in_trafficking_cases\" = \"plum\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\", \n        legend.justification = \"right\") +\n  guides(color = guide_legend(title = \"Legend\"))\n\n\n\n\n\n\n\nggplot(data = thailand_drug_trafficking, aes(x = fiscal_year)) +\n  geom_line(aes(y = total_posession_intent_cases, color = \"possession_with_intent_to_distribute_cases\"), size = 1) + \n  geom_point(aes(y = total_posession_intent_cases, color = \"possession_with_intent_to_distribute_cases\"), size = 2) +\n  geom_line(aes(y = total_suspect_posession_intent_cases, color = \"suspects_in_possession_with_intent_to_distribute_cases\"), size = 1) + \n  geom_point(aes(y = total_suspect_posession_intent_cases, color = \"suspects_in_possession_with_intent_to_distribute_cases\"), size = 2) +\n  labs(title = \"Possession with Intent to Distribute Cases and Suspects\",\n       x = \"Year\",\n       y = \"Number of cases\") +\n  scale_color_manual(values = c(\"possession_with_intent_to_distribute_cases\" = \"black\", \n                                \"suspects_in_possession_with_intent_to_distribute_cases\" = \"gray\")) +\n  theme_minimal() +\n  theme(legend.position = \"bottom\", \n        legend.justification = \"right\") +\n  guides(color = guide_legend(title = \"Legend\"))\n\n\n\n\n\n\n\n# grid.arrange(plot1, plot2, ncol = 2)\n\nThe number of trafficking cases generally trended downwards between 2017 and 2022, though there was a momentary increase between 2019 and 2020. Meanwhile the number of posession cases with intent to distribute rose steadily until 2021, before plunging in 2022.\n\n\nTH2.4.2 Plotting changes in drug use cases by time\n\nthailand_drug_trafficking &lt;- thailand_drug %&gt;% filter(types_of_drug_offenses %in% c(\"drug_use_cases\", \"suspects_in_drug_use_cases\", \"possession_cases\", \"suspects_in_possession_cases\")) %&gt;%\n  group_by(fiscal_year) %&gt;%\n  summarise(total_use_cases = sum(no_cases[types_of_drug_offenses == \"drug_use_cases\"]),\n    total_suspect_use_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_drug_use_cases\"]),\n    total_posession_cases = sum(no_cases[types_of_drug_offenses == \"possession_cases\"]),\n    total_suspect_posession_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_possession_cases\"])) %&gt;%\n  ungroup()\nthailand_drug_trafficking\n\n# A tibble: 6 × 5\n  fiscal_year total_use_cases total_suspect_use_cases total_posession_cases\n        &lt;dbl&gt;           &lt;dbl&gt;                   &lt;dbl&gt;                 &lt;dbl&gt;\n1        2017           91444                   93895                 90845\n2        2018          146761                  150049                100941\n3        2019          177078                  179823                104365\n4        2020          141570                  141761                 87997\n5        2021          231406                  235803                 93976\n6        2022          127270                  129437                 60769\n# ℹ 1 more variable: total_suspect_posession_cases &lt;dbl&gt;\n\nggplot(data = thailand_drug_trafficking, aes(x = fiscal_year)) +     \n  # geom_bar(stat = \"identity\", fill = \"red4\") +\n  geom_line(aes(x = fiscal_year, y = total_use_cases, color = \"drug_use\"), size = 1) + geom_point(aes(x = fiscal_year, y = total_use_cases, color = \"drug_use\"), size = 2) +\n  geom_line(aes(x = fiscal_year, y = total_suspect_use_cases, color = \"suspects_in_drug_use_cases\"), size = 1) + geom_point(aes(x = fiscal_year, y = total_suspect_use_cases, color = \"suspects_in_drug_use_cases\"), size = 2) +\n  geom_line(aes(x = fiscal_year, y = total_posession_cases, color = \"possession_cases\"), size = 1) + geom_point(aes(x = fiscal_year, y = total_posession_cases, color = \"possession_cases\"), size = 2) +\n  geom_line(aes(x = fiscal_year, y = total_suspect_posession_cases, color = \"suspects_in_possession_cases\"), size = 1) + geom_point(aes(x = fiscal_year, y = total_suspect_posession_cases, color = \"suspects_in_possession_cases\"), size = 2) +\n    labs(title = \"Drug use and suspected cases by year\",\n         x = \"Year\",\n         y = \"Number of cases\") +\n    scale_color_manual(values = c(\"drug_use\" = \"skyblue1\", \"suspects_in_drug_use_cases\" = \"green3\", \"possession_cases\" = \"red2\", \"suspects_in_possession_cases\" = \"yellow3\")) +\n    theme_minimal() +\n  theme(legend.position = \"bottom\") +\n  guides(color = guide_legend(title = \"Legend\"))\n\n\n\n\n\n\n\n\nThere was a spike in the number of drug use cases in 2021 in an otherwise variable set of data. Meanwhile, drug possession cases generally declined after 2019, though there was a slight increase in 2021.\nIt therefore makes sense to select the drug use and drug possession cases in 2021 for further analysis. The year 2021 coincided with a rise in the country’s unemployment rate to 1.2% from 0.7% two years prior (World Bank Open Data, n.d.), as the Thai economy was still recovering from the COVID-19 pandemic. Unemployment increases susceptibility to, among other negative effects, drug use."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.4.3-creating-filtered-table-for-2021-observations-1",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.4.3-creating-filtered-table-for-2021-observations-1",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.4.3 Creating filtered table for 2021 observations",
    "text": "TH2.4.3 Creating filtered table for 2021 observations\n\nthailand_2021_drug &lt;- thailand_drug %&gt;% \n  filter(fiscal_year == \"2021\") %&gt;% \n  filter(types_of_drug_offenses %in% c(\"drug_use_cases\", \"suspects_in_drug_use_cases\", \"possession_cases\", \"suspects_in_possession_cases\", \"trafficking_cases\", \"possession_with_intent_to_distribute_cases\")) %&gt;%\n  group_by(province_en) %&gt;%\n  summarise(total_use_cases = sum(no_cases[types_of_drug_offenses == \"drug_use_cases\"]),\n    total_suspect_use_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_drug_use_cases\"]),\n    total_posession_cases = sum(no_cases[types_of_drug_offenses == \"possession_cases\"]),\n    total_suspect_posession_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_possession_cases\"]),\n    total_trafficking_cases = sum(no_cases[types_of_drug_offenses == \"trafficking_cases\"]),\n    total_suspect_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_trafficking_cases\"]),\n    total_posession_intent_cases = sum(no_cases[types_of_drug_offenses == \"possession_with_intent_to_distribute_cases\"]),\n    total_suspect_posession_intent_cases = sum(no_cases[types_of_drug_offenses == \"suspects_in_possession_with_intent_to_distribute_cases\"])\n)\nthailand_2021_drug\n\n# A tibble: 77 × 9\n   province_en   total_use_cases total_suspect_use_cases total_posession_cases\n   &lt;chr&gt;                   &lt;dbl&gt;                   &lt;dbl&gt;                 &lt;dbl&gt;\n 1 Amnat Charoen            3012                    3066                   505\n 2 Ang Thong                 755                     763                   511\n 3 Bangkok                  9625                    9797                  5121\n 4 Buri Ram                 5110                    5217                   729\n 5 Chachoengsao             4111                    4160                  1033\n 6 Chai Nat                  763                     765                   232\n 7 Chaiyaphum               4620                    4663                  1172\n 8 Chanthaburi              2200                    2236                   514\n 9 Chiang Mai               8623                    8714                  2279\n10 Chiang Rai               5634                    5706                  1324\n# ℹ 67 more rows\n# ℹ 5 more variables: total_suspect_posession_cases &lt;dbl&gt;,\n#   total_trafficking_cases &lt;dbl&gt;, total_suspect_cases &lt;dbl&gt;,\n#   total_posession_intent_cases &lt;dbl&gt;,\n#   total_suspect_posession_intent_cases &lt;dbl&gt;\n\nthailand_2021 &lt;- left_join(thailand, thailand_2021_drug, by = c(\"ADM1_EN\" = \"province_en\"))\nthailand_2021\n\nSimple feature collection with 77 features and 24 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 97.34336 ymin: 5.613038 xmax: 105.637 ymax: 20.46507\nGeodetic CRS:  WGS 84\nFirst 10 features:\n   Shape_Leng Shape_Area                  ADM1_EN       ADM1_TH ADM1_PCODE\n1    2.417227 0.13133873                  Bangkok  กรุงเทพมหานคร       TH10\n2    1.695100 0.07926199             Samut Prakan    สมุทรปราการ       TH11\n3    1.251111 0.05323766               Nonthaburi         นนทบุรี       TH12\n4    1.884945 0.12698345             Pathum Thani        ปทุมธานี       TH13\n5    3.041716 0.21393797 Phra Nakhon Si Ayutthaya พระนครศรีอยุธยา       TH14\n6    1.739908 0.07920961                Ang Thong        อ่างทอง       TH15\n7    5.693342 0.54578838                 Lop Buri          ลพบุรี       TH16\n8    1.778326 0.06872655                Sing Buri         สิงห์บุรี       TH17\n9    2.896316 0.20907828                 Chai Nat         ชัยนาท       TH18\n10   4.766446 0.29208711                 Saraburi         สระบุรี       TH19\n   ADM1_REF ADM1ALT1EN ADM1ALT2EN ADM1ALT1TH ADM1ALT2TH  ADM0_EN   ADM0_TH\n1      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n2      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n3      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n4      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n5      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n6      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n7      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n8      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n9      &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n10     &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt;       &lt;NA&gt; Thailand ประเทศไทย\n   ADM0_PCODE       date    validOn validTo total_use_cases\n1          TH 2019-02-18 2022-01-22    &lt;NA&gt;            9625\n2          TH 2019-02-18 2022-01-22    &lt;NA&gt;            2515\n3          TH 2019-02-18 2022-01-22    &lt;NA&gt;            3202\n4          TH 2019-02-18 2022-01-22    &lt;NA&gt;            1747\n5          TH 2019-02-18 2022-01-22    &lt;NA&gt;            1766\n6          TH 2019-02-18 2022-01-22    &lt;NA&gt;             755\n7          TH 2019-02-18 2022-01-22    &lt;NA&gt;              NA\n8          TH 2019-02-18 2022-01-22    &lt;NA&gt;             683\n9          TH 2019-02-18 2022-01-22    &lt;NA&gt;             763\n10         TH 2019-02-18 2022-01-22    &lt;NA&gt;            1106\n   total_suspect_use_cases total_posession_cases total_suspect_posession_cases\n1                     9797                  5121                          5488\n2                     2536                  2310                          2470\n3                     3210                   880                           927\n4                     1756                  1518                          1583\n5                     1779                  1048                          1077\n6                      763                   511                           522\n7                       NA                    NA                            NA\n8                      689                   298                           300\n9                      765                   232                           233\n10                    1127                  1249                          1275\n   total_trafficking_cases total_suspect_cases total_posession_intent_cases\n1                      250                   0                         2821\n2                      159                   0                         1179\n3                       60                   0                          868\n4                      106                   0                          901\n5                      112                   0                          974\n6                       51                   0                          385\n7                       NA                  NA                           NA\n8                       40                   0                          390\n9                       97                   0                          423\n10                      69                   0                          873\n   total_suspect_posession_intent_cases                       geometry\n1                                     0 MULTIPOLYGON (((100.6139 13...\n2                                     0 MULTIPOLYGON (((100.7306 13...\n3                                     0 MULTIPOLYGON (((100.3415 14...\n4                                     0 MULTIPOLYGON (((100.8916 14...\n5                                     0 MULTIPOLYGON (((100.5131 14...\n6                                     0 MULTIPOLYGON (((100.3332 14...\n7                                    NA MULTIPOLYGON (((101.3453 15...\n8                                     0 MULTIPOLYGON (((100.3691 15...\n9                                     0 MULTIPOLYGON (((100.1199 15...\n10                                    0 MULTIPOLYGON (((101.3994 15...\n\n\n\ndrug_usage_2021 &lt;- tm_shape(thailand_2021) + tm_fill(\"total_use_cases\", n = 8, style = \"quantile\") + tm_borders(alpha = 0.5)\ndrug_trafficking_2021 &lt;- tm_shape(thailand_2021) + tm_fill(\"total_trafficking_cases\", n = 8, style = \"quantile\") + tm_borders(alpha = 0.5)"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#references-1",
    "href": "TakeHome/TakeHome2/take-home-2.html#references-1",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "References",
    "text": "References\n\nInternational Monetary Fund. (2024, April 16). World Economic Outlook Database, April 2024 Edition: Thailand. https://www.imf.org/en/Publications/WEO/weo-database/2024/April\nKongjareon, Y., Samoh, N., Peerawaranun, P. et al. Pride-based violence, intoxicated sex and poly-drug use: a vocational school-based study of heterosexual and LGBT students in Bangkok. BMC Psychiatry 22, 148 (2022). https://doi.org/10.1186/s12888-022-03777-7\nKanato, M., Sarasiri, R., & Leyatikul, P. (Eds.). (2022). ASEAN drug monitoring report 2021. ASEAN Narcotics Cooperation Center.\nThailand. (n.d.). Hands-Off Cain. Retrieved 23 September 2024, from https://www.handsoffcain.info/bancadati/asia-middle-east-australia-and-oceania/thailand-17000464\nUnited Nations Development Programme. (2024, March 13). Human Development Report 2023/2024 (PDF). Retrieved September 23, 2024, from https://hdr.undp.org/sites/default/files/reports/3503/hdr2023-24reporten.pdf\nWorld Bank. (n.d.). Gini index. Retrieved September 23, 2024, from https://www.worldbank.org/en/topic/poverty/brief/gini-index\nWorld Bank Open Data. (n.d.). Unemployment, total (% of total labor force) (national estimate) - Thailand. Retrieved 27 September 2024, from https://data.worldbank.org/indicator/SL.UEM.TOTL.NE.ZS?end=2023&locations=TH\nWorld Drug Day report highlights spike in drug use, increased trafficking | UN News. (2024, June 26). United Nations. https://news.un.org/en/story/2024/06/1151446"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.5-deriving-global-measures-of-spatial-autocorrelation",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.5-deriving-global-measures-of-spatial-autocorrelation",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.5 Deriving Global Measures of Spatial Autocorrelation",
    "text": "TH2.5 Deriving Global Measures of Spatial Autocorrelation\nTobler’s (1970) first law of geography states that everything is related to everything else, but near things are more related than distant things. Spatial autocorrelation seeks to determine the extent of Tobler’s first law on a variable or measurement - in our case, the number of drug use and drug trafficking cases. As the illustration below (Khant, 2024) (Moraga, 2023) shows, positive spatial autocorrelation is when adjacent observations have similar data values. In contrast, negative spatial autocorrelation is when adjacent observations have contrasting values, and when the data values appear randomly distributed, no spatial autocorrelation occurs.\n\n\n\nAn illustration on the methods of spatial autocorrelation. (Moraga, 2023)\n\n\nWe will first focus on the global measures of spatial autocorrelation: Moran’s I and Geary’s C. While both seek to determine if the measured variables (in this case, our drug use and drug trafficking statistics) are clustered, dispersed or random, the former looks at the study area as a whole, and the latter quantifies how different each subdivision (province) is different from its immediate neighbours.\n\nTH2.5.1 Data Preparation - Spatial Weights\nBefore computing any global spatial autocorrelation statistics, we first need to construct the spatial weights of the study area. The first step in doing so will be to compute the queen contiguity spatial weights. This means we will consider all neighbours for each province that share an edge and vertex, i.e. are horizontally, vertically and diagonally adjacent.\nWe will create 2 row-standardised spatial weights matrices for confirmed cases only - one for our drug use statistics and another for our drug trafficking statistics. Row-standardisation will take the inverse of the number of neighbours each province has, as derived from our vanilla queen contiguity spatial weights matrix.\n\nthailand_2021_use &lt;- thailand_2021 %&gt;% select(1:3, 17)\nthailand_2021_trafficking &lt;- thailand_2021 %&gt;% select(1:3, 18)\nwm_q_use &lt;- poly2nb(thailand_2021_use, queen=TRUE)\nwm_q_tr &lt;- poly2nb(thailand_2021_trafficking, queen=TRUE)\n\n\nprint(\"Weights matrix for drug use cases\")\n\n[1] \"Weights matrix for drug use cases\"\n\nsummary(wm_q_use)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n\nprint(\"Weights matrix for drug trafficking cases\")\n\n[1] \"Weights matrix for drug trafficking cases\"\n\nsummary(wm_q_tr)\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6  7  8  9 \n 1  1  5 17 15 17 10  5  4  2 \n1 least connected region:\n14 with 1 link\n2 most connected regions:\n29 51 with 9 links\n\n\n\nrswm_q_use &lt;- nb2listw(wm_q_use, style = \"W\", zero.policy = TRUE)\nrswm_q_tr &lt;- nb2listw(wm_q_tr, style = \"W\", zero.policy = TRUE)\n\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 352 \nPercentage nonzero weights: 5.93692 \nAverage number of links: 4.571429 \n1 region with no links:\n67\n2 disjoint connected subgraphs\n\nWeights style: W \nWeights constants summary:\n   n   nn S0       S1      S2\nW 76 5776 76 36.26113 315.652\n\n\nWe will also define our null and alternative hypotheses as such:\n\n**Null Hypotheses \\(H_0_\\): the tests indicate no spatial autocorrelation:\n\nFor Moran’s I: \\(H_0_: I = E[I] = 0\\), and;\nFor Geary’s C:\n\n**Alternative Hypotheses\n\n\n\nTH2.5.2 Moran’s I\nWith our matrices constructed, we can calculate our global spatial correlation statistics. Moran’s I describes how features differ from the values in the study area as a whole. It approaches 1 when similar values are clustered, and approaches -1 when dissimilar values tend to cluster.\nThe code chunk below computes Moran’s I on our drug use dataset, subsequently performing a Monte Carlo test and plotting the result in a histogram. We can use the histogram to visualise the permutation results and compare them to the expected value under null hypothesis.\n\nTH2.5.2.1 Moran’s I on drug_use statistics\n\nmoran.test(thailand_2021$total_use_cases, listw=rswm_q_use, zero.policy = TRUE, na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  thailand_2021$total_use_cases  \nweights: rswm_q_use  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 2.862, p-value = 0.002105\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.20376109       -0.01333333        0.00575372 \n\nset.seed(1234)\nbperm_use &lt;- moran.mc(thailand_2021$total_use_cases, \n                listw=rswm_q_use, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_use\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  thailand_2021$total_use_cases \nweights: rswm_q_use  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.20376, observed rank = 993, p-value = 0.007\nalternative hypothesis: greater\n\nhist(bperm_use$res, main = \"Global Moran's I Simulation Results for drug_use\", xlab=\"Monte-Carlo Results\", ylab=\"Frequency\") \nabline(v = bperm_use$statistic, col = \"green4\")\n\n\n\n\n\n\n\n\nFrom the output above:\n\nThe Moran’s I statistic is approximately 0.20, which is significantly higher than the expected value of -0.014. This is a significant indicator of positive spatial autocorrelation, but only to a moderate degree.\nWith a standard deviation of 2.86 and p-value of 0.0021 &lt; 0.05 at a 95% confidence level, the test result is statistically significant. We can reject the null hypothesis of a lack of spatial autocorrelation.\nAfter 1000 permutations, we get a similar Moran’s I observation of 0.2038, with a p-value of 0.007. Therefore, our result is stable and statistically significant.\n\nThis shows that provinces with high drug use in Thailand can, to a limited extent, be near one another.\n\n\nTH2.5.2.2 Moran’s I on drug_trafficking statistics\n\nmoran.test(thailand_2021$total_trafficking_cases, listw=rswm_q_tr, zero.policy = TRUE, na.action=na.omit)\n\n\n    Moran I test under randomisation\n\ndata:  thailand_2021$total_trafficking_cases  \nweights: rswm_q_tr  \nn reduced by no-neighbour observations  \n\nMoran I statistic standard deviate = 3.3324, p-value = 0.0004304\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n       0.22018889       -0.01333333        0.00491054 \n\nset.seed(1234)\nbperm_tr &lt;- moran.mc(thailand_2021$total_trafficking_cases, \n                listw=rswm_q_tr, \n                nsim=999, \n                zero.policy = TRUE, \n                na.action=na.omit)\nbperm_tr\n\n\n    Monte-Carlo simulation of Moran I\n\ndata:  thailand_2021$total_trafficking_cases \nweights: rswm_q_tr  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.22019, observed rank = 998, p-value = 0.002\nalternative hypothesis: greater\n\nhist(bperm_use$res, main = \"Global Moran's I Simulation Results for drug_trafficking\", xlab=\"Monte-Carlo Results\", ylab=\"Frequency\") \nabline(v = bperm_tr$statistic, col = \"purple4\")\n\n\n\n\n\n\n\n\nThe output for our drug_trafficking statistics is similar to that for our drug_use statistics, and can be interpreted as follows:\n\nThe Moran’s I statistic is approximately 0.22, which is significantly higher than the expected value of -0.014. This value is close to that obtained from our drug_use statistics, which indicates that both categories of drug crimes are similarly and moderately clustered.\nWith a standard deviation of 3.33 and p-value of 0.0004 &lt; 0.05 at a 95% confidence level, the test result is statistically significant. We can reject the null hypothesis of a lack of spatial autocorrelation.\nAfter 1000 permutations, we get a similar Moran’s I observation of 0.21947, with a p-value of 0.002. Therefore, our result is stable and statistically significant.\n\nLike drug use, using Moran’s I show that provinces with high drug trafficking in Thailand can, to a limited extent, be near one another."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.6-gearys-c",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.6-gearys-c",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.6 Geary’s C",
    "text": "TH2.6 Geary’s C\nGeary’s C is another measure of global spatial autocorrelation that describes how features differ from their immediate neighbours. When C &gt; 1, the points are dispersed, and while C &lt; 1, the points are clustered. A C value of 1 indicates observations are randomly arranged in space. Geary’s C approaches 0 when similar values are clustered, and approaches 3 when dissimilar values are clustered. Geary’s C is inversely proportional to Moran’s I, so higher Cs correspond to lower Is.\nJust as before, we will now perform Geary’s C on both our drug_use and drug_trafficking statistics.\n\nTH2.6.1 Geary’s C on drug_use statistics\n\ngeary.test(thailand_2021$total_use_cases, listw=rswm_q_use, zero.policy = TRUE, na.action = na.omit)\n\n\n    Geary C test under randomisation\n\ndata:  thailand_2021$total_use_cases \nweights: rswm_q_use  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 1.8151, p-value = 0.03476\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n      0.843832653       1.000000000       0.007402704 \n\nset.seed(1234)\nbperm_use &lt;- geary.mc(thailand_2021$total_use_cases, \n                listw=rswm_q_use, \n                nsim=999,\n                zero.policy = TRUE,\n                na.action = na.omit)\nbperm_use\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  thailand_2021$total_use_cases \nweights: rswm_q_use  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.84383, observed rank = 61, p-value = 0.061\nalternative hypothesis: greater\n\nhist(bperm_use$res, main = \"Geary's C Simulation Results for drug_use\", xlab=\"Monte-Carlo Results\", ylab=\"Frequency\") \nabline(v = bperm_use$statistic, col = \"green4\")\n\n\n\n\n\n\n\n\nFrom the output above:\n\nThe Geary’s C statistic is approximately 0.84, which is lower than the expected value of 1.0. Just as a high Moran’s I indicates positive spatial correlation, our Geary’s C statistic, which is less than 1, indicates likewise. Similarly to the conclusion of our Moran’s I investigation, the Geary’s C statistic only indicates moderate positive spatial correlation.\nWith a standard deviation of 3.24 and p-value of0.035 &lt; 0.05`, the test result is statistically significant. If we were to only run the test once, we should be able to reject the null hypothesis of a lack of spatial autocorrelation.\nHowever, while running 1000 permutations yielded a similar Geary’s C observation of 0.84383, this time, our p-value of 0.061 is greater than our threshold of 0.05 at the 95% confidence level. Had we only used Geary’s C, we would not have strong statistical evidence to reject our null hypothesis.\n\nHence, the Geary’s C statistic on drug use cases in 2021 yielded inconclusive results.\n\n\nTH2.6.2 Geary’s C on drug_trafficking statistics\n\ngeary.test(thailand_2021$total_trafficking_cases, listw=rswm_q_tr, zero.policy = TRUE, na.action = na.omit)\n\n\n    Geary C test under randomisation\n\ndata:  thailand_2021$total_trafficking_cases \nweights: rswm_q_tr  \nn reduced by no-neighbour observations \n\nGeary C statistic standard deviate = 2.3998, p-value = 0.008202\nalternative hypothesis: Expectation greater than statistic\nsample estimates:\nGeary C statistic       Expectation          Variance \n       0.73939266        1.00000000        0.01179295 \n\nset.seed(1234)\nbperm_tr &lt;- geary.mc(thailand_2021$total_trafficking_cases, \n                listw=rswm_q_tr, \n                nsim=999, zero.policy = TRUE, na.action = na.omit)\nbperm_tr\n\n\n    Monte-Carlo simulation of Geary C\n\ndata:  thailand_2021$total_trafficking_cases \nweights: rswm_q_tr  \nnumber of simulations + 1: 1000 \n\nstatistic = 0.73939, observed rank = 20, p-value = 0.02\nalternative hypothesis: greater\n\nhist(bperm_use$res, main = \"Global Geary's C Simulation Results for drug_trafficking\", xlab=\"Monte-Carlo Results\", ylab=\"Frequency\") \nabline(v = bperm_tr$statistic, col = \"purple4\")\n\n\n\n\n\n\n\n\nWhen Geary’s C is run on the drug_trafficking statistics:\n\nThe result yielded is approximately 0.74, which is lower than the expected value of 1.0. It is also lower than the Geary’s C for the drug use data, which indicates that the clustering of drug trafficking hotspots is stronger than that for drug use.\nWith a standard deviation of 2.40 and p-value of 0.008 &lt; 0.05 for a 95% confidence level, the test result is statistically significant. If we were to only run the test once, we should be able to reject the null hypothesis of a lack of spatial autocorrelation.\nNow, running 1000 permutations yielded a similar Geary’s C observation of 0.73939 and a p-value of 0.02 &lt; 0.05 at the 95% confidence level. Even though the p-value is uncomfortably close to the threshold, we can still conclude that our derived Geary’s C for our drug trafficking data is statistically significant.\n\nHence, the Geary’s C measure on drug trafficking cases in 2021 indicates mild positive spatial autocorrelation, albeit stronger than that observed on our drug use statistics."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.7-deriving-local-measures-of-spatial-autocorrelation",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.7-deriving-local-measures-of-spatial-autocorrelation",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.7 Deriving Local Measures of Spatial Autocorrelation",
    "text": "TH2.7 Deriving Local Measures of Spatial Autocorrelation\nBoth Global Moran’s I and Geary’s C only return a surface observation on how Thailand’s drug crime is distributed by province. To identify where the clusters are located, we need to use local indicators of spatial association (LISA), which indicate the extent of spatial clustering around each observation (Anselin, 1995) (Khant, 2024).\nAn example of a LISA is local Moran’s I, which is essentially Moran’s I calculated for each geographical subdivision, in this case the provinces of Thailand. However, with these localised measures, we are able to visualise our findings on a choropleth map, and from there, identify the locations of noteworthy clusters.\nAs before, we will derive the local Moran’s I statistics for both our drug trafficking and drug use data. The localmoran() function use here returns a matrix whose columns mean the following (Kam, 2022):\n\nIi: the local Moran’s I statistics\nE.Ii: the expectation of the local Moran’s I statistics under the randomisation hypothesis\nVar.Ii: the variance of the local Moran’s I statistics under the randomisation hypothesis\nZ.Ii:the standard deviation, and\nPr(): the p-value.\n\n\nlocal_MI_use &lt;- localmoran(thailand_2021$total_use_cases, rswm_q_use)\nlocal_MI_trafficking &lt;- localmoran(thailand_2021$total_trafficking_cases, rswm_q_tr)\n\n# Bind local Moran's I to the Thailand dataset\nthailand_2021_use.localMI &lt;- cbind(thailand_2021, local_MI_use) %&gt;% rename(Pr.Ii = Pr.z....E.Ii..)\nthailand_2021_trafficking.localMI &lt;- cbind(thailand_2021, local_MI_trafficking) %&gt;% rename(Pr.Ii = Pr.z....E.Ii..)\n\nWe can then proceed to map the local Moran’s I statistics and p-values. The colour palette used for mapping local Moran’s I p-values (Khant, 2024) helps us easily identify statistically significant results, once again for a 95% confidence interval.\n\nTH2.7.1 Mapping Local Moran’s I statistics for drug_use cases\n\nuse.localMI.map &lt;- tm_shape(thailand_2021_use.localMI) + tm_fill(col = \"Ii\", style = \"pretty\", title = \"drug_use local Moran\") + tm_borders(alpha = 0.5)\nuse.pv.map &lt;- tm_shape(thailand_2021_use.localMI) + tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=c(\"#b7dce9\",\"#c9e3d2\",\"#f5f3a6\",\"#ec9a64\",\"#d21b1c\"), \n          title = \"drug_use p-values\") +\n  tm_borders(alpha = 0.5)\ntmap_arrange(use.localMI.map, use.pv.map, asp = 1, ncol = 2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThere are statistcally significant instances of dissimilar clustering toward the south in Krabi and Phattalung provinces, and a handful towards the central and north. With p-values of 0.1 or more, the local Moran’s I values for the rest of the country cannot be considered to be statistically significant. This is a surprising result for our drug_use data.\n\n\nTH2.7.2 Mapping Local Moran’s I statistics for drug_trafficking cases\n\ntr.localMI.map &lt;- tm_shape(thailand_2021_trafficking.localMI) + tm_fill(col = \"Ii\", style = \"pretty\", title = \"drug_trafficking local Moran\") + tm_borders(alpha = 0.5)\ntr.pv.map &lt;- tm_shape(thailand_2021_trafficking.localMI) + tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=c(\"#b7dce9\",\"#c9e3d2\",\"#f5f3a6\",\"#ec9a64\",\"#d21b1c\"), \n          title = \"drug_trafficking p-values\") +\n  tm_borders(alpha = 0.5)\ntmap_arrange(tr.localMI.map, tr.pv.map, asp = 1, ncol = 2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nAnd likewise for our drug_trafficking statistics. The only statistically significant observation that confirms the hypothesis is Chiang Rai province up north, and Si Sa Ket, the western neighbour of Ubon Ratchathani province, to the east.\n\n\nTH2.7.3 Performing Local Moran’s I Monte Carlo test for drug_use cases\nJust like with global Moran’s I, we can also perform a Monte Carlo permutation test for local Moran’s I, and hopefully return a more realistic result.\n\nlocal_MI_use &lt;- localmoran_perm(thailand_2021$total_use_cases, rswm_q_use, nsim = 999)\nlocal_MI_trafficking &lt;- localmoran_perm(thailand_2021$total_trafficking_cases, rswm_q_tr, nsim = 999)\n\n# Bind local Moran's I permutation to the Thailand dataset\nthailand_2021_use.localMI &lt;- cbind(thailand_2021, local_MI_use) %&gt;% rename(Pr.Ii = Pr.z....E.Ii..)\nthailand_2021_trafficking.localMI &lt;- cbind(thailand_2021, local_MI_trafficking) %&gt;% rename(Pr.Ii = Pr.z....E.Ii..)\n\n\nuse.localMI.map &lt;- tm_shape(thailand_2021_use.localMI) + tm_fill(col = \"Ii\", style = \"pretty\", title = \"drug_use local Moran\") + tm_borders(alpha = 0.5)\nuse.pv.map &lt;- tm_shape(thailand_2021_use.localMI) + tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=c(\"#b7dce9\",\"#c9e3d2\",\"#f5f3a6\",\"#ec9a64\",\"#d21b1c\"), \n          title = \"drug_use p-values\") +\n  tm_borders(alpha = 0.5)\ntmap_arrange(use.localMI.map, use.pv.map, asp = 1, ncol = 2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\n\n\nTH2.7.4 Performing Local Moran’s I Monte Carlo test for drug_trafficking cases\n\ntr.localMI.map &lt;- tm_shape(thailand_2021_trafficking.localMI) + tm_fill(col = \"Ii\", style = \"pretty\", title = \"drug_trafficking local Moran\") + tm_borders(alpha = 0.5)\ntr.pv.map &lt;- tm_shape(thailand_2021_trafficking.localMI) + tm_fill(col = \"Pr.Ii\", \n          breaks=c(-Inf, 0.001, 0.01, 0.05, 0.1, Inf),\n          palette=c(\"#b7dce9\",\"#c9e3d2\",\"#f5f3a6\",\"#ec9a64\",\"#d21b1c\"), \n          title = \"drug_trafficking p-values\") +\n  tm_borders(alpha = 0.5)\ntmap_arrange(tr.localMI.map, tr.pv.map, asp = 1, ncol = 2)\n\nVariable(s) \"Ii\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nJust like last time, the only statistically significant areas to confirm the hypothesis are Chiang Rai and Si Sa Ket.\nEven after 999 simulations, we get results with p-values exceeding 0.05 for a 95% confidence interval, rendering the local Moran’s I values generated to be inconclusive."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.7.5-drawing-local-morans-i-scatterplots",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.7.5-drawing-local-morans-i-scatterplots",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.7.5 Drawing local Moran’s I scatterplots",
    "text": "TH2.7.5 Drawing local Moran’s I scatterplots\nThe local Moran’s I scatterplot illustrates the relationship between the drug use and trafficking statistics at each location, and the average values at neighbouring locations. It returns a plot with four quardrants which should be interested as shown in the image below (Kam, 2022).\nInterpretation of Local Moran’s I scatterplot\n\nnci_use &lt;- moran.plot(thailand_2021_use$total_use_cases, rswm_q_use, labels = thailand_2021_use$ADM1_EN, xlab = \"total_use_cases\", ylab = \"Spatially lagged total_use_cases\")\n\n\n\n\n\n\n\nnci_tr &lt;- moran.plot(thailand_2021_trafficking$total_trafficking_cases, rswm_q_tr, labels = thailand_2021_trafficking$ADM1_EN, xlab = \"total_trafficking_cases\", ylab = \"Spatially lagged total_trafficking_cases\")\n\n\n\n\n\n\n\n\nIn terms of drug usage, notable high outliers among low neighbours are Chiang Mai, Bangkok and Phuket, whereas a notable low outlier among high neighbours is Samut Prakan, which is Bangkok’s southeastern neighbour.\nIn terms of drug trafficking, a notable low outlier among high neighbours is Mae Hong Song, on the eastern border with Myanmar and within the Golden Triangle. Major provinces within the Triangle - namely Chiang Rai and Chiang Mai - are considered to be clustered with neighbours also seeing high trafficking.\n\nTH2.7.6 Creating LISA cluster map\nThe above information can also be plotted onto a map colourcoded by the type of spatial autocorrelation. The code chunks below create our LISA maps from our local Moran’s I statistics, and plots the resulting quadrant map along with their corresponding quantile-classified basemaps.\n\nTH2.7.6.1 LISA cluster map for drug use data\n\nquadrant &lt;- vector(mode = \"numeric\", length = nrow(local_MI_use))\nthailand_2021_use$lag_total_use &lt;- lag.listw(rswm_q_use, thailand_2021_use$total_use_cases)\nDV &lt;- thailand_2021_use$lag_total_use - mean(thailand_2021_use$lag_total_use)\nLM_I &lt;- local_MI_use[,1] - mean(local_MI_use[,1])\nsignif &lt;- 0.05\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[local_MI_use[,5]&gt;signif] &lt;- 0\nthailand_2021_use.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\n\nuse_LISA &lt;- tm_shape(thailand_2021_use.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\ntmap_arrange(use_LISA, use_map)\n\n\n\n\n\n\n\n\n\n\nTH2.7.6.2 LISA cluster map for drug trafficking data\n\nquadrant &lt;- vector(mode = \"numeric\", length = nrow(local_MI_trafficking))\nthailand_2021_trafficking$lag_total_trafficking &lt;- lag.listw(rswm_q_use, thailand_2021_trafficking$total_trafficking_cases)\nDV &lt;- thailand_2021_trafficking$lag_total_trafficking - mean(thailand_2021_trafficking$lag_total_trafficking)\nLM_I &lt;- local_MI_trafficking[,1] - mean(local_MI_trafficking[,1])\nsignif &lt;- 0.05\nquadrant[DV &lt;0 & LM_I&gt;0] &lt;- 1\nquadrant[DV &gt;0 & LM_I&lt;0] &lt;- 2\nquadrant[DV &lt;0 & LM_I&lt;0] &lt;- 3  \nquadrant[DV &gt;0 & LM_I&gt;0] &lt;- 4    \nquadrant[local_MI_trafficking[,5]&gt;signif] &lt;- 0\nthailand_2021_trafficking.localMI$quadrant &lt;- quadrant\ncolors &lt;- c(\"#ffffff\", \"#2c7bb6\", \"#abd9e9\", \"#fdae61\", \"#d7191c\")\nclusters &lt;- c(\"insignificant\", \"low-low\", \"low-high\", \"high-low\", \"high-high\")\n\n\ntr_LISA &lt;- tm_shape(thailand_2021_trafficking.localMI) +\n  tm_fill(col = \"quadrant\", \n          style = \"cat\", \n          palette = colors[c(sort(unique(quadrant)))+1], \n          labels = clusters[c(sort(unique(quadrant)))+1],\n          popup.vars = c(\"\")) +\n  tm_view(set.zoom.limits = c(11,17)) +\n  tm_borders(alpha=0.5)\ntmap_arrange(tr_LISA, trafficking_map)"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.8-using-local-gi-statistics-to-perform-hot-and-cold-spot-analysis",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.8-using-local-gi-statistics-to-perform-hot-and-cold-spot-analysis",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.8 Using Local Gi* statistics to perform hot and cold spot analysis",
    "text": "TH2.8 Using Local Gi* statistics to perform hot and cold spot analysis\nWe need more local indicators to determine the extent of clustering in our drug crime data. Another method we can use is creating Gertis and Ord’s G-statistics. One of the earliest LISAs (Khant, 2024), they seek to determine the locations of clusters of high and low values - in our case, clusters of provinces with high incidences of drug trafficking, and clusters of those with low incidences of such. These scores are typically reported as z-scores, where positive values indicate a high-high cluster, and negative values indicate a low-low cluster.\nThe analysis consists of three steps:\n\nDeriving the spatial weight matrix,\nComputing the Gi statistics\nMapping the Gi statistics\n\n\nTH2.8.1 drug_use dataset\n\nTH2.8.1.1 Deriving distance-based weight matrices\nFirst, we define an adaptive distance-based weight matrix. We will do this by creating centroids - points associated with each polygon - by extracting longitudes and latitudes. This is done by mapping the st_centroid() function to each polygon in our dataset.\n\n# drug_use data\nlongitude &lt;- map_dbl(thailand_2021_use$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(thailand_2021_use$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\n# Determine cutoff distance\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   51.92   64.33   63.24   76.77  110.94 \n\n# Compute fixed-distance weight matrix\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 80 \nPercentage nonzero weights: 1.3493 \nAverage number of links: 1.038961 \n42 regions with no links:\n13 14 18 19 20 21 22 23 25 27 28 29 31 33 35 36 37 38 39 40 42 44 45 46\n47 48 49 50 51 52 53 54 55 57 63 64 65 66 67 68 71 72\n49 disjoint connected subgraphs\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B', zero.policy = TRUE)\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 80 \nPercentage nonzero weights: 1.3493 \nAverage number of links: 1.038961 \n42 regions with no links:\n13 14 18 19 20 21 22 23 25 27 28 29 31 33 35 36 37 38 39 40 42 44 45 46\n47 48 49 50 51 52 53 54 55 57 63 64 65 66 67 68 71 72\n49 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6 \n42 16  6  5  4  3  1 \n16 least connected regions:\n7 12 26 30 32 34 41 43 56 62 69 70 73 74 75 77 with 1 link\n1 most connected region:\n3 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn S0  S1   S2\nB 35 1225 80 160 1040\n\n\n\n\nTH2.8.1.2 Computing adaptive distance weight matrix\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 616 \nPercentage nonzero weights: 10.38961 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n77 \n77 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 with 8 links\n77 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 77 5929 616 1088 20466\n\n\n\n\nTH2.8.1.3 Computing Gi statistics\n\ngi &lt;- localG(thailand_2021_use$total_use_cases, knn_lw)\nthailand_2021_use.gi &lt;- cbind(thailand_2021_use, as.matrix(gi)) %&gt;% rename(gstat_adaptive = as.matrix.gi.)\n\n\n\nTH2.8.1.4 Plotting drug_use Gi statistics on map\n\ngi_map &lt;- tm_shape(thailand_2021_use.gi) + tm_fill(col = \"gstat_adaptive\", breaks=c(-3, -2, -1.96, -1.65, -1, 0, 1, 1.65, 1.96, 2, 3), palette = \"-RdBu\", title = \"drug_use local Gi\") + tm_borders(alpha = 0.5)\ntmap_arrange(use_map, gi_map)\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThere is one large cold spot to the northwest of the map towards the border with Myanmar, but as far as hot spots are concerned, the best candidate for that is located in the east, towards the border with Cambodia and Laos, and appears lukewarm. Most of that area is only suggestive of a hotspot at a 90% confidence interval, with only 3 provinces - Maha-Sarakham, Amnat-Charoen and Surin - showing strong evidence of a hotspot at a 95% confidence interval.\n\n\n\nTH2.8.2 drug_trafficking dataset\nWe can repeat the entire process again with our drug_trafficking dataset.\n\nTH2.8.2.1 Deriving distance-based weight matrices\n\n# drug_trafficking data\nlongitude &lt;- map_dbl(thailand_2021_trafficking$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(thailand_2021_trafficking$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\n# Determine cutoff distance\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   51.92   64.33   63.24   76.77  110.94 \n\n# Compute fixed-distance weight matrix\nwm_d62 &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 80 \nPercentage nonzero weights: 1.3493 \nAverage number of links: 1.038961 \n42 regions with no links:\n13 14 18 19 20 21 22 23 25 27 28 29 31 33 35 36 37 38 39 40 42 44 45 46\n47 48 49 50 51 52 53 54 55 57 63 64 65 66 67 68 71 72\n49 disjoint connected subgraphs\n\nwm62_lw &lt;- nb2listw(wm_d62, style = 'B', zero.policy = TRUE)\nsummary(wm62_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 80 \nPercentage nonzero weights: 1.3493 \nAverage number of links: 1.038961 \n42 regions with no links:\n13 14 18 19 20 21 22 23 25 27 28 29 31 33 35 36 37 38 39 40 42 44 45 46\n47 48 49 50 51 52 53 54 55 57 63 64 65 66 67 68 71 72\n49 disjoint connected subgraphs\nLink number distribution:\n\n 0  1  2  3  4  5  6 \n42 16  6  5  4  3  1 \n16 least connected regions:\n7 12 26 30 32 34 41 43 56 62 69 70 73 74 75 77 with 1 link\n1 most connected region:\n3 with 6 links\n\nWeights style: B \nWeights constants summary:\n   n   nn S0  S1   S2\nB 35 1225 80 160 1040\n\n\n\n\nTH2.8.2.2 Computing adaptive distance weight matrix\n\nknn &lt;- knn2nb(knearneigh(coords, k=8))\nknn_lw &lt;- nb2listw(knn, style = 'B')\nsummary(knn_lw)\n\nCharacteristics of weights list object:\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 616 \nPercentage nonzero weights: 10.38961 \nAverage number of links: 8 \nNon-symmetric neighbours list\nLink number distribution:\n\n 8 \n77 \n77 least connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 with 8 links\n77 most connected regions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 with 8 links\n\nWeights style: B \nWeights constants summary:\n   n   nn  S0   S1    S2\nB 77 5929 616 1088 20466\n\n\n\n\nTH2.8.2.3 Computing Gi statistics\n\ngi &lt;- localG(thailand_2021_trafficking$total_trafficking_cases, knn_lw)\nthailand_2021_trafficking.gi &lt;- cbind(thailand_2021_trafficking, as.matrix(gi)) %&gt;% rename(gstat_adaptive = as.matrix.gi.)\n\n\n\nTH2.8.2.4 Plotting drug_use Gi statistics on map\n\ngi_map &lt;- tm_shape(thailand_2021_trafficking.gi) + tm_fill(col = \"gstat_adaptive\", breaks=c(-3, -2, -1.96, -1.65, -1, 0, 1, 1.65, 1.96, 2, 3), palette = \"-RdBu\", title = \"drug_trafficking local Gi\") + tm_borders(alpha = 0.5)\ntmap_arrange(use_map, gi_map)\n\nWarning: Values have found that are higher than the highest break\n\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\nWarning: Values have found that are higher than the highest break\n\n\nVariable(s) \"gstat_adaptive\" contains positive and negative values, so midpoint is set to 0. Set midpoint = NA to show the full spectrum of the color palette.\n\n\n\n\n\n\n\n\n\nThere are no visible cold spots for our drug trafficking data, but there is one suggestive hot spot around Chiang Mai and Chiang Rai to the north (with only Chiang Rai showing a strong possibility), and three statistically significant clusters to the east."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.8.1-deriving-distance-based-weight-matrix",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.8.1-deriving-distance-based-weight-matrix",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.8.1 Deriving distance-based weight matrix",
    "text": "TH2.8.1 Deriving distance-based weight matrix"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.8.1-deriving-distance-based-weight-matrices",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.8.1-deriving-distance-based-weight-matrices",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.8.1 Deriving distance-based weight matrices",
    "text": "TH2.8.1 Deriving distance-based weight matrices\nFirst, we define an adaptive distance-based weight matrix. We will do this by creating centroids - points associated with each polygon - by extracting longitudes and latitudes. This is done by mapping the st_centroid() function to each polygon in our dataset.\n\n# drug_use data\nlongitude &lt;- map_dbl(thailand_2021_use$geometry, ~st_centroid(.x)[[1]])\nlatitude &lt;- map_dbl(thailand_2021_use$geometry, ~st_centroid(.x)[[2]])\ncoords &lt;- cbind(longitude, latitude)\n# Determine cutoff distance\nk1 &lt;- knn2nb(knearneigh(coords))\nk1dists &lt;- unlist(nbdists(k1, coords, longlat = TRUE))\nsummary(k1dists)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n  21.55   51.92   64.33   63.24   76.77  110.94 \n\n# Compute fixed-distance weight matrix\nwm_d62_use &lt;- dnearneigh(coords, 0, 62, longlat = TRUE)\nwm_d62_use\n\nNeighbour list object:\nNumber of regions: 77 \nNumber of nonzero links: 80 \nPercentage nonzero weights: 1.3493 \nAverage number of links: 1.038961 \n42 regions with no links:\n13 14 18 19 20 21 22 23 25 27 28 29 31 33 35 36 37 38 39 40 42 44 45 46\n47 48 49 50 51 52 53 54 55 57 63 64 65 66 67 68 71 72\n49 disjoint connected subgraphs"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.9-emerging-hotspot-analysis",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.9-emerging-hotspot-analysis",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.9 Emerging Hotspot Analysis",
    "text": "TH2.9 Emerging Hotspot Analysis\nSince we have spatial-temporal data, we are able to perform emerging hotspot analysis, which will help us evaluate how the hot and cold spots in both our datasets have changed over time. It combines the Getis-Ord Gi* statistic with the Man-Kendall test, which is used to assess the direction and statistical significance of a set of data values.\n\nTH2.9.1 Data wrangling for EHSA\nWe need to perform the following checks to ensure our data meets the prerequisites:\n\nThe data is not collected seasonally (it was collected yearly)\nOne point per time period (each time period contains the number of drug use cases and trafficking cases only)\nData does not have covariates (as Ho (2024) rightly points out, while factors such as human population and unemployment rate can affect the number of drug offence cases, we have to work within our limitations in many data science tasks including this one).\n\nOur data fulfills all three requirements, so we can proceed to create a new summary table containing the total number of drug use and trafficking cases each year for each province.\n\nthailand_esa_drug &lt;- thailand_drug %&gt;%\n  filter(types_of_drug_offenses %in% c(\"drug_use_cases\", \"trafficking_cases\")) %&gt;%\n  group_by(province_en, fiscal_year) %&gt;%\n  summarise(total_use_cases = sum(no_cases[types_of_drug_offenses == \"drug_use_cases\"]),\n            total_trafficking_cases = sum(no_cases[types_of_drug_offenses == \"trafficking_cases\"])) %&gt;%\n  ungroup() %&gt;%\n  rename('ADM1_EN' = 'province_en')\n\n`summarise()` has grouped output by 'province_en'. You can override using the\n`.groups` argument.\n\nthailand_esa_drug\n\n# A tibble: 462 × 4\n   ADM1_EN       fiscal_year total_use_cases total_trafficking_cases\n   &lt;chr&gt;               &lt;dbl&gt;           &lt;dbl&gt;                   &lt;dbl&gt;\n 1 Amnat Charoen        2017            1734                     211\n 2 Amnat Charoen        2018            2038                     143\n 3 Amnat Charoen        2019            2642                     212\n 4 Amnat Charoen        2020             843                     165\n 5 Amnat Charoen        2021            3012                     164\n 6 Amnat Charoen        2022            1426                      75\n 7 Ang Thong            2017             208                      51\n 8 Ang Thong            2018             660                      61\n 9 Ang Thong            2019             657                      56\n10 Ang Thong            2020             423                      46\n# ℹ 452 more rows\n\n\nWith our data prepared, we can create a spacetime object using the spacetime() function from the sfdep package, with the following as input:\n\nData: thailand_esa_drug\nGeometry: thailand\nLocation identifier: ADM1_EN (from both thailand_esa_drug and thailand)\nTime column: fiscal_year\n\n\nthailand_drug_spt &lt;- spacetime(thailand_esa_drug, thailand, .loc_col = \"ADM1_EN\", .time_col = \"fiscal_year\", active = \"data\")\nis_spacetime_cube(thailand_drug_spt)\n\n[1] TRUE\n\n\n\n\nTH2.9.2 Performing EHSA\nWe can now perform EHSA analysis using emerging_hotspot_analysis() from the sfdep package. It takes a spacetime object and the name of the variable of interest (.var).\n\nthailand_ehsa_use &lt;- emerging_hotspot_analysis(x = thailand_drug_spt, .var = \"total_use_cases\", k = 1, nsim = 99)\nthailand_ehsa_tr &lt;- emerging_hotspot_analysis(x = thailand_drug_spt, .var = \"total_trafficking_cases\", k = 1, nsim = 99)\n\n\nthailand_ehsa_use &lt;- thailand %&gt;% left_join(thailand_ehsa_use, by = join_by(ADM1_EN == location))\nthailand_ehsa_tr &lt;- thailand %&gt;% left_join(thailand_ehsa_tr, by = join_by(ADM1_EN == location))\n\n\n\nTH2.9.3 Visualising Distribution of EHSA classes\nThe following bar chart reveals the distribution of different EHSA classes per province for both classes of drug offence.\n\nggplot(data = thailand_ehsa_use, aes(y = classification, fill = classification)) + geom_bar(show.legend = FALSE) + labs(title = \"EHSA for drug_use\")\n\n\n\n\n\n\n\nggplot(data = thailand_ehsa_tr, aes(y = classification, fill = classification)) + geom_bar(show.legend = FALSE) + labs(title = \"EHSA for drug_trafficking\")\n\n\n\n\n\n\n\n\nBased on the plots, thre are a total of 6 distinct hotspot and coldspot classes across both classes of drug offence. However, only the drug_use statistics returned at least one oscilating hotspot, which suggests periodic fluctuations in drug use statistics.\nJust as we discovered in the spatial autocorrelation findings from earlier, EHSA on our drug_use statistics returned 20 instances of sporadic coldspots - the highest among provinces where patterns were detected. However, in both instances, more than half of the provinces of Thailand did not feature any pattern.\nTo check how the findings change when only statistically significant cases are included, we need to isolate only those EHSA classes with p &lt; 0.05 for a 95% confidence interval:\n\nthailand_ehsa_use_sig &lt;- thailand_ehsa_use %&gt;% filter(p_value &lt; 0.05)\nthailand_ehsa_tr_sig &lt;- thailand_ehsa_tr %&gt;% filter(p_value &lt; 0.05)\n\nggplot(data = thailand_ehsa_use_sig, aes(y = classification, fill = classification)) + geom_bar(show.legend = FALSE) + labs(title = \"EHSA for drug_use with p &lt; 0.05\")\n\n\n\n\n\n\n\nggplot(data = thailand_ehsa_tr_sig, aes(y = classification, fill = classification)) + geom_bar(show.legend = FALSE) + labs(title = \"EHSA for drug_trafficking with p &lt; 0.05\")\n\n\n\n\n\n\n\n\nNo statistically significant drug_use EHSA classifications were returned, while there were no new statistically significant hotspots from our drug_trafficking EHSA classifications.\nWe can try a 90% confidence interval instead for our drug_use EHSA classifications:\n\nthailand_ehsa_use_sig &lt;- thailand_ehsa_use %&gt;% filter(p_value &lt; 0.1)\nggplot(data = thailand_ehsa_use_sig, aes(y = classification, fill = classification)) + geom_bar(show.legend = FALSE) + labs(title = \"EHSA for drug_use with p &lt; 0.1\")\n\n\n\n\n\n\n\n\nIf we increased our threshold to 0.1 from 0.05, we are able to detect 1 statistically significant oscilating hotspot.\n\n\nTH2.9.4 Visualising EHSA Maps\nFor this section, we will assume a 95% confidence interval for our drug_trafficking statistics, and ignore statistical significance for our drug_use statistics.\nThe relevant filter() and tmap functions can be used to create maps that will help us identify the geographic distribution of hotspots and coldspots in our study area.\n\nthailand_ehsa_use_hot &lt;- thailand_ehsa_use %&gt;% filter(classification %in% c(\"consecutive hotspot\",\"new hotspot\",\"oscilating hotspot\",\"sporadic hotspot\"))\nthailand_ehsa_use_cold &lt;- thailand_ehsa_use %&gt;% filter(classification %in% c(\"consecutive coldspot\",\"oscilating coldspot\",\"sporadic coldspot\",\"new coldspot\"))\n\nthailand_ehsa_tr_sig_hot &lt;- thailand_ehsa_tr_sig %&gt;% filter(classification %in% c(\"consecutive hotspot\",\"new hotspot\",\"oscilating hotspot\",\"sporadic hotspot\"))\nthailand_ehsa_tr_sig_cold &lt;- thailand_ehsa_tr_sig %&gt;% filter(classification %in% c(\"consecutive coldspot\",\"oscilating coldspot\",\"sporadic coldspot\",\"new coldspot\"))\n\n\nhot_map &lt;- tm_shape(thailand_ehsa_use)+\n  tm_polygons()+\n  tm_borders(alpha = 0.6)+\ntm_shape(thailand_ehsa_use_hot)+\n  tm_fill(\"classification\", \n          palette = c(\"#de573e\",\"#f67774\",\"#f8b675\",\"#f8d673\"),\n          title = \"classification\",\n          midpoint = 0) +\n  tm_borders(alpha = 0.6)+\n  tm_layout(main.title = \"drug_use hotspots in Thailand\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\ncold_map &lt;- tm_shape(thailand_ehsa_use)+\n  tm_polygons()+\n  tm_borders(alpha = 0.6)+\ntm_shape(thailand_ehsa_use_cold)+\n  tm_fill(\"classification\", \n          palette = c(\"#57bfc0\",\"#b977cb\",\"#7977f3\"),\n          title = \"classification\",\n          midpoint = 0) +\n  tm_borders(alpha = 0.6)+\n  tm_layout(main.title = \"drug_use coldspots in Thailand\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\n\ntmap_arrange(hot_map, cold_map, asp = 1, ncol = 2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.80, 0.61. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\n\n\n\n\n\n\n\n\nhot_map &lt;- tm_shape(thailand_ehsa_tr)+\n  tm_polygons()+\n  tm_borders(alpha = 0.6)+\ntm_shape(thailand_ehsa_tr_sig_hot)+\n  tm_fill(\"classification\", \n          palette = c(\"#de573e\",\"#f67774\",\"#f8b675\",\"#f8d673\"),\n          title = \"classification\",\n          midpoint = 0) +\n  tm_borders(alpha = 0.6)+\n  tm_layout(main.title = \"drug_trafficking hotspots in Thailand\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\ncold_map &lt;- tm_shape(thailand_ehsa_tr)+\n  tm_polygons()+\n  tm_borders(alpha = 0.6)+\ntm_shape(thailand_ehsa_tr_sig_cold)+\n  tm_fill(\"classification\", \n          palette = c(\"#57bfc0\",\"#b977cb\",\"#7977f3\"),\n          title = \"classification\",\n          midpoint = 0) +\n  tm_borders(alpha = 0.6)+\n  tm_layout(main.title = \"drug_trafficking coldspots in Thailand\",\n            main.title.position = \"center\",\n            main.title.size = 1,\n            legend.title.size = 1.8,\n            legend.text.size = 1.3,\n            frame = TRUE) +\n  tm_borders(alpha = 0.5)\n\n\ntmap_arrange(hot_map, cold_map, asp = 1, ncol = 2)\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.54, 0.64. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger.\n\n\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\nWarning: One tm layer group has duplicated layer types, which are omitted. To\ndraw multiple layers of the same type, use multiple layer groups (i.e. specify\ntm_shape prior to each of them).\n\n\nLegend labels were too wide. The labels have been resized to 0.51, 0.80. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger."
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.10-local-gi-and-mann-kendall-tests",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.10-local-gi-and-mann-kendall-tests",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.10 Local Gi* and Mann-Kendall Tests",
    "text": "TH2.10 Local Gi* and Mann-Kendall Tests\nEmerging hotspot analysis combines local Gi* statistics with the Mann-Kendall test.\nTo calculate spatial-temporal local Gi*, we can use the original spacetime cube we created and the following code chunks.\n\nthailand_drug_nb &lt;- thailand_drug_spt %&gt;%\n  activate(\"geometry\") %&gt;%\n  mutate(nb = include_self(st_contiguity(geometry)),\n         wt = st_inverse_distance(nb, geometry,\n                                  scale = 1,\n                                  alpha = 1),\n         .before = 1) %&gt;%\n    set_nbs(\"nb\") %&gt;%\n    set_wts(\"wt\")\n\n! Polygon provided. Using point on surface.\n\n\nWarning: There was 1 warning in `stopifnot()`.\nℹ In argument: `wt = st_inverse_distance(nb, geometry, scale = 1, alpha = 1)`.\nCaused by warning in `st_point_on_surface.sfc()`:\n! st_point_on_surface may not give correct results for longitude/latitude data\n\nhead(thailand_drug_nb)\n\nspacetime ────\n\n\nContext:`data`\n\n\n77 locations `ADM1_EN`\n\n\n6 time periods `fiscal_year`\n\n\n── data context ────────────────────────────────────────────────────────────────\n\n\n# A tibble: 6 × 6\n  ADM1_EN         fiscal_year total_use_cases total_trafficking_ca…¹ nb    wt   \n  &lt;chr&gt;                 &lt;dbl&gt;           &lt;dbl&gt;                  &lt;dbl&gt; &lt;lis&gt; &lt;lis&gt;\n1 Bangkok                2017           11871                    950 &lt;int&gt; &lt;dbl&gt;\n2 Samut Prakan           2017             820                    201 &lt;int&gt; &lt;dbl&gt;\n3 Nonthaburi             2017             553                    118 &lt;int&gt; &lt;dbl&gt;\n4 Pathum Thani           2017             450                     83 &lt;int&gt; &lt;dbl&gt;\n5 Phra Nakhon Si…        2017             378                    164 &lt;int&gt; &lt;dbl&gt;\n6 Ang Thong              2017             208                     51 &lt;int&gt; &lt;dbl&gt;\n# ℹ abbreviated name: ¹​total_trafficking_cases"
  },
  {
    "objectID": "TakeHome/TakeHome2/take-home-2.html#th2.11-conclusion",
    "href": "TakeHome/TakeHome2/take-home-2.html#th2.11-conclusion",
    "title": "TH2: Application of Geospatial Analysis Methods to Discover Thailand Drug Abuse at the Province Level",
    "section": "TH2.11 Conclusion",
    "text": "TH2.11 Conclusion"
  }
]