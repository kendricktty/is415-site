---
title: "CE8: Spatially Constrained Clustering Analysis"
subtitle: "In-class Exercise 8"
author: "Kendrick Teo"
date: "2024-10-21"
date-modified: "last-modified"

execute: 
  eval: true
  echo: true
  freeze: true
---

## CE8.1 Loading R Packages

```{r}
pacman::p_load(spdep, sp, tmap, sf, ClustGeo, cluster, factoextra, NbClust, tidyverse, GGally)
```

## CE8.2 Importing the data

```{r}
shan_sf <- read_rds("data/rds/shan_sf.rds")
shan_ict <- read_rds("data/rds/shan_ict.rds")
shan_sf_cluster <- read_rds("data/rds/shan_sf_cluster.rds")
```

## CE8.3 Conventional Hierarchical Clustering

```{r}
proxmat <- dist(shan_ict, method = 'euclidean')
hclust_ward <- hclust(proxmat, method = 'ward.D')
groups <- as.factor(cutree(hclust_ward, k = 6))
```

## CE8.4 Append to geospatial data
```{r}
shan_sf_cluster <- cbind(shan_sf, as.matrix(groups)) %>%
  rename(`CLUSTER` = `as.matrix.groups.`) %>% # Tidy your data
  select(-c(3:4, 7:9)) %>%
  rename(TS = TS.x)
```

## CE8.5 Create clustering dendogram

```{r}
plot(hclust_ward, cex = 0.6)
rect.hclust(hclust_ward, k = 6, border = 2:5)
```

## CE8.6 Cluster map

```{r}
qtm(shan_sf_cluster, "CLUSTER")
```

## CE8.7 ClustGeo Method

```{r}
shan.nb <- poly2nb(shan_sf) # new versions of the function can directly take in an sf object; conversion to sp is no longer necessary
summary(shan.nb)

dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)
```

## CE8.8 Visualise the neighbours

```{r}
plot(st_geometry(shan_sf), border = grey(.5))
pts <- st_coordinates(st_centroid(shan_sf))
plot(shan.nb, pts, col = "blue", add = TRUE)
```

## CE8.9 Compute minimum spanning tree

```{r}
lcosts <- nbcosts(shan.nb, shan_ict)
```

## CE8.10 Incorporating costs into weights object

```{r}
shan.w <- nb2listw(shan.nb, lcosts, style = "B")
summary(shan.w)
```

## CE8.11 Create minimum spanning tree

```{r}
shan.mst <- mstree(shan.w)
```

## CE8.12 Visualise minimum spanning tree

```{r}
plot(st_geometry(shan_sf), border=gray(.5))
plot.mst(shan.mst, pts, col = "blue", cex.lab = 0.7, cex.circles = 0.005, add = TRUE)
```

## CE8.13 Clustering using SKATER method

```{r}
skater.clust6 <- skater(edges = shan.mst[,1:2], data = shan_ict, method = "euclidean", ncuts = 5)
```

## CE8.14 Plot SKATER tree

```{r}
plot(st_geometry(shan_sf), border = gray(.5))

plot(skater.clust6, pts, cex.lab = .7, groups.colors=c("red", "orange", "green2", "skyblue", "purple"), cex.circles = 0.005, add = TRUE)
```

## CE8.15 Mapping SKATER clusters

```{r}
groups_mat <- as.matrix(skater.clust6$groups)
shan_sf_spatialcluster <- cbind(shan_sf_cluster, as.factor(groups_mat)) %>%
  rename(`skater_CLUSTER` = `as.factor.groups_mat.`)
qtm(shan_sf_spatialcluster, "skater_CLUSTER")
```

## CE8.16 ClustGeo method

```{r}
# Compute spatial distance matrix
dist <- st_distance(shan_sf, shan_sf)
distmat <- as.dist(dist)

cr <- choicealpha(proxmat, distmat, range.alpha = seq(0, 1, 0.05), K = 6, graph = TRUE)
# Use the first graph
```

## CE8.17 Saving and mapping output

```{r}
clustG <- hclustgeo(proxmat, distmat, alpha = 0.2)
groups <- as.factor(cutree(clustG, k = 6))
shan_sf_clustGeo <- cbind(shan_sf, as.matrix(groups)) %>% rename(`clustGeo` = `as.matrix.groups.`)
qtm(shan_sf_clustGeo, "clustGeo")
```

## CE8.18 Parallel plots of clusters

```{r}
ggparcoord(data = shan_sf_clustGeo, columns = c(17:21), scale = "globalminmax", alphaLines = 0.2, boxplot = TRUE, title = "Multiple Parallel Coordinates Plots of ICT Variables by Cluster") +
  facet_grid(~ clustGeo) + 
  theme(axis.text.x = element_text(angle = 30))
```